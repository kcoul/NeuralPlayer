MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=5.000000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=7
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.958
fWaveSmoothing=0.450
fWaveParam=0.000
fModWaveAlphaStart=0.000
fModWaveAlphaEnd=1.320
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.050
ob_r=0.000
ob_g=0.100
ob_b=1.000
ob_a=1.000
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=0.000
nMotionVectorsX=25.600
nMotionVectorsY=9.600
mv_dx=0.000
mv_dy=0.000
mv_l=0.000
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=0
wavecode_0_samples=282
wavecode_0_sep=20
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=3.91581
wavecode_0_smoothing=0.10000
wavecode_0_r=0.200
wavecode_0_g=0.300
wavecode_0_b=1.000
wavecode_0_a=0.600
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=0
wavecode_1_scaling=0.89152
wavecode_1_smoothing=0.82000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=0.100
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=0
wavecode_2_scaling=0.89152
wavecode_2_smoothing=0.82000
wavecode_2_r=0.000
wavecode_2_g=0.200
wavecode_2_b=0.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=1
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=0
shapecode_0_sides=4
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.090
shapecode_0_y=0.900
shapecode_0_rad=0.22437
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.76002
shapecode_0_r=1.000
shapecode_0_g=0.000
shapecode_0_b=0.000
shapecode_0_a=1.000
shapecode_0_r2=1.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=0.600
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shapecode_1_enabled=0
shapecode_1_sides=100
shapecode_1_additive=1
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.260
shapecode_1_y=0.200
shapecode_1_rad=0.39317
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=6.19589
shapecode_1_r=0.000
shapecode_1_g=0.550
shapecode_1_b=0.500
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.400
shapecode_1_b2=0.400
shapecode_1_a2=0.070
shapecode_1_border_r=0.300
shapecode_1_border_g=0.700
shapecode_1_border_b=0.800
shapecode_1_border_a=0.000
shapecode_2_enabled=0
shapecode_2_sides=44
shapecode_2_additive=1
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.503
shapecode_2_y=0.500
shapecode_2_rad=0.03886
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=0.60986
shapecode_2_r=1.000
shapecode_2_g=0.100
shapecode_2_b=0.000
shapecode_2_a=0.900
shapecode_2_r2=1.000
shapecode_2_g2=1.000
shapecode_2_b2=1.000
shapecode_2_a2=0.000
shapecode_2_border_r=0.500
shapecode_2_border_g=0.500
shapecode_2_border_b=0.500
shapecode_2_border_a=0.000
shapecode_3_enabled=0
shapecode_3_sides=100
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.01000
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.49981
shapecode_3_r=0.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=0.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=0.200
shapecode_3_border_g=0.700
shapecode_3_border_b=0.500
shapecode_3_border_a=0.000
per_frame_init_1=
per_frame_init_2=//******** INITIALIZATION *********
per_frame_init_3=//---------- some global vars, do not change -------------
per_frame_init_4=avg = 0.01;
per_frame_init_5=q7 = .25; //MyZoom
per_frame_init_6=q8 =  rand(2.0)-1.0; //fractal modifier
per_frame_init_7=//q8 = 1; //#
per_frame_init_8=q16 = 1 + rand(2); //Tele ; rather fish eye
per_frame_init_9=//q16 = 1; //#
per_frame_init_10=q18 = rand(0.8)+.1; //brightness balance back/front
per_frame_init_11=q30 = 1; //logarithmic Z-Dist storage; unused
per_frame_init_12=q31 =128;
per_frame_init_13=start = 1; travel = 0; RotZ = 0; look = 0; slow = 0; t0 = time+3; lampx = .5; lampy = .5;
per_frame_init_14=cran0 = rand(1);
per_frame_init_15=n = 0; loop (10000, gmegabuf(n)=0; n=n+1; ); 
per_frame_init_16=n = 0; loop (10000,  megabuf(n)=0; n=n+1; ); 
per_frame_init_17=trelx = 0;  trely = 0; trelz = 0;
per_frame_init_18=reg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;
per_frame_init_19=
per_frame_init_20=//Find random starting point
per_frame_init_21=while (exec2(
per_frame_init_22=  ran1 = rand(800)/100;  ran2 = rand(800)/100;  ran3 = rand(800)/100;
per_frame_init_23=  PosX = rand(5)-2;   PosY = rand(5)-2;   PosZ = rand(5)-2; 
per_frame_init_24=
per_frame_init_25=//  PosX = 3.3; PosY = 2; PosZ = -2; ran1 = 0; ran2 = 0; ran3 = 0; //#
per_frame_init_26=
per_frame_init_27=  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); 
per_frame_init_28=  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);
per_frame_init_29=
per_frame_init_30=  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;
per_frame_init_31=  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;
per_frame_init_32=  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;
per_frame_init_33=
per_frame_init_34=  //***********BOT*************
per_frame_init_35=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_init_36=  dist = 0.001;
per_frame_init_37=  while (exec2(
per_frame_init_38=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_init_39=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_init_40=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_init_41=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_init_42=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_init_43=    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;
per_frame_init_44=    loop (7+1,
per_frame_init_45=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_init_46=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_init_47=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_init_48=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_init_49=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_init_50=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_init_51=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_init_52=    );
per_frame_init_53=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_init_54=    dist *= 1.05;
per_frame_init_55=  ,(dist < 0.6)*(len > 30)));
per_frame_init_56=,(dist < .06))); //end while
per_frame_init_57=
per_frame_1=
per_frame_2=// mod
per_frame_3=q8 = sin(time*.00075)*(sin(time*.001)*.5);
per_frame_4=// mod
per_frame_5=q16 = 1 + (1-abs(sin(time*.008))) * 9;
per_frame_6=
per_frame_7=fps_ = .0 * fps_ + 1*if(fps<=25,fps,25+.5*(fps-25)); 
per_frame_8=dec_s = 1-.06*30/fps_;
per_frame_9=beat = (time >  t0+3); t0 = if(beat, time, t0);
per_frame_10=
per_frame_11=// speed = min(0.2,dist_-.02) * (1+2*avg) *(1-slow*.0)*.7/q7; //#
per_frame_12=
per_frame_13=// mod
per_frame_14=speed = min(0.2,dist_+.1) * (1+2*avg) *(1-slow*.0)*.7/q7; //#
per_frame_15=
per_frame_16=// mod
per_frame_17=speed *= max(.3,max(treb_att,max(mid_att,bass_att))*.8);
per_frame_18=
per_frame_19=ds = ds * dec_s + (1-dec_s)*speed*.25/fps_; 
per_frame_20=// mod
per_frame_21=ds = max(0.001,ds);
per_frame_22=
per_frame_23=RotZ = if (RotZ==0,beat*(rand(100)<20*travel)*(rand(10)/10-.3),
per_frame_24=                   bnot(beat*(rand(100)<30))*RotZ);
per_frame_25=slow = if (bnot(slow), beat*(rand(1000*avg)<6), bnot(beat*(rand(100)<50)));
per_frame_26=look = if (bnot(look), beat*(rand(1000*speed)<12), bnot(beat*(rand(100)<50)));
per_frame_27=
per_frame_28=// mod
per_frame_29=RotZ = if ( RotZ == 0, sin(time*.11)*.1, RotZ );
per_frame_30=
per_frame_31=//Lamp View
per_frame_32=lx = if (beat,rand(150)/200+.15,lx);
per_frame_33=ly = if (beat,rand(150)/200+.15,ly);
per_frame_34=lampx = lampx * dec_s + (1-dec_s)*if (look,lx,0.5);
per_frame_35=lampy = lampy * dec_s + (1-dec_s)*if (look,ly,0.5);
per_frame_36=q1 = lampx; q2 = lampy;
per_frame_37=
per_frame_38=//Position 
per_frame_39=DirX= reg26; 
per_frame_40=DirY= reg27; 
per_frame_41=DirZ = reg28;
per_frame_42=PosX = PosX + ds*DirX ; 
per_frame_43=PosY = PosY + ds*DirY; 
per_frame_44=PosZ = PosZ + ds*DirZ; 
per_frame_45=q4 = PosX; 
per_frame_46=q5 = PosY; 
per_frame_47=q6 = PosZ;
per_frame_48=
per_frame_49=angchg = (.2-dist_)*(dist_ < .2)*2;
per_frame_50=// mod
per_frame_51=// angchg = min( .05, angchg );
per_frame_52=
per_frame_53=travel = if (angchg > 0,0,travel+ds);
per_frame_54=
per_frame_55=v1 = v1 * dec_s + (1-dec_s)* RotZ * ds;
per_frame_56=v2 = v2 *dec_s + (1-dec_s)*angchg *xslope/fps_;
per_frame_57=v3 = v3 *dec_s + (1-dec_s)*(angchg *yslope/fps_ + 2*v1*sin(time*.1));
per_frame_58=//v2 = .008;
per_frame_59=//push old RotMat
per_frame_60=reg30 =reg20; reg31 =reg21; reg32 =reg22; 
per_frame_61=reg33 =reg23; reg34 =reg24; reg35 =reg25; 
per_frame_62=reg36 =reg26; reg37 =reg27; reg38 =reg28; 
per_frame_63=
per_frame_64=n = 0; avg = 0;
per_frame_65=loop (15,
per_frame_66=  n = n+1;
per_frame_67=  //new Rot. Mat for infinitesimal angles
per_frame_68=  ran1 = rand(100)/100;
per_frame_69=  ran2 = rand(100)/200-.25;
per_frame_70=
per_frame_71=  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; 
per_frame_72=  ty = sin(n*1.57+ran2) * (n <= 4)*ran1;
per_frame_73=
per_frame_74=  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); 
per_frame_75=  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);
per_frame_76=
per_frame_77=  reg10 = c2*c1; 
per_frame_78=  reg11 = c2*s1; 
per_frame_79=  reg12 = -s2;
per_frame_80=  reg13 = s3*s2*c1 - c3*s1; 
per_frame_81=  reg14 = s3*s2*s1 + c3*c1; 
per_frame_82=  reg15 = s3*c2;
per_frame_83=  reg16 = c3*s2*c1 + s3*s1; 
per_frame_84=  reg17 = c3*s2*s1 - s3*c1; 
per_frame_85=  reg18 = c3*c2;
per_frame_86=
per_frame_87=  //pop old RotMat
per_frame_88=  reg20 =reg30; reg21 =reg31; reg22 =reg32; 
per_frame_89=  reg23 =reg33; reg24 =reg34; reg25 =reg35; 
per_frame_90=  reg26 =reg36; reg27 =reg37; reg28 =reg38; 
per_frame_91=
per_frame_92=  //Multiply new RotMat by old one
per_frame_93=  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;
per_frame_94=  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;
per_frame_95=  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;
per_frame_96=  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;
per_frame_97=  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;
per_frame_98=  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;
per_frame_99=  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;
per_frame_100=  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;
per_frame_101=  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;
per_frame_102=
per_frame_103=  reg20 =q20; reg21 =q21; reg22 =q22;
per_frame_104=  reg23 =q23; reg24 =q24; reg25 =q25;
per_frame_105=  reg26 =q26; reg27 =q27; reg28 =q28;
per_frame_106=
per_frame_107=  //***********BOT*************
per_frame_108=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_109=  dist = 0.002;
per_frame_110=  while (exec2(
per_frame_111=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_112=
per_frame_113=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_114=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_115=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_116=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_117=    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;
per_frame_118=    loop (7+1,
per_frame_119=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_120=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_121=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_122=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_123=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_124=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_125=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_126=    );
per_frame_127=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_128=    dist *= 1.1;
per_frame_129=  ,(dist < 0.6)*(len > 30)));
per_frame_130=  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points
per_frame_131=  avg = avg+abs(megabuf(n)/5);
per_frame_132=); //end loop 5
per_frame_133=
per_frame_134=n = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));
per_frame_135=
per_frame_136=xslope = min(max(2/avg*(megabuf(1)-megabuf(3)),-3),3);
per_frame_137=yslope = min(max(2/avg*(megabuf(4)-megabuf(2)),-3),3);
per_frame_138=
per_frame_139=dist_ = dist_*dec_s + (1-dec_s)*dist;
per_frame_140=
per_frame_141=// mod
per_frame_142=dist_ = max( 0.15, dist_ );
per_frame_143=
per_frame_144=q10 = ds*q7; //compensation of lin. movement in GetDist and zoom uv
per_frame_145=q14 = 1*abs(ds) + 2*(abs(v1) + abs(v2) + abs(v3)) + 1.0/255 + start*.05; 
per_frame_146=q19 = .6 + .4*sin(time*.02+cran0*6); //brightness backgd
per_frame_147=start = start * .9;
per_frame_148=q11 = v1; q12 = v2; q13 = v3;
per_frame_149=//forward comp. of Rotation
per_frame_150=
per_pixel_1=warp = 0.0; 
per_pixel_2=zoom = 1; 
per_pixel_3=dx = -q12/q16*(1+0*pow(x-.5,2)); 
per_pixel_4=dy = q13/q16*(1+0*pow(y-.5,2)); 
per_pixel_5=rot =q11;
per_pixel_6=
per_pixel_7=
warp_1=`float dist, struc, len; float2 uv0, uv1; float3 uv2; float4 box;
warp_2=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
warp_3=`
warp_4=`static const float3 CamPos = float3(q4,q5,q6);
warp_5=`static const float sustain = .98 - q14, change = q14, ds = q10;
warp_6=`static const float myzoom = q7, limit = 24, tele=q16;
warp_7=`
warp_8=`float GetDist(float2 uvi) 
warp_9=`{
warp_10=`  float2 tmp; 
warp_11=`  tmp = tex2D (sampler_pc_main, uvi).gb; 
warp_12=`  return 1-(tmp.y + 1.0/255*tmp.x + ds*.7);
warp_13=`}
warp_14=`
warp_15=`float2 PutDist(float x) {float fg, fb; fg = modf((1-x)*255.0,fb);
warp_16=`  return (float2(fg,fb/255.0));}
warp_17=`
warp_18=`
warp_19=`float MinDist (float2 uvi) 
warp_20=`{
warp_21=`   float tmp; float4 nb; float4 nb2; float2 pix;
warp_22=`   pix = texsize.zw*(1.0+length(uvi-0.5)*8.0);
warp_23=`   tmp = GetDist(uvi);
warp_24=`   nb.x = GetDist(uvi+pix*float2(-1,-1));  
warp_25=`   nb.y = GetDist(uvi+pix*float2(1,-1));
warp_26=`   nb.z = GetDist(uvi+pix*float2(1,1));   
warp_27=`   nb.w = GetDist(uvi+pix*float2(-1,1));
warp_28=`   nb2.x = GetDist(uvi+pix*float2(0,-1));  
warp_29=`   nb2.y = GetDist(uvi+pix*float2(1,0));
warp_30=`   nb2.z = GetDist(uvi+pix*float2(0,1));   
warp_31=`   nb2.w = GetDist(uvi+pix*float2(-1,0));
warp_32=`   //Eo.S. more efficient usage of min to get min value of all 8 GetDist() calls, removes 11ALU
warp_33=`   nb = min( nb, nb2 );
warp_34=`   nb.xy = min( nb.xy, nb.zw );
warp_35=`   tmp = min( nb.x, nb.y );
warp_36=`   return tmp;
warp_37=`}
warp_38=`
warp_39=`float3 Get1 (float2 uvi) 
warp_40=`{
warp_41=`   return lerp (GetPixel(uvi), GetBlur1(uvi), change * 4);
warp_42=`} //#
warp_43=`
warp_44=`float4 mbox (float3 uvi) 
warp_45=`{
warp_46=`  float3 zz, zz0; 
warp_47=`  float tmp, li;
warp_48=`
warp_49=`  float mod1 = sin(time*.0085);
warp_50=`  float mod2 = sin(time*.0076);
warp_51=`  float mod3 = sin(time*.009);
warp_52=`
warp_53=`  zz = uvi;
warp_54=`
warp_55=`  // mod
warp_56=`  zz.x *= (1+mod2*.23);
warp_57=`  zz.z *= (1+mod1*.25);
warp_58=`  zz.y *= (1+mod3*.27);
warp_59=`
warp_60=`  zz0 = zz + q8; 
warp_61=`  li = 0;
warp_62=`  for (int n = 0; n <= 7; n++)   
warp_63=`  {
warp_64=`    zz = 2.0*clamp(zz,-1,1)-zz;  
warp_65=`    tmp = dot(zz,zz);
warp_66=`    if (tmp <= 0.25) 
warp_67=`    {
warp_68=`      zz *= 4; 
warp_69=`      li=limit;
warp_70=`    } 
warp_71=`    else if (tmp <= 1) 
warp_72=`    { 
warp_73=`      zz /= pow(tmp,1);
warp_74=`    }
warp_75=`
warp_76=`    // zz = 2.6 * zz + zz0;
warp_77=`    // mod
warp_78=`    zz = (2.6 + (mod1*.155) ) * (zz-.3+abs(mod2*.5)) + zz0 + (mod3*.5);
warp_79=`  }
warp_80=`  return float4(zz,li);
warp_81=`}
warp_82=`
warp_83=`shader_body {
warp_84=`uv1 = (uv-.5)*aspect.xy*tele;
warp_85=`uv = (uv-.5)*(1-ds/(GetDist(uv))) + .5;
warp_86=`
warp_87=`float3 noise = frac(8*tex2D (sampler_noise_lq,uv+rand_frame.yz)); 
warp_88=`
warp_89=`dist = noise.r;
warp_90=`   if (noise.g > 0.2) 
warp_91=`   {
warp_92=`       float3 noiseBiased = noise - float3( 0.4, 0.5, 0.5 );
warp_93=`//Eo.S. combine the subtraction on noise to a single float3 to ensure compiler does the subtraction in a single ALU
warp_94=`       dist = MinDist( (noiseBiased.zy) * 0.003 +uv ) +  0.008 * (noiseBiased.x) * abs(noiseBiased.y);
warp_95=`   }
warp_96=`dist = min(dist,GetDist(uv));
warp_97=`float tdist = dist + pow(dist,3);
warp_98=`
warp_99=`uv2 = mul(float3(uv1*tdist,tdist-.0)/myzoom,RotMat)+CamPos;
warp_100=`uv2 = (frac(uv2/8.0+.5)-.5)*8.0;
warp_101=`
warp_102=`box = mbox (uv2 );
warp_103=`// mod
warp_104=`// box *= (.1 + (abs(sin(time*.013)*2.5)));
warp_105=`// mod
warp_106=`box *= 1.5 - (bass_att*.15);
warp_107=`
warp_108=`len = (length(box.xyz));
warp_109=`struc = length(box.xyw)/limit;
warp_110=`float dec = log(1+len/limit)*.02*(1-GetDist(uv));
warp_111=`if (
warp_112=`  (dist <= GetDist(uv)) 
warp_113=`  && (len < limit) 
warp_114=`  // && (dist > 0.005)
warp_115=`  // mod
warp_116=`  && (dist > 0.005 + (pow(1-rad,15)*.035))
warp_117=`) 
warp_118=`{
warp_119=`  ret.r = (1-sustain)*struc+sustain*(Get1(uv).r); ret.gb=  PutDist(dist); 
warp_120=`} 
warp_121=`else 
warp_122=`  ret = tex2D(sampler_fc_main,uv)*float3(sustain,0,1-dec)-float3(1.0/255,0,change/6);
warp_123=`
warp_124=`}
comp_1=`#define sat saturate
comp_2=`static const float2 pix = texsize.zw;
comp_3=`float glow, tmp, lamp, dist, bdist, b2dist, dist_c;
comp_4=`float2 dz, uv1, uv3;
comp_5=`static const float3 CamPos = float3(q4,q5,q6);
comp_6=`static const float myzoom = q7;
comp_7=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
comp_8=`static const float3 col_struc =  float3(1,.7,.3) + .2*(rand_preset.xyz-.5);
comp_9=`static float2 center = float2 (q1,q2);
comp_10=`
comp_11=`float3 GetBlurX (float2 uvi, float x) {return lerp (GetPixel(uvi), GetBlur1(uvi), x);}
comp_12=`
comp_13=`float GetDist(float2 uvi)   {return 1-GetPixel(uvi).b;}
comp_14=`
comp_15=`// mod
comp_16=`float GetDistB(float2 uvi)  {return GetDist(uvi); } // 1-GetBlur1(uvi).b;}
comp_17=`
comp_18=`float GetDistB2(float2 uvi) {return 1-GetBlur2(uvi).b;}
comp_19=`
comp_20=`float MinDistB (float2 uvi) {float tmp; float4 nb; //##nicht ideal
comp_21=`  tmp = GetDist(uvi);
comp_22=`  tmp = min(tmp,GetDistB2(uvi)*.7) ;
comp_23=`  return tmp;}
comp_24=`
comp_25=`shader_body {
comp_26=`uv = (uv-.5)*.9 + .5;
comp_27=`uv1 = (uv-center)*aspect.xy;
comp_28=`
comp_29=`dist = MinDistB(uv);
comp_30=`bdist = lerp(dist,GetDistB(uv),.2);
comp_31=`dist_c = clamp(GetDistB2 (center),.1,.4); //center distance
comp_32=`
comp_33=`float3 uv2 = mul(float3((uv-.5)*MinDistB(uv),MinDistB(uv))/myzoom,RotMat)+CamPos;
comp_34=`glow = pow (sat(tex2D (sampler_noise_hq,.02*uv2).r-.6)*2,2);
comp_35=`//uv += .003*glow*(tex2D (sampler_noise_mq,uv*2+float2(0,time/4).xy-.5));
comp_36=`
comp_37=`float focus = sat(abs(GetDistB2(uv)-dist_c)*1+.2);
comp_38=`float struc = GetBlurX(uv,focus).r;
comp_39=`
comp_40=`// mod
comp_41=`// glow = sat(1-exp(-(GetBlur1(uv).r))-.2);
comp_42=`// mod
comp_43=`glow = sin(time*.09)*.18;
comp_44=`
comp_45=`q18 = 1;
comp_46=`ret = pow(struc,1) * (.2+(1-focus) *lerp(dist,1-dist,q18)) * (1+.5*sin(uv2));
comp_47=`// mod
comp_48=`// ret = lerp(ret, float3(0,1,glow*3), glow);
comp_49=`ret = lerp(ret, float3(sin(time*.0125),sin(time*.025),sin(time*.0375)), sin(time*.016)*.15);
comp_50=`
comp_51=`//distant light
comp_52=`ret += 
comp_53=`  // mod
comp_54=`  pow(1-GetBlurX(uv,.8).b,(3+sin(time*.1)))
comp_55=`  * (.5+.5*slow_roam_cos) 
comp_56=`  * q19 
comp_57=`  // mod
comp_58=`  * max(1,bass_att*2);
comp_59=`
comp_60=`//Lamp
comp_61=`uv3 = uv1; 
comp_62=`lamp = saturate(1-4*length(uv3))*(struc)*saturate(1-2*bdist)*1.8;
comp_63=`//ret += (1-lum(ret))*lamp;
comp_64=`ret = 1-exp((-2)*ret);
comp_65=`//ret = GetPixel(uv).xyz;
comp_66=`}
comp_67=`
comp_68=`//-------------------------------------------
comp_69=`//Written by martin
comp_70=`
