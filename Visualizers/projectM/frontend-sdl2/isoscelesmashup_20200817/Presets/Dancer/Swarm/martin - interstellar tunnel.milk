MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=5.000000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=0.952
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=2
bAdditiveWaves=1
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=0
bMaximizeWaveColor=0
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=4.704
fWaveSmoothing=0.900
fWaveParam=1.000
fModWaveAlphaStart=0.000
fModWaveAlphaEnd=1.320
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.100
ob_b=0.000
ob_a=0.300
ib_size=0.260
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=1.850
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=128
wavecode_0_sep=120
wavecode_0_bSpectrum=1
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=1
wavecode_0_scaling=3.54480
wavecode_0_smoothing=0.13000
wavecode_0_r=0.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=0.000
wave_0_per_frame1=t1 = 0;
wave_0_per_point1=x = sample;
wave_0_per_point2=
wave_0_per_point3=gmegabuf(t1) =  gmegabuf(t1)*0.5 + 0.5* (value1+value2) ;
wave_0_per_point4=
wave_0_per_point5=y = gmegabuf (t1)*.15+.3;
wave_0_per_point6=t1 += 1;
wavecode_1_enabled=0
wavecode_1_samples=182
wavecode_1_sep=0
wavecode_1_bSpectrum=1
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=0.20041
wavecode_1_smoothing=0.00000
wavecode_1_r=0.400
wavecode_1_g=0.600
wavecode_1_b=0.700
wavecode_1_a=0.140
wave_1_per_point1=ang = rand(6.28);
wave_1_per_point2=rad = rand(1) * rand(1)/3;
wave_1_per_point3=
wave_1_per_point4=x = 0.5 + rad * cos(ang);
wave_1_per_point5=y = 0.5 + rad * sin(ang);
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=1
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=0.89152
wavecode_2_smoothing=0.82000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=0.400
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=1
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=0
shapecode_0_sides=14
shapecode_0_additive=1
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=2
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.09861
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.87965
shapecode_0_tex_zoom=6.61077
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=0.000
shapecode_0_r2=1.000
shapecode_0_g2=1.000
shapecode_0_b2=1.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=0.000
shapecode_0_border_a=0.000
shape_0_per_frame1=if (instance ==1, textured=0; a=1; r=0;g=0;b=0;r2=r;g2=g;b2=b; rad=0.015;additive=0,0);
shapecode_1_enabled=1
shapecode_1_sides=12
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=64
shapecode_1_x=0.260
shapecode_1_y=0.200
shapecode_1_rad=0.39317
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=0.93550
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=0.600
shapecode_1_a=0.700
shapecode_1_r2=0.000
shapecode_1_g2=0.000
shapecode_1_b2=0.000
shapecode_1_a2=0.100
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.000
shape_1_per_frame1=shapes = reg01;
shape_1_per_frame2=copies = int(num_inst/shapes);
shape_1_per_frame3=
shape_1_per_frame4=n = int(instance/copies)*8+1000;
shape_1_per_frame5=frac = (instance%copies)/(copies);
shape_1_per_frame6=
shape_1_per_frame7=x0 = gmegabuf(n)*frac + megabuf(n)*(1-frac);
shape_1_per_frame8=y0 = gmegabuf(n+1)*frac+ megabuf(n+1)*(1-frac);
shape_1_per_frame9=z0 = gmegabuf(n+2)*frac+ megabuf(n+2)*(1-frac);
shape_1_per_frame10=
shape_1_per_frame11=megabuf(n) = x0;
shape_1_per_frame12=megabuf(n+1) = y0;
shape_1_per_frame13=megabuf(n+2) = z0;
shape_1_per_frame14=
shape_1_per_frame15=x = x0 + .5;
shape_1_per_frame16=y = y0*reg32 + .5;
shape_1_per_frame17=z = z0;
shape_1_per_frame18=
shape_1_per_frame19=rad = 0.009/z*reg13;
shape_1_per_frame20=
shape_1_per_frame21=r = instance/num_inst;
shape_1_per_frame22=b = 1-r;
shape_1_per_frame23=g = 4*pow (r-0.5,2);
shape_1_per_frame24=r = r*0.8+.2;
shape_1_per_frame25=g = g*0.8+.2;
shape_1_per_frame26=b = b*0.8+.2;
shape_1_per_frame27=r2 = r/2; b2 = b/2; g2 = g/2;
shape_1_per_frame28=
shapecode_2_enabled=0
shapecode_2_sides=20
shapecode_2_additive=1
shapecode_2_thickOutline=1
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.10896
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=0.81386
shapecode_2_r=1.000
shapecode_2_g=0.100
shapecode_2_b=0.500
shapecode_2_a=1.000
shapecode_2_r2=0.000
shapecode_2_g2=0.000
shapecode_2_b2=0.000
shapecode_2_a2=1.000
shapecode_2_border_r=0.500
shapecode_2_border_g=1.000
shapecode_2_border_b=0.000
shapecode_2_border_a=0.000
shape_2_per_frame1=a = max(0,sin(q10*6.2832/4))/5;
shape_2_per_frame2=a2 = 0;
shapecode_3_enabled=1
shapecode_3_sides=12
shapecode_3_additive=0
shapecode_3_thickOutline=1
shapecode_3_textured=0
shapecode_3_num_inst=64
shapecode_3_x=0.600
shapecode_3_y=0.550
shapecode_3_rad=0.97237
shapecode_3_ang=1.25664
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.34933
shapecode_3_r=1.000
shapecode_3_g=0.600
shapecode_3_b=0.000
shapecode_3_a=0.700
shapecode_3_r2=0.000
shapecode_3_g2=0.000
shapecode_3_b2=1.000
shapecode_3_a2=0.100
shapecode_3_border_r=0.200
shapecode_3_border_g=0.700
shapecode_3_border_b=0.500
shapecode_3_border_a=0.000
shape_3_per_frame1=shapes = reg01;
shape_3_per_frame2=copies = int(num_inst/shapes);
shape_3_per_frame3=
shape_3_per_frame4=n = int(instance/copies)*8+1000;
shape_3_per_frame5=frac = (instance%copies)/(copies);
shape_3_per_frame6=
shape_3_per_frame7=x0 = gmegabuf(n)*frac + megabuf(n)*(1-frac);
shape_3_per_frame8=y0 = gmegabuf(n+1)*frac+ megabuf(n+1)*(1-frac);
shape_3_per_frame9=z0 = gmegabuf(n+2)*frac+ megabuf(n+2)*(1-frac);
shape_3_per_frame10=
shape_3_per_frame11=megabuf(n) = x0;
shape_3_per_frame12=megabuf(n+1) = y0;
shape_3_per_frame13=megabuf(n+2) = z0;
shape_3_per_frame14=
shape_3_per_frame15=x = x0 + .5;
shape_3_per_frame16=y = y0*reg32 + .5;
shape_3_per_frame17=z = z0;
shape_3_per_frame18=
shape_3_per_frame19=rad = 0.009/z*reg13;
shape_3_per_frame20=
shape_3_per_frame21=r = instance/num_inst;
shape_3_per_frame22=b = 1-r;
shape_3_per_frame23=g = 4*pow (r-0.5,2);
shape_3_per_frame24=r = r*0.8+.2;
shape_3_per_frame25=g = g*0.8+.2;
shape_3_per_frame26=b = b*0.8+.2;
shape_3_per_frame27=r2 = r/2; b2 = b/2; g2 = g/2;
shape_3_per_frame28=
shape_3_per_frame29=x = 1-x; 
shape_3_per_frame30=
shape_3_per_frame31=//y = 1-y; 
per_frame_init_1=n = 0; loop (15000,megabuf(n) =0;gmegabuf(n) = 0; n+=1;);
per_frame_init_2=flen = 128; shapes = 16; reg01 = shapes;
per_frame_init_3=minbpm=90; maxbpm=240; num_res=80;
per_frame_init_4=slow = 1; r1=4; r2=1; run = 0; bvol_=0; dir = 1; tlen=3; ndir = 1; size_=1; vol_=1; certain = 0;
per_frame_init_5=init = 1;
per_frame_init_6=pi=3.1416;
per_frame_init_7=tubes = 1 + int(rand(4));
per_frame_init_8=
per_frame_1=dec_f = 1-10/fps; dec_m = 1-3/fps; dec_s = 1-1/fps; dt=1/fps;
per_frame_2=
per_frame_3=maxind = 0; qavg = 0.1; i=0; 
per_frame_4=bvol = max(0.1,(bass+mid+treb)/3); bvol_=bvol_*dec_m + (1-dec_m)*bvol;
per_frame_5=Excite = (bvol-bvol_);
per_frame_6=loop (num_res,
per_frame_7=  n = i*8;
per_frame_8=  Freq  = (i/(num_res-1)+minbpm/(maxbpm-minbpm))*(maxbpm-minbpm)/60;
per_frame_9=  Feder = sqr(Freq*6.2832);
per_frame_10=  megabuf (n+4) = megabuf(n+1); megabuf (n+1) *= 1-0.25*dt; 
per_frame_11=  EC_Steps = int (10*Freq*dt)+1;
per_frame_12=  loop (EC_Steps, // Euler-Cauchy steps
per_frame_13=    Kraft = Excite - Feder*megabuf(n + 2) ;
per_frame_14=    megabuf (n+1) += Kraft        * dt/EC_Steps;
per_frame_15=    megabuf (n+2) += megabuf(n+1) * dt/EC_Steps;  );
per_frame_16=  beatcos = megabuf(n+1);  beatsin = megabuf(n+2)*Freq*6.2832;
per_frame_17=  quad = sqrt (pow(beatsin,2) + pow(beatcos,2));
per_frame_18=  megabuf (n+3) = megabuf(n+3) *dec_m +  quad* (1-dec_m);
per_frame_19=  if (megabuf(n+3) > megabuf (maxind*8+3), maxind =i,0);
per_frame_20=  qavg = qavg+pow (megabuf(n+3),2);
per_frame_21=  i += 1;);
per_frame_22=
per_frame_23=qavg = sqrt (qavg/num_res); 
per_frame_24=qdev = 0; i =0; loop (num_res, qdev += pow(megabuf(i+3)-qavg,2); i += 8; );
per_frame_25=qdev = sqrt (qdev/num_res);
per_frame_26=BPM =   (maxind/(num_res-1)+minbpm/(maxbpm-minbpm))*(maxbpm-minbpm);
per_frame_27=if (BPM > 200, BPM *= 0.5, 0);
per_frame_28=
per_frame_29=m1 = maxind*8;
per_frame_30=certain = certain * dec_m + (1-dec_m) * megabuf(m1+3)/qavg;
per_frame_31=dbl_beat = megabuf(m1+1) * megabuf (m1+4) < 0;
per_frame_32=sgl_beat = dbl_beat * (megabuf (m1+4) < 0);
per_frame_33=bcount += dbl_beat;is_rbeat  = dbl_beat && (bcount%2==0);
per_frame_34=bcount2 += is_rbeat;
per_frame_35=trel1 += BPM/60*dt/2;
per_frame_36=
per_frame_37=n = 0; vol = .0; bbase = 10000;
per_frame_38=loop (flen,
per_frame_39=  value = gmegabuf(n)/vol_;
per_frame_40=  trig = value > megabuf(bbase+n)*1.5*30/fps; 
per_frame_41=  megabuf (bbase+n) = value;
per_frame_42=  dec = if(trig,dec_f,dec_m); 
per_frame_43=  megabuf(n+5000) = megabuf(n+5000)*dec + (1-dec)*value;
per_frame_44=  vol = vol + pow(megabuf(n+5000),2);
per_frame_45=  n += 1;
per_frame_46=);
per_frame_47=
per_frame_48=vol = sqrt(vol);
per_frame_49=vol_ = dec_s*vol_ + (1-dec_s)*vol*5;
per_frame_50=
per_frame_51=// post smoothing
per_frame_52=n = 0;
per_frame_53=loop (flen,
per_frame_54=  value = megabuf(n+5000) * 5*n/(1+5*n);
per_frame_55=  dec = if (megabuf(4000+n)<=value,.9,.9);
per_frame_56=  dec = dec_f; 
per_frame_57=  megabuf(n+4000) = megabuf(n+4000)*dec+ (1-dec)*value;
per_frame_58=  n = n+1;
per_frame_59=);
per_frame_60=
per_frame_61=
per_frame_62=// Berechnung Ortskoordinaten aus Spektrum
per_frame_63=step = flen/shapes/2+1; 
per_frame_64=n = 2000; m = 4000+step; k=0; slope = 0.01; speed = 0.4/slope; size = 0;
per_frame_65=loop (shapes,
per_frame_66=  x0 = megabuf(m)-megabuf(m+1);
per_frame_67=  y0 = megabuf(m)-megabuf(m-1);
per_frame_68=  radi = sqrt (x0*x0+y0*y0);
per_frame_69=  angi = atan2 (x0,y0)+6.28*1;
per_frame_70=  j=n+4000;
per_frame_71=  megabuf(j)   +=min(slope, max (-slope, radi-megabuf(j)))*speed/fps; 
per_frame_72=  megabuf(j+1) +=min(10*slope, max (-10*slope, angi-megabuf(j+1)))*speed/fps; 
per_frame_73=  megabuf(n)   = megabuf(j)*cos(megabuf(j+1));
per_frame_74=  megabuf(n+1) = megabuf(j)*sin(megabuf(j+1));
per_frame_75=
per_frame_76=  size += pow (megabuf(n),2)+pow (megabuf(n+1),2);
per_frame_77=  dec = if (bvol2 > bvol,dec_m, dec_m);
per_frame_78=  bvol2 = dec*bvol2 + (1-dec)*bvol;
per_frame_79=  megabuf(n+2) = 0.08/sqrt(pow(megabuf(n),2) + pow (megabuf(n+1),2));
per_frame_80=  m = m + step; n = n+8; k= k+1;
per_frame_81=);
per_frame_82=
per_frame_83=
per_frame_84=//Projektion
per_frame_85=n = 1000; m = 2000;
per_frame_86=size_ = size*sec_s + (1-dec_s)*sqrt(size)*shapes*7;
per_frame_87=loop (shapes,
per_frame_88=  gmegabuf(n) = megabuf(m)/megabuf(m+2)/size_;
per_frame_89=  gmegabuf(n+1) = megabuf(m+1)/megabuf(m+2)/size_;
per_frame_90=  gmegabuf(n+2) = megabuf(m+2);
per_frame_91=  n = n+8; m = m+8;
per_frame_92=);
per_frame_93=
per_frame_94=reg32 = aspecty;
per_frame_95=reg13 = 1.7+0.25*sqrt(mid_att+bass_att); //shp rad
per_frame_96=
per_frame_97=trig = (bcount%64 == 0) && dbl_beat;
per_frame_98=if (trig|| init, 
per_frame_99=  r1 = 4+int (rand(8));
per_frame_100=  r2 = max (2,int ((r1-2)*rand(1)));
per_frame_101=  r3 = -1*pow (2, int(rand(2)));
per_frame_102=
per_frame_103=  s1 = if (rand(8)<2,1,tubes) ;
per_frame_104=  s2 = sqrt(rand(1.5))*s1;
per_frame_105=  if (rand(1)>0.5,s1=-s1,0);
per_frame_106=  s3 = -1*pow (2, int(rand(4)));
per_frame_107=
per_frame_108=  ndir = if (rand(1)<0.2,-1,1);
per_frame_109=,0);
per_frame_110=
per_frame_111=run = if (bvol_<0.4,0,if(bvol_>0.7,1,run));
per_frame_112=slow = if (certain<1.7,1,if(certain>2.5,0,slow));
per_frame_113=dir_ = dir_*dec_f+dir*(1-dec_f);
per_frame_114=q24 = ndir;
per_frame_115=movarg = (2+certain*2)*dt/4*dir_;
per_frame_116=tmove += movarg;
per_frame_117=q19=tmove;
per_frame_118=
per_frame_119=//mask shift x
per_frame_120=q20 = 1/r1;  //Anteil
per_frame_121=q22 = q20*r2; //Limit
per_frame_122=trelx += BPM/120/q20*run*dt* (1-0.5*slow) * r3 + ndir*movarg*run; //ungef. Bew. Korr
per_frame_123=q21 = q20*(trelx); //phase
per_frame_124=
per_frame_125=//mask shift y
per_frame_126=q25 = s1;  //Divisor, 1,2,3,4,6 bei 12 tubes
per_frame_127=q26 = s2;  //Narrow
per_frame_128=trely += BPM/120/3*2*q25*s3*run*dt* (1-0.5*slow);
per_frame_129=q27 = (trely)/q25;  //phase
per_frame_130=
per_frame_131=q10 = trel1;
per_frame_132=
per_frame_133=trig = (bcount%8==0) && dbl_beat;
per_frame_134=tbers = max(0,if (bers, tbers+dt/2, tbers-dt/2));
per_frame_135=vc = certain+bvol*0.25;
per_frame_136=if (vc > 6+tbers, bers=1, if (vc < 5+tbers/5, bers=0;,0));
per_frame_137=
per_frame_138=if (bers, if (trig, 
per_frame_139=  if (rand(15)<1,dir *=1,0); //dir soll hier nur vorwartes sein#
per_frame_140=  ddx = int (rand(4)-2)/5; 
per_frame_141=  ddy = - int (rand(4)-2)/5, 0);, 
per_frame_142=  if (trig, ddx=0; ddy=0;,0));
per_frame_143=
per_frame_144=q17=ddx; q18 = ddy; 
per_frame_145=q18 += 0.01*sin(trel1/4*3.1416)*certain;
per_frame_146=
per_frame_147=q8 = min(1,0.7/vc); //dimmt alle tubes 
per_frame_148=q9 = tlen;
per_frame_149=q12 = sqrt(vc);
per_frame_150=q29 = tubes;
per_frame_151=
per_frame_152=where = sin(q19/10-0.2)>0;  //rot = 1
per_frame_153=triga = (where==1) && (owhere==0);
per_frame_154=trigb = (where==0) && (owhere==1);
per_frame_155=owhere = where;
per_frame_156=
per_frame_157=//schwarz
per_frame_158=if (triga || init,
per_frame_159=  arg1a =1 + rand(2);  
per_frame_160=  arg2a =0.15 + rand(1);
per_frame_161=  arg3a = 0.5+rand(0.5)*arg1a; //limit sin 1
per_frame_162=  arg4a =1 + rand(1)/arg1a;
per_frame_163=  arg5a =pi*(int(rand(3)));
per_frame_164=  arg6a = 0.5 + rand(0.5)*arg4a;  //limit sin 2
per_frame_165=,0);
per_frame_166=q1= arg1a; q2=arg2a; q3=arg3a; q4=arg4a; q5=arg5a; q6 = arg6a;
per_frame_167=
per_frame_168=if (trigb || init,
per_frame_169=  arg1b = 1 + rand(2);  
per_frame_170=  arg2b =0.15 + rand(1);
per_frame_171=  arg3b = 0.5+rand(0.5)*arg1b; //limit sin 1
per_frame_172=  arg4b =0.2 + rand(0.8)/arg1b;
per_frame_173=  arg5b =pi*(int(rand(3)));
per_frame_174=  arg6b = 0.5 + rand(0.5)*arg4b; //limit sin 2
per_frame_175=,0);
per_frame_176=q11= arg1b; q12=arg2b; q13=arg3b; q14=arg4b; q15=arg5b; q16 = arg6b;
per_frame_177=
per_frame_178=ax = pow(sin(tmove*.017),5)*(certain+3)/4*dt;
per_frame_179=ay = pow(sin(time*.013),5)*(certain+3)/4*dt;
per_frame_180=stx += ax; sty += ay;
per_frame_181=q31 = stx;
per_frame_182=q32 = sty;
per_frame_183=//q17 -= ax; q18 -= ay;
per_frame_184=init = 0;
per_frame_185=rot = 0.0; zoom = 1+movarg/2; warp = 0; dx = 0; dy = 0;
per_frame_186=
warp_1=`shader_body {
warp_2=`float corr = texsize.xy*texsize_noise_lq.zw;
warp_3=`float2 uv1 = uv-.5;
warp_4=`float2 uv2 = uv-.5*float2(uv-uv_orig);
warp_5=`float2 uv3 = uv_orig;
warp_6=`float k = 16*lum(GetBlur1(uv_orig))*(3.14);
warp_7=`
warp_8=`uv3 = mul(uv1,float2x2(cos(k),sin(k),-sin(k),cos(k)));
warp_9=`
warp_10=`float2 uvd = .25*lum(GetBlur1(uv_orig))*uv3;
warp_11=`uv += uvd;
warp_12=`uv2 += uvd;
warp_13=`
warp_14=`
warp_15=`float3 crisp = tex2D(sampler_fw_main,uv)*0.99;
warp_16=`
warp_17=`ret = lerp(crisp,lum(crisp),0.2*lum(GetBlur1(uv_orig))) * (1-0.2*lum(GetBlur1(uv)))- 0.01;;
warp_18=`ret += 0.0007/rad * q12*(0.1+saturate(sin(q10*6.238/4)))/lum(roam_cos)*roam_cos;
warp_19=`
warp_20=`ret -= rad*rad*0.05;
warp_21=`}
comp_1=`#define sat saturate
comp_2=`#define snl sampler_noise_lq
comp_3=`#define snh sampler_noise_hq
comp_4=`sampler sampler_pw_noise_lq;
comp_5=`float3 neon, col;
comp_6=`float2 uv0, uv1, uv2, uv4, uv5, dz, tuv0, tuv, smask;
comp_7=`float stars, near, z, k1, ftu, nshape, nmask;
comp_8=`bool istube;
comp_9=`static const int anz = 19, sanz=4, tubes = q29;
comp_10=`static float trad = 0.05, tlen = q9; 
comp_11=`
comp_12=`float tria (float x) {return abs(2*frac(x/2)-1);}
comp_13=`
comp_14=`shader_body {
comp_15=`uv += float2(q17,q18);
comp_16=`uv0 = uv;
comp_17=`uv1 = (uv-0.5)*aspect.xy ;
comp_18=`
comp_19=`
comp_20=`//NEON
comp_21=`uv1 = (uv-0.5)*aspect.xy  ; 
comp_22=`float fuck1 = (1*atan2(uv1.x,uv1.y));
comp_23=`tuv0 = float2 (.5/length (uv1), fuck1/M_PI) ;
comp_24=`near = sat (length(uv1)*12); 
comp_25=`tuv = tuv0 + float2(q19,0);
comp_26=`
comp_27=`float pnew =  1.25/tubes*clamp(q1*sin(tuv.x*q2),-q3,q3) * (clamp(q4*cos(q5*tuv.y),-q6,q6));
comp_28=`float pold =  0.75/tubes*clamp(q11*sin(tuv.x*q12),-q13,q13) *clamp(q14*cos(q15*tuv.y),-q16,q16);
comp_29=`
comp_30=`float where = sat (0.5+1.5*sin(tuv.x/10));
comp_31=`tuv.y += lerp (pnew,pold, where);
comp_32=`
comp_33=`ftu = frac (tuv.y*tubes/2)-0.5; 
comp_34=`nshape = saturate(1-1/trad*pow (ftu,2));
comp_35=`tuv.x -= nshape*1*sqrt(trad)/tubes*tuv0.x;
comp_36=`k1 = abs(sin(tuv.x/tlen*M_PI*2));
comp_37=`nshape *= near;
comp_38=`istube = nshape >0;
comp_39=`uv5.x  = tuv.x*0.25/tlen;
comp_40=`uv5.y  = 0*tuv.y*tubes/16.0; 
comp_41=`col = (tex2D(sampler_pw_noise_lq,uv5/32)+0.1);// * float3(0.5,2*exp(-25*abs(ftu)),2*exp(-15*abs(ftu))); //-< Metall-Look !
comp_42=`
comp_43=`neon = pow(nshape,0.41)*sat(8*k1)*col;
comp_44=`uv5.y  = tuv.y*tubes/16.0; 
comp_45=`float dir = (int(uv5.y*16)%tubes)/2;
comp_46=`nmask = sat(4*q22-4*tria(((q24*uv5.x*8.0 + 0*(int(uv5.y*16)%tubes)/2) *q20-q21))) ;
comp_47=`nmask *=  sat(tria((uv5.y*16.0+1)/q25+q27*2)*q26 -q26+1) ; 
comp_48=`
comp_49=`stars = 0;
comp_50=`int n = 1;
comp_51=`float t0 = q19*0.01;
comp_52=`while (n <= sanz) {
comp_53=`  int m = (n + t0*sanz) % sanz;
comp_54=`  float arg = (1.0*m/sanz-t0); 
comp_55=`  float dist = frac(arg); //evtl sqrt !;
comp_56=`  float inten =  sat(1-dist*dist); 
comp_57=`  float2 uv40 = 3*64 * (dist* uv1 + ftu*nshape*0.5);
comp_58=`  uv4 = uv40 + 100*m/sanz+float2 (q31,q32);
comp_59=`  float2 snoise = tex2D (sampler_pw_noise_lq,uv4/256);
comp_60=`  smask = saturate (snoise-float2(0.98,0.99)-0.00*length(uv40)) ;
comp_61=`//  stars += 4*inten*(stars <= 0.1) * saturate(32*smask.y*(1-10*pow(length(frac(uv4)-0.5),2)));
comp_62=`  stars += inten * saturate (smask.x * 0.1/pow(length(frac(uv4)-0.5),2));
comp_63=`n++;
comp_64=`}
comp_65=`
comp_66=`ret = lerp (GetPixel(uv), GetPixel(uv+ftu*0.5)/2, nshape) ;
comp_67=`ret  *= (uv.x<1) * (uv.x>0)* (uv.y<1) * (uv.y>0);
comp_68=`ret += near/2*istube*GetBlur1(uv -ftu*istube);
comp_69=`ret += (neon*(1.2-q8/2))* lerp (nmask,pow(nshape,8)*0.2,q8);;
comp_70=`
comp_71=`
comp_72=`//Hintergrundbel.
comp_73=`uv2 = frac (uv1*.1*length(uv1)+0.5 +ftu*0.3*nshape);
comp_74=`ret += GetBlur1(uv2)*0.25*(1-istube*0.5);
comp_75=`
comp_76=`ret += stars*(1-istube*0.5);
comp_77=`
comp_78=`
comp_79=`
comp_80=`float3 shine = ret;
comp_81=`float radi=1;
comp_82=`float scale=1.5/anz;
comp_83=`for (int n=1; n <= anz; n++)
comp_84=`{ 
comp_85=`  shine += scale*GetBlur1((uv0-0.5)*radi+0.5) ;
comp_86=`  radi -= .9/anz ;
comp_87=`}
comp_88=`
comp_89=`
comp_90=`ret = shine ;
comp_91=`
comp_92=`//ret = near * 0.5;
comp_93=`;
comp_94=`}
