MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=2
[preset00]
fRating=5.000000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=7
bAdditiveWaves=1
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=1.286
fWaveSmoothing=0.630
fWaveParam=0.000
fModWaveAlphaStart=0.710
fModWaveAlphaEnd=1.300
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.650
wave_g=0.650
wave_b=0.650
wave_x=0.500
wave_y=0.500
ob_size=0.010
ob_r=1.000
ob_g=1.000
ob_b=1.000
ob_a=0.000
ib_size=0.260
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=20.160
mv_dx=0.000
mv_dy=0.000
mv_l=0.400
mv_r=1.000
mv_g=0.400
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=1.000
wave_0_init1=ma=.5;
wave_0_init2=my=.5;
wave_0_init3=md=0; //direction 0 1 2 3
wave_0_per_point1=oldmd=md;
wave_0_per_point2=md=(md+rand(4))%4;
wave_0_per_point3=md=if(equal(md,oldmd),(md+1)%4,md);
wave_0_per_point4=
wave_0_per_point5=mx=mx+(equal(md,0)*.002*bass);
wave_0_per_point6=mx=mx-(equal(md,1)*.002*bass);
wave_0_per_point7=my=my+(equal(md,2)*.002*treb);
wave_0_per_point8=my=my-(equal(md,3)*.002*treb);
wave_0_per_point9=
wave_0_per_point10=mx=if(above(mx,.9),.5,mx);
wave_0_per_point11=mx=if(below(mx,.1),.5,mx);
wave_0_per_point12=my=if(above(my,.9),.5,my);
wave_0_per_point13=my=if(below(my,.1),.5,my);
wave_0_per_point14=
wave_0_per_point15=x=mx;
wave_0_per_point16=y=my;
wave_0_per_point17=a=bass*.1;
wave_0_per_point18=
wave_0_per_point19=r=bass*.5;
wavecode_1_enabled=1
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=1
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wave_1_init1=mx=.5;
wave_1_init2=my=.5;
wave_1_init3=md=1;
wave_1_per_point1=oldmd=md;
wave_1_per_point2=md=(md+rand(4))%4;
wave_1_per_point3=md=if(equal(md,oldmd),(md+1)%4,md);
wave_1_per_point4=
wave_1_per_point5=mx=mx+(equal(md,0)*.002*bass);
wave_1_per_point6=mx=mx-(equal(md,1)*.002*bass);
wave_1_per_point7=my=my+(equal(md,2)*.002*treb);
wave_1_per_point8=my=my-(equal(md,3)*.002*treb);
wave_1_per_point9=
wave_1_per_point10=mx=if(above(mx,.9),.5,mx);
wave_1_per_point11=mx=if(below(mx,.1),.5,mx);
wave_1_per_point12=my=if(above(my,.9),.5,my);
wave_1_per_point13=my=if(below(my,.1),.5,my);
wave_1_per_point14=
wave_1_per_point15=x=mx;
wave_1_per_point16=y=my;
wave_1_per_point17=a=bass*.1;
wave_1_per_point18=
wave_1_per_point19=g=treb*.5;
wavecode_2_enabled=1
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=1
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=1
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wave_2_init1=mx=.5;
wave_2_init2=my=.5;
wave_2_init3=md=2;
wave_2_per_point1=oldmd=md;
wave_2_per_point2=md=(md+rand(4))%4;
wave_2_per_point3=md=if(equal(md,oldmd),(md+1)%4,md);
wave_2_per_point4=
wave_2_per_point5=mx=mx+(equal(md,0)*.002*bass);
wave_2_per_point6=mx=mx-(equal(md,1)*.002*bass);
wave_2_per_point7=my=my+(equal(md,2)*.002*treb);
wave_2_per_point8=my=my-(equal(md,3)*.002*treb);
wave_2_per_point9=
wave_2_per_point10=mx=if(above(mx,.9),.5,mx);
wave_2_per_point11=mx=if(below(mx,.1),.5,mx);
wave_2_per_point12=my=if(above(my,.9),.5,my);
wave_2_per_point13=my=if(below(my,.1),.5,my);
wave_2_per_point14=
wave_2_per_point15=x=mx;
wave_2_per_point16=y=my;
wave_2_per_point17=a=bass*.1;
wavecode_3_enabled=1
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=1
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
wave_3_init1=mx=.5;
wave_3_init2=my=.4;
wave_3_init3=md=3;
wave_3_per_point1=oldmd=md;
wave_3_per_point2=md=(md+rand(4))%4;
wave_3_per_point3=md=if(equal(md,oldmd),(md+1)%4,md);
wave_3_per_point4=
wave_3_per_point5=mx=mx+(equal(md,0)*.002*bass);
wave_3_per_point6=mx=mx-(equal(md,1)*.002*bass);
wave_3_per_point7=my=my+(equal(md,2)*.002*treb);
wave_3_per_point8=my=my-(equal(md,3)*.002*treb);
wave_3_per_point9=
wave_3_per_point10=mx=if(above(mx,.9),.5,mx);
wave_3_per_point11=mx=if(below(mx,.1),.5,mx);
wave_3_per_point12=my=if(above(my,.9),.5,my);
wave_3_per_point13=my=if(below(my,.1),.5,my);
wave_3_per_point14=
wave_3_per_point15=x=mx;
wave_3_per_point16=y=my;
wave_3_per_point17=a=bass*.1;
shapecode_0_enabled=0
shapecode_0_sides=4
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=1.20321
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.22019
shapecode_0_r=1.000
shapecode_0_g=0.000
shapecode_0_b=0.000
shapecode_0_a=0.000
shapecode_0_r2=0.000
shapecode_0_g2=1.000
shapecode_0_b2=0.000
shapecode_0_a2=0.500
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shapecode_1_enabled=0
shapecode_1_sides=4
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.10000
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=1.00000
shapecode_1_r=1.000
shapecode_1_g=0.000
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=1.000
shapecode_1_b2=0.000
shapecode_1_a2=0.000
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.100
shapecode_2_enabled=0
shapecode_2_sides=4
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.10000
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=1.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=0.000
shapecode_2_g2=1.000
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.100
shapecode_3_enabled=0
shapecode_3_sides=4
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.10000
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=1.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=1.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.100
per_frame_init_1=vol = 0; p1 = 0;
per_frame_init_2=vx = .2; vy = -0.1;
per_frame_init_3=kx = 0; ky = 0;
per_frame_init_4=
per_frame_1=chng=sin(time*.5);
per_frame_2=cthr=.9999;
per_frame_3=mq21=if(above(chng,cthr),rand(3),mq21);
per_frame_4=mq22=if(above(chng,cthr),rand(3),mq22);
per_frame_5=mq23=if(above(chng,cthr),rand(3),mq23);
per_frame_6=mq24=if(above(chng,cthr),rand(2),mq24);
per_frame_7=mq25=if(above(chng,cthr),rand(2),mq25);
per_frame_8=mq26=if(above(chng,cthr),rand(2),mq26);
per_frame_9=mq27=if(above(chng,cthr),rand(1),mq27);
per_frame_10=mq28=if(above(chng,cthr),rand(1),mq28);
per_frame_11=mq29=if(above(chng,cthr),rand(1)*.3,mq29);
per_frame_12=mq31=if(above(chng,cthr),rand(1)*.3,mq31);
per_frame_13=monitor=chng;
per_frame_14=q21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;
per_frame_15=q27=mq27;q28=mq28;q29=mq29;q31=mq31;
per_frame_16=
per_frame_17=monitor=mq1;
per_frame_18=vol=bass+treb+mid;
per_frame_19=atime=atime+vol;
per_frame_20=q1=.4+sin(atime*.006        )*.4;
per_frame_21=q2=.4+cos(atime*.00613828348)*.4;
per_frame_22=q3=.4+sin(atime*.00598593455)*.4;
per_frame_23=monitor=q3;
per_frame_24=
per_frame_25=dec_med = pow (0.96, 30/fps);
per_frame_26=dec_slow = pow (0.98, 30/fps);
per_frame_27=beat = max (max (bass, mid), treb); 
per_frame_28=avg = avg*dec_slow + beat*(1-dec_slow);
per_frame_29=is_beat = above(beat, .5+avg+peak) * above (time, t0+.2);
per_frame_30=t0 = is_beat*time + (1-is_beat)*t0;
per_frame_31=peak = is_beat * beat + (1-is_beat)*peak*dec_med;
per_frame_32=index = (index + is_beat) %8;
per_frame_33=index2 = (index2 + is_beat*bnot(index))%2;
per_frame_34=index3 = (index3 + is_beat*bnot(index) * bnot(index2))%2;
per_frame_35=
per_frame_36=q20 = avg;
per_frame_37=q21 = beat;
per_frame_38=q22 = peak;
per_frame_39=q23 = index;
per_frame_40=q24 = is_beat;
per_frame_41=
per_frame_42=vol = bass_att + treb_att;
per_frame_43=v2 = v2 * dec_slow + vol * (1-dec_slow) ;
per_frame_44=q26 = max(atan (vol - v2*.8),.3);
per_frame_45=
per_frame_46=q27 = index + 1;
per_frame_47=
per_frame_48=sw = sw*dec_med + (1-dec_med)*(index2%2);
per_frame_49=q28 = sw;
per_frame_50=
per_frame_51=k1 =  is_beat*bnot(index*20);
per_frame_52=k2 =  is_beat*bnot(index);
per_frame_53=
per_frame_54=p1 =  k1*(p1+1) + (1-k1)*p1;
per_frame_55=p2 = dec_slow * p2+ (1-dec_slow)*p1;
per_frame_56=rott = p2 * 3.1416/2;
per_frame_57=monitor = k1;
per_frame_58=q1 = cos(rott);
per_frame_59=q2 = sin(rott);
per_frame_60=q3 = -q2;
per_frame_61=q4 = q1;
per_frame_62=
per_frame_63=
per_frame_64=q5 = cos(time/6);
per_frame_65=q6 = -sin(time/6);
per_frame_66=q7 = -q6;
per_frame_67=q8 = q5;
per_frame_68=
per_frame_69=zoom = 1;
per_frame_70=rot = -0;
per_frame_71=
per_frame_72=movez = movez + .006*(q1+1.1)*30/fps;
per_frame_73=q29 = movez;
per_frame_74=rota = rota + .003*(2-q1)*30/fps;
per_frame_75=q30 = rota;
per_frame_76=q31 = 2 + 16*abs(cos(time/18));
per_frame_77=q32 = cos(time/23)/4;
per_frame_78=
per_frame_79=
per_frame_80=
per_frame_81=q32=aspecty;
per_frame_82=vol=bass+treb+mid;
per_frame_83=atime=atime+vol;
per_frame_84=q8=atime*.01;
per_frame_85=q1=vol*1.5;
per_frame_86=q23=atime*.1;
warp_1=`sampler sampler_pw_noise_mq;
warp_2=`float limit, dist, struc, len; float2 uv0, uv1; float3 uv2; float4 box;
warp_3=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
warp_4=`
warp_5=`static const float3 CamPos = float3(q4,q5,q6);
warp_6=`static const float myzoom = q7,  res = 128, res2 = 128, tele = q16;
warp_7=`static const float change = q14*0, sustain =.0, ds = q10, tic8 = 1.0/255, ffac = q17;
warp_8=`
warp_9=`float2 fstep2 (float2 xy) {return 1.0/res*round(res*xy);}
warp_10=`
warp_11=`float GetDist(float2 uvi) {float2 tmp; tmp = fstep2(tex2D (sampler_pc_main, uvi).gb); 
warp_12=`  return 1-(tmp.y + 1.0/res2*(tmp.x-.505));}
warp_13=`
warp_14=`float2 PutDist(float x) {float tmp; tmp = fstep2(1-x);
warp_15=`  return (float2(res2*((1-x)-tmp)+.495,tmp));}
warp_16=`
warp_17=`float MinDist (float2 uvi) 
warp_18=`{
warp_19=`   float tmp; float4 nb; float4 nb2; float2 pix;
warp_20=`   pix = texsize.zw*(1.0+length(uvi-0.5)*.0);   
warp_21=`   nb.x = GetDist(uvi+pix*float2(-1,-1));   nb.y = GetDist(uvi+pix*float2(1,-1));
warp_22=`   nb.z = GetDist(uvi+pix*float2(1,1));     nb.w = GetDist(uvi+pix*float2(-1,1));         
warp_23=`   nb2.x = GetDist(uvi+pix*float2(0,-1));   nb2.y = GetDist(uvi+pix*float2(1,0));          
warp_24=`   nb2.z = GetDist(uvi+pix*float2(0,1));    nb2.w = GetDist(uvi+pix*float2(-1,0));
warp_25=`   //Eo.S. more efficient usage of min to get min value of all 8 GetDist() calls, removes 11ALU
warp_26=`   nb = min( nb, nb2 );
warp_27=`   nb.xy = min( nb.xy, nb.zw );
warp_28=`   tmp =min( nb.x, nb.y );
warp_29=`   return min(tmp, GetDist(uvi));
warp_30=`}
warp_31=`
warp_32=`float3 Get1 (float2 uvi) {return lerp (GetPixel(uvi), GetBlur1(uvi),0);} 
warp_33=`
warp_34=`
warp_35=`
warp_36=`//----------------------------------------------------------------------------------------------
warp_37=`float4 mbox (float3 uvi) {float3 zz, zz0; float tmp;
warp_38=`  zz0 = uvi; zz = uvi * float3 (1,1,1); 
warp_39=`
warp_40=`  for (int n = 0; n <= 0; n++) 
warp_41=`  {
warp_42=`     zz = (tex3D (sampler_noisevol_lq,(zz/16 )+time*0.001*float3(0,0,20))).x*3;
warp_43=`//     zz = length(1+sin(zz.zx*4+1))*8 * cos(zz.y) ;
warp_44=`  }
warp_45=`   
warp_46=`return float4(zz*limit,0);}
warp_47=`//----------------------------------------------------------------------------------------------
warp_48=`
warp_49=`
warp_50=`
warp_51=`shader_body {uv0 = uv_orig;
warp_52=`uv = (uv-.5)*(1-ds/(1-GetBlur1(uv).b)) + .5;
warp_53=`uv1 = (uv0-.5)*aspect.xy*tele;
warp_54=`float3 noise = frac(8*tex2D (sampler_noise_lq,uv+rand_frame.yz))*0 + 0.101; 
warp_55=`   if (noise.g > .1) 
warp_56=`   {
warp_57=`       float3 noiseBiased = noise - float3( 0.5, 0.5, 0.5 );
warp_58=`      //Eo.S. combine the subtraction on noise to a single float3 
warp_59=`      //to ensure compiler does the subtraction in a single ALU
warp_60=`      dist = MinDist( (noiseBiased.zy) * 0.0 +uv ) +  0.005 * (noiseBiased.x) * abs(noiseBiased.y);
warp_61=`   }    
warp_62=`   else {dist = noise.r;}
warp_63=` dist = min(dist,GetDist(uv)) - ds*.8;
warp_64=`
warp_65=`limit = 10 ;
warp_66=`float tdist = dist + pow(dist,3)*0;
warp_67=`uv2 = mul(float3(uv1*tdist,tdist-.0)/myzoom,RotMat)+CamPos;
warp_68=`uv2 = (frac(uv2/8.0+.5)-.5)*8.0;
warp_69=`box = mbox (uv2);
warp_70=`len = (length(box.xyz));
warp_71=`struc = length(box.xyz)/limit;
warp_72=`
warp_73=`if ((len < limit) && (dist > 0.005)){
warp_74=` ret.r = (1-sustain)*struc+sustain*(Get1(uv).r); ret.gb=  PutDist(dist); } 
warp_75=` else {ret = tex2D(sampler_fc_main,uv)*float3(sustain,0,.99)-float3(1.0/255,0,4.0/255);} 
warp_76=`//ret.r = struc;
warp_77=`}
comp_1=`shader_body
comp_2=`{
comp_3=`
comp_4=`ret = tex2D(sampler_main, uv).x,
comp_5=`
comp_6=`ret = lerp (
comp_7=`GetBlur1(uv).x + GetBlur3(uv).x,
comp_8=`ret,
comp_9=`pow(ret,.5));
comp_10=`  
comp_11=`//  ret = tex2D(sampler_main, uv).x - GetBlur1(uv).x;
comp_12=`    ret = pow(ret,float3(.5,1.2,8))*1.25 -.25;
comp_13=`    ret *= 1.0; //gamma
comp_14=` 
comp_15=`}
