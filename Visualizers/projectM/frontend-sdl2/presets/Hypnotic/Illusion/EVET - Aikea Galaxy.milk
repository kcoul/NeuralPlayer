MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=0
[preset00]
fRating=5.000000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=7
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.958
fWaveSmoothing=0.450
fWaveParam=0.000
fModWaveAlphaStart=0.000
fModWaveAlphaEnd=1.320
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.100
ob_b=1.000
ob_a=1.000
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=0.000
nMotionVectorsX=25.600
nMotionVectorsY=9.600
mv_dx=0.000
mv_dy=0.000
mv_l=0.000
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=0
wavecode_0_samples=282
wavecode_0_sep=20
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=3.91581
wavecode_0_smoothing=0.10000
wavecode_0_r=0.200
wavecode_0_g=0.300
wavecode_0_b=1.000
wavecode_0_a=0.600
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=0
wavecode_1_scaling=0.89152
wavecode_1_smoothing=0.82000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=0.100
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=0
wavecode_2_scaling=0.89152
wavecode_2_smoothing=0.82000
wavecode_2_r=0.000
wavecode_2_g=0.200
wavecode_2_b=0.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=1
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=0
shapecode_0_sides=4
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.090
shapecode_0_y=0.900
shapecode_0_rad=0.22437
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.76002
shapecode_0_r=1.000
shapecode_0_g=0.000
shapecode_0_b=0.000
shapecode_0_a=1.000
shapecode_0_r2=1.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=0.600
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shapecode_1_enabled=0
shapecode_1_sides=100
shapecode_1_additive=1
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.260
shapecode_1_y=0.200
shapecode_1_rad=0.39317
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=6.19589
shapecode_1_r=0.000
shapecode_1_g=0.550
shapecode_1_b=0.500
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.400
shapecode_1_b2=0.400
shapecode_1_a2=0.070
shapecode_1_border_r=0.300
shapecode_1_border_g=0.700
shapecode_1_border_b=0.800
shapecode_1_border_a=0.000
shapecode_2_enabled=0
shapecode_2_sides=44
shapecode_2_additive=1
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.503
shapecode_2_y=0.500
shapecode_2_rad=0.03886
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=0.60986
shapecode_2_r=1.000
shapecode_2_g=0.100
shapecode_2_b=0.000
shapecode_2_a=0.900
shapecode_2_r2=1.000
shapecode_2_g2=1.000
shapecode_2_b2=1.000
shapecode_2_a2=0.000
shapecode_2_border_r=0.500
shapecode_2_border_g=0.500
shapecode_2_border_b=0.500
shapecode_2_border_a=0.000
shapecode_3_enabled=0
shapecode_3_sides=100
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.01000
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.49981
shapecode_3_r=0.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=0.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=0.200
shapecode_3_border_g=0.700
shapecode_3_border_b=0.500
shapecode_3_border_a=0.000
per_frame_init_1=
per_frame_init_2=//******** INITIALIZATION *********
per_frame_init_3=//---------- some global vars, do not change -------------
per_frame_init_4=avg = 0.01;
per_frame_init_5=q7 = .25; //MyZoom
per_frame_init_6=q8 =  rand(2.0)-1.0; //fractal modifier
per_frame_init_7=//q8 = 1; //#
per_frame_init_8=q16 = 1 + rand(2); //Tele ; rather fish eye
per_frame_init_9=//q16 = 1; //#
per_frame_init_10=q18 = rand(0.8)+.1; //brightness balance back/front
per_frame_init_11=q30 = 1; //logarithmic Z-Dist storage; unused
per_frame_init_12=q31 =128;
per_frame_init_13=start = 1; travel = 0; RotZ = 0; look = 0; slow = 0; t0 = time+3; lampx = .5; lampy = .5;
per_frame_init_14=cran0 = rand(1);
per_frame_init_15=n = 0; loop (10000, gmegabuf(n)=0; n=n+1; ); 
per_frame_init_16=n = 0; loop (10000,  megabuf(n)=0; n=n+1; ); 
per_frame_init_17=trelx = 0;  trely = 0; trelz = 0;
per_frame_init_18=reg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;
per_frame_init_19=
per_frame_init_20=//Find random starting point
per_frame_init_21=while (exec2(
per_frame_init_22=  ran1 = rand(800)/100;  ran2 = rand(800)/100;  ran3 = rand(800)/100;
per_frame_init_23=  PosX = rand(5)-2;   PosY = rand(5)-2;   PosZ = rand(5)-2; 
per_frame_init_24=
per_frame_init_25=//  PosX = 3.3; PosY = 2; PosZ = -2; ran1 = 0; ran2 = 0; ran3 = 0; //#
per_frame_init_26=
per_frame_init_27=  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); 
per_frame_init_28=  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);
per_frame_init_29=
per_frame_init_30=  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;
per_frame_init_31=  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;
per_frame_init_32=  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;
per_frame_init_33=
per_frame_init_34=  //***********BOT*************
per_frame_init_35=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_init_36=  dist = 0.001;
per_frame_init_37=  while (exec2(
per_frame_init_38=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_init_39=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_init_40=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_init_41=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_init_42=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_init_43=    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;
per_frame_init_44=    loop (7+1,
per_frame_init_45=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_init_46=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_init_47=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_init_48=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_init_49=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_init_50=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_init_51=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_init_52=    );
per_frame_init_53=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_init_54=    dist *= 1.05;
per_frame_init_55=  ,(dist < 0.6)*(len > 30)));
per_frame_init_56=,(dist < .06))); //end while
per_frame_init_57=
per_frame_1=chng=sin(time*.5);
per_frame_2=cthr=.9999;
per_frame_3=mq21=if(above(chng,cthr),rand(3),mq21);
per_frame_4=mq22=if(above(chng,cthr),rand(3),mq22);
per_frame_5=mq23=if(above(chng,cthr),rand(3),mq23);
per_frame_6=mq24=if(above(chng,cthr),rand(2),mq24);
per_frame_7=mq25=if(above(chng,cthr),rand(2),mq25);
per_frame_8=mq26=if(above(chng,cthr),rand(2),mq26);
per_frame_9=mq27=if(above(chng,cthr),rand(1),mq27);
per_frame_10=mq28=if(above(chng,cthr),rand(1),mq28);
per_frame_11=mq29=if(above(chng,cthr),rand(1)*.3,mq29);
per_frame_12=mq31=if(above(chng,cthr),rand(1)*.3,mq31);
per_frame_13=monitor=chng;
per_frame_14=q21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;
per_frame_15=q27=mq27;q28=mq28;q29=mq29;//q31=mq31;
per_frame_16=
per_frame_17=monitor=mq1;
per_frame_18=vol=bass+treb+mid;
per_frame_19=atime=atime+vol;
per_frame_20=q11=.4+sin(atime*.006        )*.4;
per_frame_21=q12=.4+cos(atime*.00613828348)*.4;
per_frame_22=q13=.4+sin(atime*.00598593455)*.4;
per_frame_23=monitor=q13;
per_frame_24=fps_ = .0 * fps_ + 1*if(fps<=25,fps,25+.5*(fps-25)); 
per_frame_25=dec_s = 1-.06*30/fps_;
per_frame_26=beat = (time >  t0+3); t0 = if(beat, time, t0);
per_frame_27=
per_frame_28=speed = min(0.2,dist_-.02) * (1+2*avg) *(1-slow*.0)*.7/q7; //#
per_frame_29=ds = ds * dec_s + (1-dec_s)*speed*.25/fps_; 
per_frame_30=RotZ = if (RotZ==0,beat*(rand(100)<20*travel)*(rand(10)/10-.3),
per_frame_31=                   bnot(beat*(rand(100)<30))*RotZ);
per_frame_32=slow = if (bnot(slow), beat*(rand(1000*avg)<6), bnot(beat*(rand(100)<50)));
per_frame_33=look = if (bnot(look), beat*(rand(1000*speed)<12), bnot(beat*(rand(100)<50)));
per_frame_34=
per_frame_35=//Lamp View
per_frame_36=lx = if (beat,rand(150)/200+.15,lx);
per_frame_37=ly = if (beat,rand(150)/200+.15,ly);
per_frame_38=lampx = lampx * dec_s + (1-dec_s)*if (look,lx,0.5);
per_frame_39=lampy = lampy * dec_s + (1-dec_s)*if (look,ly,0.5);
per_frame_40=q1 = lampx; q2 = lampy;
per_frame_41=
per_frame_42=//Position 
per_frame_43=DirX= reg26; DirY= reg27; DirZ = reg28;
per_frame_44=PosX = PosX + ds*DirX ; PosY = PosY + ds*DirY; PosZ = PosZ + ds*DirZ; 
per_frame_45=q4 = PosX; q5 = PosY; q6 = PosZ;
per_frame_46=
per_frame_47=angchg = (.2-dist_)*(dist_ < .2)*2;
per_frame_48=travel = if (angchg > 0,0,travel+ds);
per_frame_49=v1 = v1 * dec_s + (1-dec_s)* RotZ * ds;
per_frame_50=v2 = v2 *dec_s + (1-dec_s)*angchg *xslope/fps_;
per_frame_51=v3 = v3 *dec_s + (1-dec_s)*(angchg *yslope/fps_ + 2*v1*sin(time*.1));
per_frame_52=//v2 = .008;
per_frame_53=//push old RotMat
per_frame_54=reg30 =reg20; reg31 =reg21; reg32 =reg22; 
per_frame_55=reg33 =reg23; reg34 =reg24; reg35 =reg25; 
per_frame_56=reg36 =reg26; reg37 =reg27; reg38 =reg28; 
per_frame_57=
per_frame_58=n = 0; avg = 0;
per_frame_59=loop (5,
per_frame_60=  n = n+1;
per_frame_61=  //new Rot. Mat for infinitesimal angles
per_frame_62=  ran1 = rand(100)/100;
per_frame_63=  ran2 = rand(100)/200-.25;
per_frame_64=  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.57+ran2) * (n <= 4)*ran1;
per_frame_65=  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); 
per_frame_66=  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);
per_frame_67=  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;
per_frame_68=  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;
per_frame_69=  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;
per_frame_70=
per_frame_71=  //pop old RotMat
per_frame_72=  reg20 =reg30; reg21 =reg31; reg22 =reg32; 
per_frame_73=  reg23 =reg33; reg24 =reg34; reg25 =reg35; 
per_frame_74=  reg26 =reg36; reg27 =reg37; reg28 =reg38; 
per_frame_75=
per_frame_76=  //Multiply new RotMat by old one
per_frame_77=  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;
per_frame_78=  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;
per_frame_79=  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;
per_frame_80=  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;
per_frame_81=  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;
per_frame_82=  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;
per_frame_83=  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;
per_frame_84=  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;
per_frame_85=  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;
per_frame_86=
per_frame_87=  reg20 =q20; reg21 =q21; reg22 =q22;
per_frame_88=  reg23 =q23; reg24 =q24; reg25 =q25;
per_frame_89=  reg26 =q26; reg27 =q27; reg28 =q28;
per_frame_90=
per_frame_91=  //***********BOT*************
per_frame_92=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_93=  dist = 0.002;
per_frame_94=  while (exec2(
per_frame_95=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_96=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_97=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_98=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_99=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_100=    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;
per_frame_101=    loop (7+1,
per_frame_102=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_103=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_104=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_105=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_106=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_107=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_108=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_109=    );
per_frame_110=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_111=    dist *= 1.1;
per_frame_112=  ,(dist < 0.6)*(len > 30)));
per_frame_113=  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points
per_frame_114=  avg = avg+abs(megabuf(n)/5);
per_frame_115=); //end loop 5
per_frame_116=
per_frame_117=n = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));
per_frame_118=
per_frame_119=xslope = min(max(2/avg*(megabuf(1)-megabuf(3)),-3),3);
per_frame_120=yslope = min(max(2/avg*(megabuf(4)-megabuf(2)),-3),3);
per_frame_121=monitor = avg;
per_frame_122=dist_ = dist_*dec_s + (1-dec_s)*dist;
per_frame_123=
per_frame_124=q10 = ds*q7; //compensation of lin. movement in GetDist and zoom uv
per_frame_125=q14 = 1*abs(ds) + 2*(abs(v1) + abs(v2) + abs(v3)) + 1.0/255 + start*.05; 
per_frame_126=q19 = .6 + .4*sin(time*.02+cran0*6); //brightness backgd
per_frame_127=start = start * .9;
per_frame_128=q11 = v1; q12 = v2; q13 = v3;
per_frame_129=//forward comp. of Rotation
per_frame_130=monitor = q16;
per_pixel_1= warp = 0.0; zoom = 1; dx = -q12/q16*(1+0*pow(x-.5,2)); dy = q13/q16*(1+0*pow(y-.5,2)); rot =q11;
warp_1=`///Box of tricks by Flexi  
warp_2=`
warp_3=`sampler sampler_rand01_PE;
warp_4=`
warp_5=`float figure_borders(float2 domain, float thickness){
warp_6=`   float2 help_uv = frac(domain-0.5);
warp_7=`   help_uv = min(help_uv,1-help_uv)*2;
warp_8=`   return saturate(max(help_uv.x,help_uv.y)-1+thickness)/(thickness);
warp_9=`}
warp_10=`
warp_11=`bool hex(float2 domain){
warp_12=`   float2 help_uv = frac(domain)*float2(8,12);
warp_13=`   float x,y; x = help_uv.x; y = help_uv.y;
warp_14=`   return (x>1)*(x<7)*(y>4)*(y<8)*(x+y>7)*(x+y<13)*(x-y<1)*(y-x<5);
warp_15=`}
warp_16=`
warp_17=`bool3 hexgrid(float2 domain){
warp_18=`   bool tile1, tile2;
warp_19=`   tile1 = hex(domain) + hex(domain + 0.5);
warp_20=`   tile2 = hex(domain + float2(0.5,1/6.0) )
warp_21=`         + hex(domain + float2(0,4/6.0)   );
warp_22=`   return bool3(tile1, tile2,  1 - tile1 - tile2);
warp_23=`}
warp_24=`
warp_25=`
warp_26=`float2 complex_div(float2 numerator, float2 denominator){
warp_27=`   return float2( numerator.x*denominator.x + numerator.y*denominator.y,
warp_28=`                  numerator.y*denominator.x - numerator.x*denominator.y)/
warp_29=`          (denominator.x*denominator.x + denominator.y*denominator.y);
warp_30=`}
warp_31=`
warp_32=`float2 uv_moebius_transformation(float2 domain, float2 zeroPoint, float2 infinityPoint,float zoom){
warp_33=`   return complex_div((domain - zeroPoint)*zoom, domain - infinityPoint)+0.5;
warp_34=`}
warp_35=`
warp_36=`float2 uv_polar(float2 domain, float2 center){
warp_37=`   float2 c = domain - center;
warp_38=`   float rad_hq = length(c);
warp_39=`   float ang_hq = atan2(c.x,c.y);
warp_40=`   return float2(ang_hq, rad_hq);
warp_41=`}
warp_42=`
warp_43=`float2 uv_polar_logarithmic_inverse(float2 domain, float2 center, int fins, float log_factor, float2 coord){
warp_44=`   float2 polar = uv_polar(domain, center)*float2(M_INV_PI_2,1);
warp_45=`   return float2(polar.x*fins+coord.x, log_factor*log(1/polar.y) + coord.y);
warp_46=`}
warp_47=`
warp_48=`float2 uv_bipolar_logarithmic_inverse(float2 domain, float2 northPole, float2 southPole, int fins, float log_factor, float2 coord){
warp_49=`   float2 help_uv = uv_moebius_transformation(domain, northPole, southPole, 1);
warp_50=`   return uv_polar_logarithmic_inverse(help_uv,0.5,fins,log_factor,coord);
warp_51=`}
warp_52=`
warp_53=`float2 uv_lens_half_sphere(float2 domain, float2 position, float radius, float refractivity){
warp_54=`   float2 polar = uv_polar(domain, position);
warp_55=`   float cone = saturate(1-polar.y/radius);
warp_56=`   float halfsphere = sqrt(1-pow(cone-1,2));
warp_57=`   float w = atan2(1-cone,halfsphere);
warp_58=`   float refrac_w = w-asin(sin(w)/refractivity);
warp_59=`   float refrac_d = 1-cone - halfsphere*tan(refrac_w);
warp_60=`   float2 refrac_uv =position+float2(sin(polar.x),cos(polar.x))*refrac_d*radius;
warp_61=`   bool mask =(length(domain-position)<radius);
warp_62=`   return !mask*domain + 
warp_63=`           mask*refrac_uv;
warp_64=`}
warp_65=`
warp_66=`shader_body
warp_67=`{
warp_68=`float2 help_uv = uv_lens_half_sphere(uv_orig, float2(q1,q2),0.15,4);
warp_69=`help_uv = uv_bipolar_logarithmic_inverse(help_uv, float2(0.3,0.4), float2(0.7,0.4), 3, 0.5, float2(-time*0.1,-time*0.04));
warp_70=`help_uv = help_uv*float2(7,3);
warp_71=`
warp_72=`ret = tex2D(sampler_rand01_PE,help_uv);
warp_73=`float4 noise9 = tex3D(sampler_noisevol_hq, 
warp_74=`                      ((help_uv.xyy*q27
warp_75=`                       )*texsize.xyy*texsize_noisevol_hq.zww
warp_76=`                      ).xyz*
warp_77=`                      float3(1,1,0)*0.05 + 
warp_78=`                      time*float3(0,0,1)*q29
warp_79=`                     );
warp_80=`if(ret.x> q21*q13         && ret.x<= q24*q11        )ret.y += (noise9).x*.5; 
warp_81=`if(ret.y> q22*q11         && ret.y<= q25*q12        )ret.z += (noise9).y*.5; 
warp_82=`if(ret.z> q23*q12         && ret.z<= q26*q13        )ret.x += (noise9).z*.5; 
warp_83=`}
