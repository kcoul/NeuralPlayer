MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=5.000000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=0
bAdditiveWaves=0
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=0
bMaximizeWaveColor=0
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.088
fWaveScale=15.000
fWaveSmoothing=0.000
fWaveParam=0.000
fModWaveAlphaStart=0.900
fModWaveAlphaEnd=1.300
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.650
wave_g=0.650
wave_b=0.650
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.100
ob_b=1.000
ob_a=1.000
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=0.000
nMotionVectorsX=23.520
nMotionVectorsY=17.832
mv_dx=0.006
mv_dy=0.040
mv_l=0.000
mv_r=0.830
mv_g=0.590
mv_b=1.000
mv_a=0.000
b1n=0.230
b2n=0.000
b3n=0.000
b1x=0.930
b2x=1.000
b3x=0.000
b1ed=0.000
wavecode_0_enabled=0
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=0
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=1.000
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=1
shapecode_0_sides=100
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.03333
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.00000
shapecode_0_r=0.000
shapecode_0_g=0.000
shapecode_0_b=0.000
shapecode_0_a=1.000
shapecode_0_r2=0.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=1.000
shape_0_per_frame1=x = int(rand(100))*.01;
shape_0_per_frame2=y = int(rand(100))*.01;
shape_0_per_frame3=
shape_0_per_frame4=a = if(above(frame%7,0),0,1);
shape_0_per_frame5=a2 = if(above(frame%7,0),0,1);
shape_0_per_frame6=border_a = 0;
shapecode_1_enabled=1
shapecode_1_sides=3
shapecode_1_additive=0
shapecode_1_thickOutline=1
shapecode_1_textured=1
shapecode_1_num_inst=311
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.01000
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.62832
shapecode_1_tex_zoom=1.00000
shapecode_1_r=0.000
shapecode_1_g=0.000
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.000
shapecode_1_b2=0.000
shapecode_1_a2=0.000
shapecode_1_border_r=0.000
shapecode_1_border_g=0.000
shapecode_1_border_b=0.000
shapecode_1_border_a=0.000
shape_1_per_frame1=ma=ma+(above(bass,1)*3.1415*.01*bass);
shape_1_per_frame2=ma=ma-(above(treb,1)*3.1415*.01*treb);
shape_1_per_frame3=
shape_1_per_frame4=mx=mx+(.0002*cos(ma));
shape_1_per_frame5=my=my+(.0002*tan(ma));
shape_1_per_frame6=
shape_1_per_frame7=mx=if(above(mx,.9),(.9-mx),mx);
shape_1_per_frame8=my=if(above(my,.9),(.9-my),my);
shape_1_per_frame9=mx=if(below(mx,.1),(.9+mx),mx);
shape_1_per_frame10=my=if(below(my,.1),(.9+my),my);
shape_1_per_frame11=
shape_1_per_frame12=x=1-mx;
shape_1_per_frame13=y=1-my;
shape_1_per_frame14=
shape_1_per_frame15=ang=(sin(time*.35)+1)*3;
shape_1_per_frame16=//a=(above(bass+mid+treb,.8));
shape_1_per_frame17=pi23=4*asin(1)*.333333333;
shape_1_per_frame18=t1=bass+mid+treb;
shapecode_2_enabled=1
shapecode_2_sides=3
shapecode_2_additive=0
shapecode_2_thickOutline=1
shapecode_2_textured=0
shapecode_2_num_inst=281
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.01000
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=0.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=0.000
shapecode_2_g2=0.000
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=0.000
shapecode_2_border_g=0.000
shapecode_2_border_b=0.000
shapecode_2_border_a=0.000
shape_2_per_frame1=ma=ma+(above(bass,1)*3.1415*.05*bass);
shape_2_per_frame2=ma=ma-(above(mid,1)*3.1415*.05*mid);
shape_2_per_frame3=
shape_2_per_frame4=mx=mx+(.0001*tan(ma));
shape_2_per_frame5=my=my+(.0001*sin(ma));
shape_2_per_frame6=
shape_2_per_frame7=mx=if(above(mx,.9),(.9-mx),mx);
shape_2_per_frame8=my=if(above(my,.9),(.9-my),my);
shape_2_per_frame9=mx=if(below(mx,.1),(.9+mx),mx);
shape_2_per_frame10=my=if(below(my,.1),(.9+my),my);
shape_2_per_frame11=
shape_2_per_frame12=x=1-mx;
shape_2_per_frame13=y=1-my;
shape_2_per_frame14=
shape_2_per_frame15=ang=(sin(time*.30)+1)*3.3;
shape_2_per_frame16=a=(above(bass+mid+treb,.8));
shape_2_per_frame17=pi23=4*asin(1)*.333333333;
shape_2_per_frame18=t2=0;//bass+mid+treb;
shapecode_3_enabled=0
shapecode_3_sides=4
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.10000
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=1.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=1.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.100
per_frame_init_1=
per_frame_init_2=//******** INITIALIZATION *********
per_frame_init_3=//---------- some global vars, do not change -------------
per_frame_init_4=avg = 0.01;
per_frame_init_5=q7 = .25; //MyZoom
per_frame_init_6=q8 =  rand(2.0)-1.0; //fractal modifier
per_frame_init_7=//q8 = 1; //#
per_frame_init_8=q16 = 1 + rand(2); //Tele ; rather fish eye
per_frame_init_9=//q16 = 1; //#
per_frame_init_10=q18 = rand(0.8)+.1; //brightness balance back/front
per_frame_init_11=q30 = 1; //logarithmic Z-Dist storage; unused
per_frame_init_12=q31 =128;
per_frame_init_13=start = 1; travel = 0; RotZ = 0; look = 0; slow = 0; t0 = time+3; lampx = .5; lampy = .5;
per_frame_init_14=cran0 = rand(1);
per_frame_init_15=n = 0; loop (10000, gmegabuf(n)=0; n=n+1; ); 
per_frame_init_16=n = 0; loop (10000,  megabuf(n)=0; n=n+1; ); 
per_frame_init_17=trelx = 0;  trely = 0; trelz = 0;
per_frame_init_18=reg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;
per_frame_init_19=
per_frame_init_20=//Find random starting point
per_frame_init_21=while (exec2(
per_frame_init_22=  ran1 = rand(800)/100;  ran2 = rand(800)/100;  ran3 = rand(800)/100;
per_frame_init_23=  PosX = rand(5)-2;   PosY = rand(5)-2;   PosZ = rand(5)-2; 
per_frame_init_24=
per_frame_init_25=//  PosX = 3.3; PosY = 2; PosZ = -2; ran1 = 0; ran2 = 0; ran3 = 0; //#
per_frame_init_26=
per_frame_init_27=  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); 
per_frame_init_28=  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);
per_frame_init_29=
per_frame_init_30=  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;
per_frame_init_31=  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;
per_frame_init_32=  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;
per_frame_init_33=
per_frame_init_34=  //***********BOT*************
per_frame_init_35=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_init_36=  dist = 0.001;
per_frame_init_37=  while (exec2(
per_frame_init_38=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_init_39=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_init_40=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_init_41=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_init_42=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_init_43=    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;
per_frame_init_44=    loop (7+1,
per_frame_init_45=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_init_46=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_init_47=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_init_48=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_init_49=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_init_50=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_init_51=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_init_52=    );
per_frame_init_53=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_init_54=    dist *= 1.05;
per_frame_init_55=  ,(dist < 0.6)*(len > 30)));
per_frame_init_56=,(dist < .06))); //end while
per_frame_init_57=
per_frame_1=chng=sin(time*.5);
per_frame_2=cthr=.9999;
per_frame_3=mq21=if(above(chng,cthr),rand(3),mq21);
per_frame_4=mq22=if(above(chng,cthr),rand(3),mq22);
per_frame_5=mq23=if(above(chng,cthr),rand(3),mq23);
per_frame_6=mq24=if(above(chng,cthr),rand(2),mq24);
per_frame_7=mq25=if(above(chng,cthr),rand(2),mq25);
per_frame_8=mq26=if(above(chng,cthr),rand(2),mq26);
per_frame_9=mq27=if(above(chng,cthr),rand(1),mq27);
per_frame_10=mq28=if(above(chng,cthr),rand(1),mq28);
per_frame_11=mq29=if(above(chng,cthr),rand(1)*.3,mq29);
per_frame_12=mq31=if(above(chng,cthr),rand(1)*.3,mq31);
per_frame_13=monitor=chng;
per_frame_14=q21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;
per_frame_15=q27=mq27;q28=mq28;q29=mq29;//q31=mq31;
per_frame_16=
per_frame_17=monitor=mq1;
per_frame_18=vol=bass+treb+mid;
per_frame_19=atime=atime+vol;
per_frame_20=q11=.4+sin(atime*.006        )*.4;
per_frame_21=q12=.4+cos(atime*.00613828348)*.4;
per_frame_22=q13=.4+sin(atime*.00598593455)*.4;
per_frame_23=monitor=q13;
per_frame_24=fps_ = .0 * fps_ + 1*if(fps<=25,fps,25+.5*(fps-25)); 
per_frame_25=dec_s = 1-.06*30/fps_;
per_frame_26=beat = (time >  t0+3); t0 = if(beat, time, t0);
per_frame_27=
per_frame_28=speed = min(0.2,dist_-.02) * (1+2*avg) *(1-slow*.0)*.7/q7; //#
per_frame_29=ds = ds * dec_s + (1-dec_s)*speed*.25/fps_; 
per_frame_30=RotZ = if (RotZ==0,beat*(rand(100)<20*travel)*(rand(10)/10-.3),
per_frame_31=                   bnot(beat*(rand(100)<30))*RotZ);
per_frame_32=slow = if (bnot(slow), beat*(rand(1000*avg)<6), bnot(beat*(rand(100)<50)));
per_frame_33=look = if (bnot(look), beat*(rand(1000*speed)<12), bnot(beat*(rand(100)<50)));
per_frame_34=
per_frame_35=//Lamp View
per_frame_36=lx = if (beat,rand(150)/200+.15,lx);
per_frame_37=ly = if (beat,rand(150)/200+.15,ly);
per_frame_38=lampx = lampx * dec_s + (1-dec_s)*if (look,lx,0.5);
per_frame_39=lampy = lampy * dec_s + (1-dec_s)*if (look,ly,0.5);
per_frame_40=q1 = lampx; q2 = lampy;
per_frame_41=
per_frame_42=//Position 
per_frame_43=DirX= reg26; DirY= reg27; DirZ = reg28;
per_frame_44=PosX = PosX + ds*DirX ; PosY = PosY + ds*DirY; PosZ = PosZ + ds*DirZ; 
per_frame_45=q4 = PosX; q5 = PosY; q6 = PosZ;
per_frame_46=
per_frame_47=angchg = (.2-dist_)*(dist_ < .2)*2;
per_frame_48=travel = if (angchg > 0,0,travel+ds);
per_frame_49=v1 = v1 * dec_s + (1-dec_s)* RotZ * ds;
per_frame_50=v2 = v2 *dec_s + (1-dec_s)*angchg *xslope/fps_;
per_frame_51=v3 = v3 *dec_s + (1-dec_s)*(angchg *yslope/fps_ + 2*v1*sin(time*.1));
per_frame_52=//v2 = .008;
per_frame_53=//push old RotMat
per_frame_54=reg30 =reg20; reg31 =reg21; reg32 =reg22; 
per_frame_55=reg33 =reg23; reg34 =reg24; reg35 =reg25; 
per_frame_56=reg36 =reg26; reg37 =reg27; reg38 =reg28; 
per_frame_57=
per_frame_58=n = 0; avg = 0;
per_frame_59=loop (5,
per_frame_60=  n = n+1;
per_frame_61=  //new Rot. Mat for infinitesimal angles
per_frame_62=  ran1 = rand(100)/100;
per_frame_63=  ran2 = rand(100)/200-.25;
per_frame_64=  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.57+ran2) * (n <= 4)*ran1;
per_frame_65=  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); 
per_frame_66=  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);
per_frame_67=  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;
per_frame_68=  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;
per_frame_69=  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;
per_frame_70=
per_frame_71=  //pop old RotMat
per_frame_72=  reg20 =reg30; reg21 =reg31; reg22 =reg32; 
per_frame_73=  reg23 =reg33; reg24 =reg34; reg25 =reg35; 
per_frame_74=  reg26 =reg36; reg27 =reg37; reg28 =reg38; 
per_frame_75=
per_frame_76=  //Multiply new RotMat by old one
per_frame_77=  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;
per_frame_78=  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;
per_frame_79=  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;
per_frame_80=  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;
per_frame_81=  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;
per_frame_82=  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;
per_frame_83=  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;
per_frame_84=  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;
per_frame_85=  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;
per_frame_86=
per_frame_87=  reg20 =q20; reg21 =q21; reg22 =q22;
per_frame_88=  reg23 =q23; reg24 =q24; reg25 =q25;
per_frame_89=  reg26 =q26; reg27 =q27; reg28 =q28;
per_frame_90=
per_frame_91=  //***********BOT*************
per_frame_92=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_93=  dist = 0.002;
per_frame_94=  while (exec2(
per_frame_95=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_96=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_97=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_98=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_99=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_100=    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;
per_frame_101=    loop (7+1,
per_frame_102=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_103=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_104=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_105=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_106=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_107=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_108=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_109=    );
per_frame_110=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_111=    dist *= 1.1;
per_frame_112=  ,(dist < 0.6)*(len > 30)));
per_frame_113=  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points
per_frame_114=  avg = avg+abs(megabuf(n)/5);
per_frame_115=); //end loop 5
per_frame_116=
per_frame_117=n = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));
per_frame_118=
per_frame_119=xslope = min(max(2/avg*(megabuf(1)-megabuf(3)),-3),3);
per_frame_120=yslope = min(max(2/avg*(megabuf(4)-megabuf(2)),-3),3);
per_frame_121=monitor = avg;
per_frame_122=dist_ = dist_*dec_s + (1-dec_s)*dist;
per_frame_123=
per_frame_124=q10 = ds*q7; //compensation of lin. movement in GetDist and zoom uv
per_frame_125=q14 = 1*abs(ds) + 2*(abs(v1) + abs(v2) + abs(v3)) + 1.0/255 + start*.05; 
per_frame_126=q19 = .6 + .4*sin(time*.02+cran0*6); //brightness backgd
per_frame_127=start = start * .9;
per_frame_128=q11 = v1; q12 = v2; q13 = v3;
per_frame_129=//forward comp. of Rotation
per_frame_130=monitor = q16;
per_pixel_1= warp = 0.0; zoom = 1; dx = -q12/q16*(1+0*pow(x-.5,2)); dy = q13/q16*(1+0*pow(y-.5,2)); rot =q11;
warp_1=`float dist, struc; float2 uv0, uv1; float3 box;
warp_2=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
warp_3=`static const float3 CamPos = float3(q4,q5,q6);
warp_4=`static const float myzoom = q7,  res = q31, res2 = 64, limit = 20;
warp_5=`static const float sustain = .98 - q14*2, change = q14;
warp_6=`
warp_7=`float2 fstep2 (float2 xy) {return 1.0/res*round(res*xy);}
warp_8=`
warp_9=`float GetDist(float2 uvi) {float2 tmp; tmp = fstep2(tex2D (sampler_pw_main, uvi).gb); 
warp_10=`  return pow(1-(tmp.y + 1.0/res2*(tmp.x-.505)),1/q30);}
warp_11=`
warp_12=`float2 PutDist(float x) {float tmp; x = pow(x,q30);   tmp = fstep2(1-x);
warp_13=`  return (float2(res2*((1-x)-tmp)+.495,tmp));}
warp_14=`
warp_15=`float MinDist (float2 uvi) {float tmp; float4 nb; float2 pix;
warp_16=`  pix = texsize.zw*(1+length(uvi-.5)*3);
warp_17=`  tmp = GetDist(uvi);
warp_18=`  nb.x = GetDist(uvi+pix*float2(-1,-1));  nb.y = GetDist(uvi+pix*float2(1,-1));
warp_19=`  nb.z = GetDist(uvi+pix*float2(1,1));   nb.w = GetDist(uvi+pix*float2(-1,1));
warp_20=`  tmp = min(tmp,min(min(min(nb.x, nb.y),nb.z),nb.w)) ;
warp_21=`  nb.x = GetDist(uvi+pix*float2(0,-1));  nb.y = GetDist(uvi+pix*float2(1,0));
warp_22=`  nb.z = GetDist(uvi+pix*float2(0,1));   nb.w = GetDist(uvi+pix*float2(-1,0));
warp_23=`  tmp = min(tmp,min(min(min(nb.x, nb.y),nb.z),nb.w)) ;
warp_24=`  return tmp;}
warp_25=`
warp_26=`float3 Get1 (float2 uvi) {float3 tmp; float2 pix;
warp_27=`  tmp = GetBlur1(uvi)*3;
warp_28=`  return lerp (GetPixel(uvi),tmp/3,change*4);}
warp_29=`
warp_30=`float3 mbox (float3 uvi) {float3 zz, zz0; float tmp, li;
warp_31=`  zz = uvi; zz0 = zz;
warp_32=`  for (int n = 0; n <= 7; n++) {
warp_33=`    zz = 2.0*clamp(zz,-1,1)-zz;  tmp = dot(zz,zz);
warp_34=`    if (tmp <= 0.25) {zz *= 4;} else if (tmp <= 1) {zz /= pow(tmp,1);}
warp_35=`    zz = 2.6*zz + zz0;}
warp_36=`  return zz;}
warp_37=`
warp_38=`shader_body {
warp_39=`uv = (uv-.5)*q13 + .5;
warp_40=`uv1 = (uv-.5)*aspect.xy;
warp_41=`float3 noise = frac(8*tex2D (sampler_noise_lq,uv+rand_frame.yz)); 
warp_42=`
warp_43=`dist = noise.r;
warp_44=`if (noise.g > 0.2) {dist = MinDist(uv+.003*(noise.zy-.5)) + .005*(noise.r-.4)*abs(noise.b-.5);}
warp_45=`dist = min(dist,GetDist(uv));
warp_46=`
warp_47=`float3 uv2 = mul(float3(uv1*dist,dist-.02)/myzoom,RotMat)+CamPos;
warp_48=`uv2 = (frac(uv2/8.0+.5)-.5)*8.0;
warp_49=`box = mbox (uv2);
warp_50=`float len = (length(box));
warp_51=`struc = length(box.zy) /limit;
warp_52=`
warp_53=`if ((dist <= GetDist(uv)) && (len < limit) && (dist > 0.005)){
warp_54=` ret.r = (1-sustain)*struc+sustain*(Get1(uv).r); ret.gb=  PutDist(dist); } 
warp_55=` else {ret = tex2D(sampler_pc_main,uv_orig)*float3(sustain,1,1)-float3(0,0,change);} 
warp_56=`float4 noise9 = tex3D(sampler_noisevol_hq, 
warp_57=`                      ((uv2.xyy*q27
warp_58=`                       )*texsize.xyy*texsize_noisevol_hq.zww
warp_59=`                      ).xyz*
warp_60=`                      float3(1,1,0)*0.05 + 
warp_61=`                      time*float3(0,0,1)*q29
warp_62=`                     );
warp_63=`if(ret.x> q21*q13         && ret.x<= q24*q11        )ret.y += (noise9).x*.5; 
warp_64=`if(ret.y> q22*q11         && ret.y<= q25*q12        )ret.z += (noise9).y*.5; 
warp_65=`if(ret.z> q23*q12         && ret.z<= q26*q13        )ret.x += (noise9).z*.5; 
warp_66=`}
comp_1=`shader_body
comp_2=`{
comp_3=`    float2 d = texsize.zw;
comp_4=`    float3 dx = ( GetPixel(uv+float2(1,0)*d)-GetPixel(uv-float2(1,0)*d) );
comp_5=`    float3 dy = ( GetPixel(uv+float2(0,1)*d)-GetPixel(uv-float2(0,1)*d) );
comp_6=`float2 dz = float2(dx.y,dy.y)*3;
comp_7=`
comp_8=`d = texsize.zw*2;
comp_9=`dx = ( GetBlur1(uv+float2(1,0)*d)-GetBlur1(uv-float2(1,0)*d) );
comp_10=`dy = ( GetBlur1(uv+float2(0,1)*d)-GetBlur1(uv-float2(0,1)*d) );
comp_11=`
comp_12=`dz +=float2(dx.y,dy.y);
comp_13=`
comp_14=`float3 bg = pow(length(dz)*0.8+0,0.7) + GetBlur2(uv).y*0.4-0.1;
comp_15=`
comp_16=`ret = bg*float3(0.3,0.5,0.7);
comp_17=`float4 noise9 = tex3D(sampler_noisevol_hq, 
comp_18=`                      ((dz.xyy*q28
comp_19=`                       )*texsize.xyy*texsize_noisevol_hq.zww
comp_20=`                      ).xyz*
comp_21=`                      float3(1,1,0)*0.05 + 
comp_22=`                      time*float3(0,0,1)*q31
comp_23=`                     );
comp_24=`if(ret.x> q26*q13         && ret.x<= q23*q11        )ret.z -= (noise9).x*.5; 
comp_25=`if(ret.y> q25*q11         && ret.y<= q22*q12        )ret.x -= (noise9).y*.5; 
comp_26=`if(ret.z> q24*q12         && ret.z<= q21*q13        )ret.y -= (noise9).z*.5; 
comp_27=`ret = lerp(ret,float3(0.2,0.1,0),GetPixel(uv + float2(dx.x,dy.x)*texsize.zw*18).x*6);
comp_28=`ret = lerp(ret,1,GetPixel(uv).z);
comp_29=`ret=1-ret;
comp_30=`}
