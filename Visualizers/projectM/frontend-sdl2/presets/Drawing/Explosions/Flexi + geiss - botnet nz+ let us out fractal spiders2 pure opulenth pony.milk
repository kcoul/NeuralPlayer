MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=2
[preset00]
fRating=5.000000
fGammaAdj=1.000
fDecay=0.980
fVideoEchoZoom=2.000
fVideoEchoAlpha=0.000
nVideoEchoOrientation=0
nWaveMode=0
bAdditiveWaves=0
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=0
bMaximizeWaveColor=1
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0.004
fWaveScale=9.731
fWaveSmoothing=0.000
fWaveParam=1.000
fModWaveAlphaStart=1.000
fModWaveAlphaEnd=1.000
fWarpAnimSpeed=0.442
fWarpScale=7.315
fZoomExponent=1.50374
fShader=0.000
zoom=1.00000
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.08563
sx=1.00000
sy=1.00000
wave_r=1.000
wave_g=1.000
wave_b=1.000
wave_x=0.500
wave_y=0.040
ob_size=0.000
ob_r=0.000
ob_g=1.000
ob_b=0.000
ob_a=1.000
ib_size=0.000
ib_r=1.000
ib_g=0.000
ib_b=0.750
ib_a=1.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.000
mv_r=1.000
mv_g=1.000
mv_b=0.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=0
wavecode_0_samples=452
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=2.44415
wavecode_0_smoothing=0.00000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=0.250
wave_0_init1=t2 = 0;
wave_0_init2=t3 = 0;
wave_0_init3=t4 = 0;
wave_0_init4=cl = 0;
wave_0_per_frame1=t1 = 0;
wave_0_per_frame2=t2 = 0;
wave_0_per_point1=ppo = 9;
wave_0_per_point2=index = t2*q32;
wave_0_per_point3=sample = t1 % ppo;
wave_0_per_point4=
wave_0_per_point5=nindex = gmegabuf(index + q30); // the next neighbor's index
wave_0_per_point6=nnindex = gmegabuf(index + q30+1); // the next neighbor's index
wave_0_per_point7=nnnindex = gmegabuf(index + q30+2); // the next neighbor's index
wave_0_per_point8=
wave_0_per_point9=x = gmegabuf(index);
wave_0_per_point10=y = gmegabuf(index+1);
wave_0_per_point11=r = 0;//0.5 + gmegabuf(index+5)*0.5;
wave_0_per_point12=g = 0;//0.5 + gmegabuf(index+6)*0.5;
wave_0_per_point13=b = 1;//.5 + gmegabuf(index+7)*0.5;
wave_0_per_point14=
wave_0_per_point15=nx = gmegabuf(nindex);
wave_0_per_point16=ny = gmegabuf(nindex+1);
wave_0_per_point17=nnx = gmegabuf(nnindex);
wave_0_per_point18=nny = gmegabuf(nnindex+1);
wave_0_per_point19=nnnx = gmegabuf(nnnindex);
wave_0_per_point20=nnny = gmegabuf(nnnindex+1);
wave_0_per_point21=
wave_0_per_point22=x = 0.5 + (x-0.5)/q2;
wave_0_per_point23=y = 0.5 + (y-0.5)/q2;
wave_0_per_point24=nx = 0.5 + (nx-0.5)/q2;
wave_0_per_point25=ny = 0.5 + (ny-0.5)/q2;
wave_0_per_point26=nnx = 0.5 + (nnx-0.5)/q2;
wave_0_per_point27=nny = 0.5 + (nny-0.5)/q2;
wave_0_per_point28=nnnx = 0.5 + (nnnx-0.5)/q2;
wave_0_per_point29=nnny = 0.5 + (nnny-0.5)/q2;
wave_0_per_point30=
wave_0_per_point31=x = if( equal(sample,2), nx, x);
wave_0_per_point32=y = if( equal(sample,2), ny, y);
wave_0_per_point33=x = if( equal(sample,4), nnx, x);
wave_0_per_point34=y = if( equal(sample,4), nny, y);
wave_0_per_point35=x = if( equal(sample,6), nnnx, x);
wave_0_per_point36=y = if( equal(sample,6), nnny, y);
wave_0_per_point37=
wave_0_per_point38=a = above(sample,1)*below(sample,ppo-1)*a;
wave_0_per_point39=
wave_0_per_point40=t1 = t1 + 1;
wave_0_per_point41=t2 = if( equal(t1%ppo,0), t2 +1, t2);
wavecode_1_enabled=1
wavecode_1_samples=65
wavecode_1_sep=0
wavecode_1_bSpectrum=1
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=1
wavecode_1_scaling=0.33408
wavecode_1_smoothing=0.00000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=0.000
wave_1_init1=t2 = 0;
wave_1_init2=t3 = 0;
wave_1_init3=t4 = 0;
wave_1_init4=cl = 0;
wave_1_per_frame1=t8 = 1;
wave_1_per_frame2=
wave_1_per_frame3=t1 = 0.5;
wave_1_per_frame4=t2 = 0.9;
wave_1_per_point1=d = 0;//d*0.85 + (value1)*1;
wave_1_per_point2=
wave_1_per_point3=y = 0.2 + value1+value2;
wave_1_per_point4=x = 0.9 - sample*0.8;
wave_1_per_point5=
wave_1_per_point6=gmegabuf((sample*64-1)*q32 + 14) = value1 + value2;
wavecode_2_enabled=0
wavecode_2_samples=350
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=1
wavecode_2_scaling=5.92556
wavecode_2_smoothing=0.00000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wave_2_per_frame1=t1 = 0;
wave_2_per_frame2=t2 = 0;
wave_2_per_frame3=
wave_2_per_frame4=
wave_2_per_point1=// q32 number of attributes
wave_2_per_point2=// q31 number of objects
wave_2_per_point3=
wave_2_per_point4=ppo = 7; // number of points used for each object
wave_2_per_point5=index = t2*q32; // object's index
wave_2_per_point6=
wave_2_per_point7=x = 0.5 +(gmegabuf(index)-0.5)/q2;
wave_2_per_point8=y = 0.5 + (gmegabuf(index+1)-0.5)/q2;
wave_2_per_point9=
wave_2_per_point10=// collecting pairs of index and distance to the current object in a local buffer
wave_2_per_point11=i = 0;
wave_2_per_point12=j = 0; 
wave_2_per_point13=loop(q31,
wave_2_per_point14=     d = sqrt( sqr(gmegabuf(index)-gmegabuf(i)) + sqr(gmegabuf(index+1)-gmegabuf(i+1)));
wave_2_per_point15=     d = if( equal(d,0), 1, d);
wave_2_per_point16=     megabuf(j)   = i; // store index/distance pairs
wave_2_per_point17=     megabuf(j+1) = d; 
wave_2_per_point18=     j = j+2;
wave_2_per_point19=     i = i+q32;
wave_2_per_point20=    );
wave_2_per_point21=
wave_2_per_point22=// sort that buffer, but only 5 cycles for the 5 nearest objects
wave_2_per_point23=i = 0;
wave_2_per_point24=loop( 5,
wave_2_per_point25=      j = i;
wave_2_per_point26=      smallestfind = 100;
wave_2_per_point27=      findindex = 0;
wave_2_per_point28=      loop( q31-j,
wave_2_per_point29=            distance =megabuf(j*2+1);
wave_2_per_point30=            smaller = above( smallestfind, distance);
wave_2_per_point31=            smallestfind = if(smaller, distance, smallestfind);
wave_2_per_point32=            findindex = if( smaller, j*2, findindex);
wave_2_per_point33=            j = j + 1;
wave_2_per_point34=          );
wave_2_per_point35=
wave_2_per_point36=      // now that the nearest object was found, swap it to the buffer's top
wave_2_per_point37=
wave_2_per_point38=      j = megabuf(i);
wave_2_per_point39=      d = megabuf(i+1);
wave_2_per_point40=
wave_2_per_point41=      megabuf(i)   = megabuf(findindex);
wave_2_per_point42=      megabuf(i+1) = megabuf(findindex+1);
wave_2_per_point43=      megabuf(findindex)   = j;
wave_2_per_point44=      megabuf(findindex+1) = d;
wave_2_per_point45=
wave_2_per_point46=      i = i+1;
wave_2_per_point47=    );
wave_2_per_point48=
wave_2_per_point49=
wave_2_per_point50=index2 = (t1)%ppo;
wave_2_per_point51=i = megabuf(index2-2);
wave_2_per_point52=xx = 0.5 + (gmegabuf(i)-0.5)/q2;
wave_2_per_point53=yy = 0.5 + (gmegabuf(i+1)-0.5)/q2;
wave_2_per_point54=w = asin(1)*index2/4;
wave_2_per_point55=//xx = x + sin(w)*0.1;
wave_2_per_point56=//yy = y + cos(w)*0.1;
wave_2_per_point57=x = if( equal(index2%2,0), x, xx);
wave_2_per_point58=y = if( equal(index2%2,0), y, yy);
wave_2_per_point59=
wave_2_per_point60=
wave_2_per_point61=a = below(index2,ppo-1)*above(index2,1)*a;
wave_2_per_point62=r = 0;//.5 + gmegabuf(index + 5)*0.5;
wave_2_per_point63=g = 0;//.5 + gmegabuf(index + 6)*0.5;
wave_2_per_point64=b = 1;//0.5 + gmegabuf(index + 7)*0.5;
wave_2_per_point65=
wave_2_per_point66=
wave_2_per_point67=t2 = t2 + equal(t1%ppo,ppo-1);
wave_2_per_point68=t1 = t1 + 1;
wave_2_per_point69=
wave_2_per_point70=//a = above(t1,128);
wavecode_3_enabled=0
wavecode_3_samples=15
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=1
wavecode_3_scaling=5.92556
wavecode_3_smoothing=0.00000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=0.400
wave_3_init1=t2 = 0
wave_3_per_frame1=t1 = 0;
wave_3_per_frame2=t2 = 0;
wave_3_per_frame3=t3 = 0;
wave_3_per_frame4=t4 = 0.5;
wave_3_per_point1=ppo = 5;
wave_3_per_point2=
wave_3_per_point3=index = t2*q32;
wave_3_per_point4=neighbor = 1;
wave_3_per_point5=neighbor = gmegabuf(index+10+neighbor);
wave_3_per_point6=x = 0.5 + (gmegabuf(index)-0.5)/q2;
wave_3_per_point7=y = 0.5 + (gmegabuf(index+1)-0.5)/q2;
wave_3_per_point8=xx = 0.5 + ( gmegabuf(neighbor) - 0.5)/q2;
wave_3_per_point9=yy = 0.5 + ( gmegabuf(neighbor+1) - 0.5)/q2;
wave_3_per_point10=
wave_3_per_point11=x = if( equal(t1 % 2, 0), x, xx);
wave_3_per_point12=y = if( equal(t1 % 2, 0), y, yx);
wave_3_per_point13=
wave_3_per_point14=
wave_3_per_point15=t2 = t2 + equal(t1,ppo);
wave_3_per_point16=t1 = if(above(t1,ppo),t1-ppo,t1) + 1;
wave_3_per_point17=
shapecode_0_enabled=1
shapecode_0_sides=4
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=1024
shapecode_0_x=0.380
shapecode_0_y=0.280
shapecode_0_rad=0.03646
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.54929
shapecode_0_r=0.000
shapecode_0_g=0.000
shapecode_0_b=0.000
shapecode_0_a=1.000
shapecode_0_r2=0.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=1.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shape_0_per_frame1=i=2*(instance+3072);    
shape_0_per_frame2=
shape_0_per_frame3=x1=gmegabuf(i);   y1=gmegabuf(i+1);
shape_0_per_frame4=
shape_0_per_frame5=zoom=q2;
shape_0_per_frame6=
shape_0_per_frame7=rad=.1*rad;
shape_0_per_frame8=y= .5+zoom*x1;      
shape_0_per_frame9=x= .5+zoom*y1/q6;
shape_0_per_frame10=
shape_0_per_frame11=x= (int(x)-x+x%2)*pow(-1,1+int(x));
shape_0_per_frame12=y= (int(y)-y+y%2)*pow(-1,1+int(y));
shapecode_1_enabled=1
shapecode_1_sides=12
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=92
shapecode_1_x=0.800
shapecode_1_y=0.500
shapecode_1_rad=0.02705
shapecode_1_ang=1.57080
shapecode_1_tex_ang=1.25664
shapecode_1_tex_zoom=3.07268
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=1.000
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.000
shapecode_1_b2=0.000
shapecode_1_a2=0.000
shapecode_1_border_r=1.000
shapecode_1_border_g=0.000
shapecode_1_border_b=0.000
shapecode_1_border_a=0.000
shape_1_per_frame1=t1 = time - int (time);
shape_1_per_frame2=sample = instance/num_inst;
shape_1_per_frame3=t_abs = sample*3;
shape_1_per_frame4=t_rel = sample-time/5;
shape_1_per_frame5=
shape_1_per_frame6=ampl = 2*t_abs/2 ;
shape_1_per_frame7=
shape_1_per_frame8=k1=sin(time/13);
shape_1_per_frame9=k2=sin(time/12);
shape_1_per_frame10=ox = ampl*sin (t_abs*(31+5*k1)) + sin(time/25)*(1-t_abs)*0.4  ;
shape_1_per_frame11=oy = ampl*cos (t_abs*(31+5*k2));
shape_1_per_frame12=oz = -1  ;
shape_1_per_frame13=
shape_1_per_frame14=
shape_1_per_frame15=r = sqr(sin(t_rel*3.4));
shape_1_per_frame16=g = sqr(sin(t_rel));
shape_1_per_frame17=b = sqr (cos(t_rel*1.8));
shape_1_per_frame18=
shape_1_per_frame19=//a=(0.1*(sin(t_abs*3)) + 0.6*q3*below (abs(1-t_abs-t1 ),0.3))*a;
shape_1_per_frame20=
shape_1_per_frame21=xang = time/9.5;
shape_1_per_frame22=yang = 0*time/7;
shape_1_per_frame23=zang = -time/22;
shape_1_per_frame24=fov = 0.5;
shape_1_per_frame25=
shape_1_per_frame26=
shape_1_per_frame27=// Rotation um x,y,z
shape_1_per_frame28=
shape_1_per_frame29=mx = ox*cos(zang) - oy*sin(zang);
shape_1_per_frame30=my = ox*sin(zang) + oy*cos(zang);
shape_1_per_frame31=
shape_1_per_frame32=ox = mx;
shape_1_per_frame33=oy = my;
shape_1_per_frame34=mx = ox*cos(yang) + oz*sin(yang);
shape_1_per_frame35=mz = - ox*sin(yang) + oz*cos(yang);
shape_1_per_frame36=ox = mx;
shape_1_per_frame37=oz = mz;
shape_1_per_frame38=my = oy*cos(xang) - oz*sin(xang);
shape_1_per_frame39=mz = oy*sin(xang) + oz*cos(xang);
shape_1_per_frame40=oy = my;
shape_1_per_frame41=oz = mz;
shape_1_per_frame42=
shape_1_per_frame43=oz = oz - 6;
shape_1_per_frame44=x = ox*fov/oz +0.5;
shape_1_per_frame45=//x = (x-.5)*0.75 + 0.5;
shape_1_per_frame46=y = oy*fov/oz + 0.5;
shape_1_per_frame47=
shape_1_per_frame48=a=1/mz*.5;
shape_1_per_frame49=//a2=1/mz*.5;
shape_1_per_frame50=//border_a=1/mz*.5;
shape_1_per_frame51=rad=1/mz*.005;
shapecode_2_enabled=1
shapecode_2_sides=3
shapecode_2_additive=0
shapecode_2_thickOutline=1
shapecode_2_textured=1
shapecode_2_num_inst=311
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.01000
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.62832
shapecode_2_tex_zoom=1.00000
shapecode_2_r=0.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=0.000
shapecode_2_g2=0.000
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=0.000
shapecode_2_border_g=0.000
shapecode_2_border_b=0.000
shapecode_2_border_a=0.000
shape_2_per_frame1=ma=ma+(above(bass,1)*3.1415*.01*bass);
shape_2_per_frame2=ma=ma-(above(treb,1)*3.1415*.01*treb);
shape_2_per_frame3=
shape_2_per_frame4=mx=mx+(.0002*cos(ma));
shape_2_per_frame5=my=my+(.0002*tan(ma));
shape_2_per_frame6=
shape_2_per_frame7=mx=if(above(mx,.9),(.9-mx),mx);
shape_2_per_frame8=my=if(above(my,.9),(.9-my),my);
shape_2_per_frame9=mx=if(below(mx,.1),(.9+mx),mx);
shape_2_per_frame10=my=if(below(my,.1),(.9+my),my);
shape_2_per_frame11=
shape_2_per_frame12=x=1-mx;
shape_2_per_frame13=y=1-my;
shape_2_per_frame14=
shape_2_per_frame15=ang=(sin(time*.35)+1)*3;
shape_2_per_frame16=//a=(above(bass+mid+treb,.8));
shape_2_per_frame17=pi23=4*asin(1)*.333333333;
shape_2_per_frame18=t1=bass+mid+treb;
shapecode_3_enabled=1
shapecode_3_sides=3
shapecode_3_additive=1
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=392
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.16283
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.73458
shapecode_3_r=0.000
shapecode_3_g=1.000
shapecode_3_b=1.000
shapecode_3_a=0.500
shapecode_3_r2=0.000
shapecode_3_g2=0.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.000
shape_3_init1=i3 = 0;
shape_3_init2=i4 = 0;
shape_3_per_frame1=i3 = if(equal(instance,0),0,i3);
shape_3_per_frame2=i4 = if(equal(instance,0),0,i4);
shape_3_per_frame3=ppo = 8;
shape_3_per_frame4=index = i4*q32;
shape_3_per_frame5=sample = i3 % ppo;
shape_3_per_frame6=
shape_3_per_frame7=size = gmegabuf(index+4)*40;
shape_3_per_frame8=
shape_3_per_frame9=x = gmegabuf(index);
shape_3_per_frame10=y = gmegabuf(index+1);
shape_3_per_frame11=
shape_3_per_frame12=ang = gmegabuf(index+9);
shape_3_per_frame13=rad = size*0.05;
shape_3_per_frame14=
shape_3_per_frame15=r = gmegabuf(index+5);
shape_3_per_frame16=g = gmegabuf(index+6);
shape_3_per_frame17=b = gmegabuf(index+7);
shape_3_per_frame18=
shape_3_per_frame19=
shape_3_per_frame20=sample = sample/ppo;
shape_3_per_frame21=bending = gmegabuf(index + 12)*5 + gmegabuf(index + 10)*5;
shape_3_per_frame22=dir = -ang + (sample-0.4)*bending;
shape_3_per_frame23=
shape_3_per_frame24= ang =  asin(1)*1.5 - dir + bending*0.05;
shape_3_per_frame25=
shape_3_per_frame26=x = x + ((sample-0.3)*0.06*cos(dir)*size + sin(dir)*size*bending*0.01);
shape_3_per_frame27=y = y + ((sample-0.3)*0.06*sin(dir)*size - cos(dir)*size*bending*0.01);
shape_3_per_frame28=
shape_3_per_frame29=x = 0.5 + (x-0.5)/q2;
shape_3_per_frame30=
shape_3_per_frame31=rad = rad*1.5 - sample*0.05*size;
shape_3_per_frame32=
shape_3_per_frame33=i3 = i3 + 1;
shape_3_per_frame34=i4 = if( equal(i3%ppo,0), i4 +1, i4);
per_frame_init_1=// clear buffer
per_frame_init_2=i = 0; loop(1024*1024, gmegabuf(i) = 0; i = i+1);
per_frame_init_3=
per_frame_init_4=count = 50;
per_frame_init_5=attributes = 32;
per_frame_init_6=nListStart = 24; // starting index of neighbor list
per_frame_init_7=
per_frame_init_8=minradius = 0.004;
per_frame_init_9=maxradius = 0.04;
per_frame_init_10=v = 0.0;
per_frame_init_11=
per_frame_init_12=// randomize initial coordinates
per_frame_init_13=index = 0;
per_frame_init_14=loop(count, 
per_frame_init_15=     gmegabuf(index*attributes) = rand(1000)/1000;
per_frame_init_16=     gmegabuf(index*attributes+1) = rand(1000)/1000;
per_frame_init_17=     gmegabuf(index*attributes+2) = v*(rand(1000)/1000-0.5);
per_frame_init_18=     gmegabuf(index*attributes+3) = v*(rand(1000)/1000-0.5);
per_frame_init_19=     gmegabuf(index*attributes+4) = minradius + (maxradius-minradius)*(index+1)/count;
per_frame_init_20=     gmegabuf(index*attributes+5) = 0;
per_frame_init_21=     gmegabuf(index*attributes+6) = 1;
per_frame_init_22=     gmegabuf(index*attributes+7) = 0;
per_frame_init_23=     gmegabuf(index*attributes+8) = pow(gmegabuf(index*attributes+4),3) ;
per_frame_init_24=     gmegabuf(index*attributes+9) = 4*asin(1)*rand(1000)/1000;
per_frame_init_25=     gmegabuf(index*attributes+10) = 0;
per_frame_init_26=     gmegabuf(index*attributes+13) = index/(count-1);
per_frame_init_27=     gmegabuf(index*attributes+14) = 0;
per_frame_init_28=     index = index+1;
per_frame_init_29=    );
per_frame_init_30=
per_frame_init_31=q30 = nListStart;
per_frame_init_32=q31 = count;
per_frame_init_33=q32 = attributes;
per_frame_init_34=
per_frame_init_35=q29 = (count-1)*attributes; // last index
per_frame_init_36=q28 = asin(1);
per_frame_init_37=// 0, x
per_frame_init_38=// 1, y
per_frame_init_39=// 2, vx
per_frame_init_40=// 3, vy
per_frame_init_41=// 4, radius
per_frame_init_42=// 5, red
per_frame_init_43=// 6, green
per_frame_init_44=// 7, blue
per_frame_init_45=// 8, mass
per_frame_init_46=// 9, angle
per_frame_init_47=// 10, rotation
per_frame_init_48=// 11, bend force
per_frame_init_49=// 12, bending
per_frame_init_50=// 13, sample
per_frame_init_51=// 14, spectrum
per_frame_init_52=//prma init
per_frame_init_53=i=0;  
per_frame_init_54=loop(10000, gmegabuf(i)=0;
per_frame_init_55=i=i+1;);
per_frame_init_56=t=0;
per_frame_init_57=t0=time;
per_frame_init_58=
per_frame_1=chng=sin(time*.5);
per_frame_2=cthr=.9999;
per_frame_3=mq21=if(above(chng,cthr),rand(3),mq21);
per_frame_4=mq22=if(above(chng,cthr),rand(3),mq22);
per_frame_5=mq23=if(above(chng,cthr),rand(3),mq23);
per_frame_6=mq24=if(above(chng,cthr),rand(2),mq24);
per_frame_7=mq25=if(above(chng,cthr),rand(2),mq25);
per_frame_8=mq26=if(above(chng,cthr),rand(2),mq26);
per_frame_9=mq27=if(above(chng,cthr),rand(1),mq27);
per_frame_10=mq28=if(above(chng,cthr),rand(1),mq28);
per_frame_11=mq29=if(above(chng,cthr),rand(1)*.3,mq29);
per_frame_12=mq31=if(above(chng,cthr),rand(1)*.3,mq31);
per_frame_13=monitor=chng;
per_frame_14=q21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;
per_frame_15=q27=mq27;q28=mq28;q29=mq29;q31=mq31;
per_frame_16=
per_frame_17=monitor=mq1;
per_frame_18=vol=bass+treb+mid;
per_frame_19=atime=atime+vol;
per_frame_20=q11=.4+sin(atime*.006        )*.4;
per_frame_21=q12=.4+cos(atime*.00613828348)*.4;
per_frame_22=q13=.4+sin(atime*.00598593455)*.4;
per_frame_23=monitor=q13;
per_frame_24=//prma
per_frame_25=wave_a=0;        warp=0;        q6=aspecty; 
per_frame_26=t=t+.001/fps;     c=bnot(frame%3);
per_frame_27=s1=15+5*sin(t);         s2=100*sin(t);
per_frame_28=i=0;    x=0;     y=0;    p1=0;    p2=0;
per_frame_29=loop(1024*c*4,
per_frame_30=p1 = s1*sin(i*s2);   
per_frame_31=p2 = -s1*cos(i*s2)+p1-p2;
per_frame_32=x=x+sin(p2);         y=y+cos(p2);
per_frame_33=gmegabuf(2*i)=x;      gmegabuf(2*i+1)=y;
per_frame_34=i=i+1;);
per_frame_35=///////////
per_frame_36=zoom=above(time-t0,.1);
per_frame_37=speed = 25; //// tweak
per_frame_38=t2=t2+1/fps;
per_frame_39=decay=1-t1;
per_frame_40=t1=t1+2*equal((.1*t2*speed)%20,0)/fps;
per_frame_41=t1=t1*above(0.2,(.1*t2*speed)%20);
per_frame_42=monitor=s2;
per_frame_43=q2=.004;
per_frame_44=
per_frame_45=q30=(bass+treb+mid)*2;
per_frame_46=
per_frame_47=zoom=1-(1-pow(2,(bass+treb+mid)*.0031));
per_frame_48=
per_frame_49=dt = 1/fps;
per_frame_50=
per_frame_51=warp = 0;
per_frame_52=zoom = 1;
per_frame_53=wave_a = 0;
per_frame_54=
per_frame_55=gravity = 0.0015*dt*0;
per_frame_56=dampening = 0.;
per_frame_57=friction = 2048*dt;
per_frame_58=shock = 0.002;
per_frame_59=pi2 = asin(1);
per_frame_60=
per_frame_61=nn = 3; // number of nearest neighbors to search, reduce if not needed
per_frame_62=        // provide enough attributes, otherwise the next object's coordinate will be overwritten
per_frame_63=        // collision detection is based on nearest neighbors, so keep it at least at 1.
per_frame_64=
per_frame_65=check = 2; // how many neighbors will be checked for a possible collision. may not be above nn.
per_frame_66=           // raise to avoid odd behavior in clusters of touching objects.
per_frame_67=
per_frame_68=bouncefactor = 0.1;
per_frame_69=rotatefactor = 0; // relation between angular and translative momentum, when object hits a border. this is an empirical value for a convincing impression
per_frame_70=
per_frame_71=
per_frame_72=
per_frame_73=h = (aspecty-1)*0.5; w = (aspectx-1)*0.5;
per_frame_74=index = 0; index2 = 0;
per_frame_75=loop(count, 
per_frame_76=
per_frame_77=     random = rand(1000)/1000;
per_frame_78=     sample = gmegabuf(index+13);
per_frame_79=
per_frame_80=     // bend force
per_frame_81=     gmegabuf(index + 11) = gmegabuf(index + 11)*0.92 - 4*gmegabuf(index+12)*dt + 2*(random-0.5)*dt*gmegabuf(index+14);
per_frame_82=
per_frame_83=     // bend
per_frame_84=     gmegabuf(index + 12) += 60*gmegabuf(index + 11)*dt;
per_frame_85=     
per_frame_86=     v = sqrt( sqr( gmegabuf(index + 2) ) + sqr( gmegabuf(index + 3) ) );
per_frame_87=
per_frame_88=     // apply friction
per_frame_89=     fric = max(0,1 - sqr(v*friction) - v*2);
per_frame_90=     gmegabuf(index + 2) *= fric;
per_frame_91=     gmegabuf(index + 3) *= fric;
per_frame_92=
per_frame_93=     // apply direction change
per_frame_94=     gmegabuf(index + 10) = gmegabuf(index + 10)*fric +  v*gmegabuf(index +12)*0;
per_frame_95=
per_frame_96=     // apply acceleration force
per_frame_97=     acceleration = random*0.000 + abs(gmegabuf(index+11))*0.003;
per_frame_98=     direction = gmegabuf(index + 9) - pi2;
per_frame_99=     gmegabuf(index + 2) += sin(direction)*acceleration;
per_frame_100=     gmegabuf(index + 3) += cos(direction)*acceleration;
per_frame_101=
per_frame_102=     // adding velocity vectors
per_frame_103=     gmegabuf(index) = gmegabuf(index) + gmegabuf(index+2)*60*dt;
per_frame_104=     gmegabuf(index+1) = gmegabuf(index+1) + gmegabuf(index+3)*60*dt;
per_frame_105=     gmegabuf(index+9) = gmegabuf(index+9) + gmegabuf(index+10)*0.5;
per_frame_106=
per_frame_107=     // applying gravity
per_frame_108=     gmegabuf(index+3) = gmegabuf(index+3) - gravity;
per_frame_109=
per_frame_110=     vr = sin(gmegabuf(index+10))*gmegabuf(index+4); // rotation speed at the surface
per_frame_111=
per_frame_112=     // bounce off ceiling
per_frame_113=     bounce = above( gmegabuf(index+1), 1 - gmegabuf(index+4) + w);
per_frame_114=     gmegabuf(index+2) = if( bounce, gmegabuf(index+2) + (vr+gmegabuf(index+2))*rotatefactor, gmegabuf(index+2));
per_frame_115=     gmegabuf(index+3) = if( bounce, -abs(gmegabuf(index+3))*dampening - shock, gmegabuf(index+3));
per_frame_116=     vr = if( bounce, vr - (gmegabuf(index+2) + vr)*(1-rotatefactor), vr);
per_frame_117=
per_frame_118=     // bounce off floor
per_frame_119=     bounce = below( gmegabuf(index+1), gmegabuf(index+4) - w);
per_frame_120=     gmegabuf(index+2) = if( bounce, gmegabuf(index+2) + (vr-gmegabuf(index+2))*rotatefactor, gmegabuf(index+2));
per_frame_121=     gmegabuf(index+3) = if( bounce, abs(gmegabuf(index+3))*dampening + shock, gmegabuf(index+3));
per_frame_122=     vr = if( bounce, vr + (gmegabuf(index+2) - vr)*(1-rotatefactor), vr);
per_frame_123=
per_frame_124=     // bounce off right border
per_frame_125=     bounce = above( gmegabuf(index), 1 - gmegabuf(index+4) + h);
per_frame_126=     gmegabuf(index+2) = if( bounce, -abs(gmegabuf(index+2))*dampening - shock, gmegabuf(index+2));
per_frame_127=     gmegabuf(index+3) = if( bounce, gmegabuf(index+3) + (vr-gmegabuf(index+3))*rotatefactor, gmegabuf(index+3));
per_frame_128=     vr = if( bounce, vr + (gmegabuf(index+3) - vr)*(1-rotatefactor), vr);
per_frame_129=
per_frame_130=     // bounce off left border
per_frame_131=     bounce = below( gmegabuf(index), gmegabuf(index+4) - h);
per_frame_132=     gmegabuf(index+2) = if( bounce, abs(gmegabuf(index+2))*dampening + shock, gmegabuf(index+2));
per_frame_133=     gmegabuf(index+3) = if( bounce, gmegabuf(index+3) - (vr+gmegabuf(index+3))*rotatefactor, gmegabuf(index+3));
per_frame_134=     vr = if( bounce, vr - (gmegabuf(index+3) + vr)*(1-rotatefactor), vr);
per_frame_135=
per_frame_136=     gmegabuf(index+10) = asin(vr/gmegabuf(index+4));
per_frame_137=
per_frame_138=     i = 0; j = 0; // collecting pairs of index and distance to the current object in a local buffer
per_frame_139=     loop( count,
per_frame_140=           d = sqrt( sqr(gmegabuf(index)-gmegabuf(i)) + sqr(gmegabuf(index+1)-gmegabuf(i+1)));
per_frame_141=           d = if( equal(d,0), 10, d); // leave out comparison with itself (where d == 0, set d to a high value)
per_frame_142=           d = d - (gmegabuf(index+4)+gmegabuf(i+4))*0.5; // subtract radius (surface to surface distance)
per_frame_143=           megabuf(j)   = i; // store index/distance pairs
per_frame_144=           megabuf(j+1) = d; 
per_frame_145=           j = j+2;
per_frame_146=           i = i+attributes; );
per_frame_147=     i = 0; // sort that buffer, but only as many cycles as needed for the _nn_ nearest neighbors
per_frame_148=     loop( nn,
per_frame_149=           j = i; smallestfind = 10; findindex = -1;
per_frame_150=           loop( count-j,
per_frame_151=                 distance =megabuf(j*2+1);
per_frame_152=                 smaller = above( smallestfind, distance);
per_frame_153=                 smallestfind = if(smaller, distance, smallestfind);
per_frame_154=                 findindex = if( smaller, j*2, findindex);
per_frame_155=                 j = j + 1; );
per_frame_156=           j = megabuf(i*2); d = megabuf(i*2+1);
per_frame_157=           megabuf(i*2)   = megabuf(findindex);
per_frame_158=           megabuf(i*2+1) = megabuf(findindex+1);
per_frame_159=           megabuf(findindex)   = j;
per_frame_160=           megabuf(findindex+1) = d;
per_frame_161=           i = i+1;
per_frame_162=         );
per_frame_163=     i = 0; // storing the indexes of the nearest neighbors in the list
per_frame_164=     loop( nn,
per_frame_165=           gmegabuf(index + nListStart + i) = megabuf(i*2);
per_frame_166=           i = i +1;
per_frame_167=         );
per_frame_168=     i = 0; // collision detection and impulse transmission below
per_frame_169=     loop( check,
per_frame_170=           index2 = megabuf(i);
per_frame_171=           hit = below( sqrt( sqr( gmegabuf(index) - gmegabuf(index2)) +
per_frame_172=                              sqr( gmegabuf(index+1) - gmegabuf(index2+1))),
per_frame_173=                        gmegabuf(index + 4) + gmegabuf(index2 + 4)
per_frame_174=                      )
per_frame_175=                 *
per_frame_176=                 above( sqrt( sqr( gmegabuf(index)   - gmegabuf(index2))+
per_frame_177=                        sqr( gmegabuf(index+1) - gmegabuf(index2+1))),
per_frame_178=                        sqrt( sqr( gmegabuf(index+0) - gmegabuf(index2+0)+ 
per_frame_179=                                   gmegabuf(index+2) - gmegabuf(index2+2))+
per_frame_180=                              sqr( gmegabuf(index+1) - gmegabuf(index2+1)+
per_frame_181=                                   gmegabuf(index+3) - gmegabuf(index2+3)) ) );
per_frame_182=           ref_ang = atan2( gmegabuf(index2)-gmegabuf(index), // calculating the angle of the common tangent
per_frame_183=                            gmegabuf(index2 + 1)-gmegabuf(index + 1)) + pi2;
per_frame_184=           v1 = sqrt(sqr( gmegabuf(index + 2)) + sqr( gmegabuf(index + 3))); // velocity of object1
per_frame_185=           v2 = sqrt(sqr( gmegabuf(index2 + 2)) + sqr( gmegabuf(index2 + 3)));  // velocity of object2
per_frame_186=           w1 = atan2( gmegabuf(index + 2), gmegabuf(index + 3));   // object1 motion angle
per_frame_187=           w2 = atan2( gmegabuf(index2 + 2), gmegabuf(index2 + 3)); // object2 motion angle
per_frame_188=           vr2 = sin(gmegabuf(index2 + 10))*gmegabuf(index2+4); // the other object's surface velocity
per_frame_189=           m1 = gmegabuf(index + 8); m2 = gmegabuf(index2 + 8);
per_frame_190=           vv1 = ((m1-m2)*v1 + 2*m2*v2)/(m1+m2); vv2 = ((m2-m1)*v2 + 2*m1*v1)/(m1+m2);
per_frame_191=           vrr = ((m1-m2)*vr + 2*m2*vr2)/(m1+m2); vrr2 = ((m2-m1)*vr2 + 2*m1*vr)/(m1+m2);
per_frame_192=
per_frame_193=           gmegabuf( index + 2) = if( hit, sin(ref_ang)*v1*cos(w1-ref_ang) + ((vr-vr2)-sin(ref_ang)*v1*cos(w1-ref_ang))*0.1
per_frame_194=                                         + cos(ref_ang)*vv1*sin(w2-ref_ang),
per_frame_195=                                                  gmegabuf( index + 2) );
per_frame_196=
per_frame_197=           gmegabuf( index + 3) = if( hit, cos(ref_ang)*v1*cos(w1-ref_ang) + ((vr-vr2)-cos(ref_ang)*v1*cos(w1-ref_ang))*0.1
per_frame_198=                                         - sin(ref_ang)*vv1*sin(w2-ref_ang),
per_frame_199=                                                 gmegabuf( index + 3) );
per_frame_200=
per_frame_201=           gmegabuf( index2 + 2) = if( hit, sin(ref_ang)*v2*cos(w2-ref_ang) + ((vr2-vr)-sin(ref_ang)*v2*cos(w2-ref_ang))*0.1
per_frame_202=                                          + cos(ref_ang)*vv2*sin(w1-ref_ang),
per_frame_203=                                                  gmegabuf( index2 + 2) );
per_frame_204=
per_frame_205=           gmegabuf( index2 + 3) = if( hit, cos(ref_ang)*v2*cos(w2-ref_ang) + ((vr2-vr)-cos(ref_ang)*v2*cos(w2-ref_ang))*0.1
per_frame_206=                                          - sin(ref_ang)*vv2*sin(w1-ref_ang),
per_frame_207=                                                  gmegabuf( index2 + 3) );
per_frame_208=
per_frame_209=           vr = if( hit, vr + (cos(w1-ref_ang)*(v1-v2)-vr) , vr);
per_frame_210=           gmegabuf( index + 10) = asin( vr / gmegabuf(index+4) );
per_frame_211=
per_frame_212=           vr2 = if( hit, vr2 + (cos(w2-ref_ang)*(v2-v1)-vr2) , vr2);
per_frame_213=           gmegabuf( index2 + 10) = asin( vr2 / gmegabuf(index2+4) );
per_frame_214=
per_frame_215=           i=i+2;
per_frame_216=         );
per_frame_217=     index = index+attributes;
per_frame_218=    );
per_frame_219=
per_frame_220=
per_frame_221=// lines for the predator shader
per_frame_222=index = (q31-1)*q32;
per_frame_223=
per_frame_224=px = gmegabuf(index);
per_frame_225=py = gmegabuf(index+1);
per_frame_226=
per_frame_227=w = gmegabuf(index+9);
per_frame_228=//rad = gmegabuf(index+4)*2;
per_frame_229=
per_frame_230=//r = gmegabuf(index+5);
per_frame_231=//g = gmegabuf(index+6);
per_frame_232=//b = gmegabuf(index+7);
per_frame_233=
per_frame_234=r2 = r; g2 = g; b2 = b;
per_frame_235=
per_frame_236=
per_frame_237=x = 0.5 + (x-0.5)/q2;
per_frame_238=
per_frame_239=zoom = 1;
per_frame_240=warp = 0;
per_frame_241=q1 = aspectx;
per_frame_242=q2 = aspecty;
per_frame_243=
per_frame_244=x4 = 0.5;
per_frame_245=y4 = 0.5;
per_frame_246=vx = cos(w);
per_frame_247=vy = -sin(w);
per_frame_248=q3 = x4;
per_frame_249=q4 = y4;
per_frame_250=q5 = 0.5 + (px-0.5)/aspecty;
per_frame_251=q6 = 0.5 + (py-0.5)/aspectx;
per_frame_252=monitor = r;
per_frame_253=w = -2*atan2(vy,vx);
per_frame_254=q13 = cos(w);
per_frame_255=q14 = sin(w);
warp_1=`float3 color, mus;
warp_2=`float dx,dy;
warp_3=`
warp_4=`shader_body {
warp_5=`float corr = texsize.xy*texsize_noise_lq.zw;
warp_6=`
warp_7=`float2 uv1 = (uv-.5);
warp_8=`float2 uv6 = uv1;
warp_9=`
warp_10=`float rota = lum(tex2D (sampler_noise_hq,uv/4))*q31;
warp_11=`
warp_12=`uv6 = mul(uv1,float2x2(cos(rota),-sin(rota),sin(rota),cos(rota)));
warp_13=`uv6 += sin(q32*uv1);
warp_14=`mus = .2/(sqrt(uv6.x)+.2);
warp_15=`
warp_16=`mus *= float3 (1.1,1,.95);
warp_17=`mus *= .9+.1*tex2D (sampler_noise_hq,uv);
warp_18=`
warp_19=`float3 blur = GetBlur1(frac(uv));
warp_20=`
warp_21=`float2 hor = float2 (0.005,0);
warp_22=`float2 ver = float2 (0,.005);
warp_23=`
warp_24=`float dx = lum(tex2D(sampler_main,uv+hor) 
warp_25=`         - tex2D(sampler_main,uv-hor));
warp_26=`float dy = lum(tex2D(sampler_main,uv+ver) 
warp_27=`         - tex2D(sampler_main,uv-ver));
warp_28=`
warp_29=`
warp_30=`float2 zz = float2 (dx,dy);
warp_31=`
warp_32=`float3 crisp= tex2D(sampler_main,uv+zz*.02);
warp_33=`float3 crisp2 = tex2D(sampler_main,uv);
warp_34=`crisp += crisp2/2;
warp_35=`crisp *= .67;
warp_36=`crisp +=.08 * mus - length(zz)*blur;
warp_37=`
warp_38=`float3 ret1 = crisp - lum(blur)*.04;
warp_39=`ret = ret1 * .99 -  .04 ;
warp_40=`float3 ret7=ret;
warp_41=`ret.z=.3-ret7.x;
warp_42=`float4 noise9 = tex3D(sampler_noisevol_hq, 
warp_43=`                      ((zz.xyy*q27
warp_44=`                       )*texsize.xyy*texsize_noisevol_hq.zww
warp_45=`                      ).xyz*
warp_46=`                      float3(1,1,0)*0.05 + 
warp_47=`                      time*float3(0,0,1)*q29
warp_48=`                     );
warp_49=`if(ret.x> q21*q13         && ret.x<= q24*q11        )ret.y -= (noise9).x*.5; 
warp_50=`ret.x=.3-ret7.y;
warp_51=`if(ret.y> q22*q11         && ret.y<= q25*q12        )ret.z -= (noise9).y*.5; 
warp_52=`ret.y=.3-ret7.z;
warp_53=`if(ret.z> q23*q12         && ret.z<= q26*q13        )ret.x -= (noise9).z*.5; 
warp_54=`ret7=ret;
warp_55=`ret.z=.3-ret7.y;
warp_56=`ret.y=.3-ret7.x;
warp_57=`ret.x=.3-ret7.z;
warp_58=`ret7=ret;
warp_59=`ret.x=.3-ret7.x;
warp_60=`ret.y=.3-ret7.y;
warp_61=`ret.z=.3-ret7.z;
warp_62=`
warp_63=`
warp_64=`}
comp_1=`shader_body
comp_2=`{
comp_3=`    ret = tex2D(sampler_main, uv).xyz;
comp_4=`    float L = lum(ret);
comp_5=`    float bw = saturate(cos(L*27 + 3)*30 - 26);
comp_6=`    float L2 = lum(GetBlur1(uv));
comp_7=`    float bw2 = saturate(cos(L*27 + 3)*30 - 26);
comp_8=`
comp_9=`    ret = float3(1.1,0.8,0.7)*ret.x +
comp_10=`          float3(0.4,0.6,0.55)*ret.y + 
comp_11=`          float3(0.7,0.6,0.9)*ret.z;
comp_12=`
comp_13=`    ret = ret*ret * (1.3 + bw*bw2*5);
comp_14=`
comp_15=`}
