MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=5.000000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=3
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=1
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.478
fWaveScale=0.060
fWaveSmoothing=0.900
fWaveParam=-0.200
fModWaveAlphaStart=0.390
fModWaveAlphaEnd=1.180
fWarpAnimSpeed=100.000
fWarpScale=100.000
fZoomExponent=100.00000
fShader=0.000
zoom=1.11363
rot=0.00000
cx=0.500
cy=0.500
dx=-1.00000
dy=1.00000
warp=100.00000
sx=1.00000
sy=1.00000
wave_r=0.650
wave_g=0.650
wave_b=0.650
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=0.000
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=0.000
nMotionVectorsX=4.480
nMotionVectorsY=4.320
mv_dx=0.000
mv_dy=0.000
mv_l=0.050
mv_r=1.000
mv_g=0.200
mv_b=0.200
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=1
wavecode_0_scaling=0.74192
wavecode_0_smoothing=0.00000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=0.020
wave_0_per_point1=q3=bnot(q3);
wave_0_per_point2=
wave_0_per_point3=x=.5+(equal(q3,0)*(int(rand(50))-25)*.02);
wave_0_per_point4=y=.5+(equal(q3,0)*(int(rand(50))-25)*.02);
wavecode_1_enabled=1
wavecode_1_samples=62
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=1
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=0.200
wave_1_per_point1=r=bass*.05;
wave_1_per_point2=cd=cd+.001;
wave_1_per_point3=
wave_1_per_point4=c=int(rand(10))*3.1415927*.2;
wave_1_per_point5=c=c+cd;
wave_1_per_point6=
wave_1_per_point7=x=.5+(cos(c)*r);
wave_1_per_point8=y=.5+(sin(c)*r);
wave_1_per_point9=
wave_1_per_point10=r=abs(sin(time*.77));
wave_1_per_point11=g=treb*.5
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=1
shapecode_0_sides=100
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.150
shapecode_0_y=0.820
shapecode_0_rad=1.49765
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=0.36971
shapecode_0_r=1.000
shapecode_0_g=0.400
shapecode_0_b=0.000
shapecode_0_a=1.000
shapecode_0_r2=1.000
shapecode_0_g2=1.000
shapecode_0_b2=0.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shape_0_per_frame1=ra=ra-(bass_att*.01);
shape_0_per_frame2=
shape_0_per_frame3=ang=ra;
shape_0_per_frame4=
shape_0_per_frame5=x=abs(sin(time*.1));
shape_0_per_frame6=y=abs(cos((time+.2)*.3));
shapecode_1_enabled=1
shapecode_1_sides=100
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=1
shapecode_1_num_inst=1
shapecode_1_x=0.830
shapecode_1_y=0.820
shapecode_1_rad=1.49766
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=0.36971
shapecode_1_r=1.000
shapecode_1_g=0.000
shapecode_1_b=0.500
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.600
shapecode_1_b2=0.700
shapecode_1_a2=0.000
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.000
shape_1_per_frame1=ra=ra+(treb_att*.025);
shape_1_per_frame2=
shape_1_per_frame3=ang=ra;
shape_1_per_frame4=
shape_1_per_frame5=x=abs(sin(time*.2));
shape_1_per_frame6=y=abs(cos(time*.7));
shapecode_2_enabled=1
shapecode_2_sides=100
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=1
shapecode_2_num_inst=1
shapecode_2_x=0.270
shapecode_2_y=0.200
shapecode_2_rad=1.32910
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=0.40839
shapecode_2_r=0.400
shapecode_2_g=0.800
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=1.000
shapecode_2_g2=0.200
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.000
shape_2_per_frame1=ra=ra+if(above(treb,.5),treb*.03,.01);
shape_2_per_frame2=
shape_2_per_frame3=ang=ra;
shape_2_per_frame4=rad=rad+(treb_att*.1);
shape_2_per_frame5=
shape_2_per_frame6=y=abs(sin(time*.23));
shape_2_per_frame7=x=abs(cos(time*.7));
shapecode_3_enabled=1
shapecode_3_sides=100
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=1
shapecode_3_num_inst=1
shapecode_3_x=0.750
shapecode_3_y=0.250
shapecode_3_rad=1.46815
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.40839
shapecode_3_r=1.000
shapecode_3_g=0.900
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=1.000
shapecode_3_b2=1.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.000
shape_3_per_frame1=ra=ra-if(above(bass,1.3),bass*.02,.01);
shape_3_per_frame2=
shape_3_per_frame3=ang=ra;
shape_3_per_frame4=rad=rad+(bass_att*.1);
shape_3_per_frame5=
shape_3_per_frame6=x=abs(sin(time*.25));
shape_3_per_frame7=
per_frame_1=dec_med = pow (0.8, 30/fps);
per_frame_2=dec_slow = pow (0.95, 30/fps);
per_frame_3=//dec_xlow = pow (0.999, 30/fps);
per_frame_4=beat = max (max (bass, mid), treb); 
per_frame_5=avg = avg*dec_slow + beat*(1-dec_slow);
per_frame_6=is_beat = above(beat, .2+avg+peak) * above (time, t0+.2);
per_frame_7=t0 = is_beat*time + (1-is_beat)*t0;
per_frame_8=peak = is_beat * beat + (1-is_beat)*peak*dec_med;
per_frame_9=index = (index + is_beat) %32;
per_frame_10=index2 = (index2 + is_beat*bnot(index))%4;
per_frame_11=
per_frame_12=q22 = peak;
per_frame_13=q24 = is_beat;
per_frame_14=q26 = bass_att + mid_att + treb_att;
per_frame_15=vol = vol*dec_med + (1-dec_med)*q26;
per_frame_16=q27 = index + 1;
per_frame_17=q28 = index2 +1;
per_frame_18=
per_frame_19=p2 = .3*sin(time) + .3*cos(time/3);
per_frame_20=//*****tunnel tilting
per_frame_21=q1 = cos(p2 * 3.1416/4);
per_frame_22=q2 = sin(p2 * 3.1416/4);
per_frame_23=q3 = -q2;
per_frame_24=q4 = q1;
per_frame_25=
per_frame_26=//****tunnel viewpoint x,y
per_frame_27=vtrig = is_beat * bnot(index%2);
per_frame_28=vx = vx * bnot(vtrig) + vtrig * (int(rand(100))/100-.5);
per_frame_29=vy = vy * bnot(vtrig) + vtrig * (int(rand(100))/100-.5);
per_frame_30=vx = vx* below(index%15,5); //###
per_frame_31=vy = vy* below(index%15,5);
per_frame_32=q5 = vx*10;
per_frame_33=q6 = vy*12;
per_frame_34=
per_frame_35=//***tunnel width
per_frame_36=q21 = (1+sin(time/12))/8+.01;
per_frame_37=
per_frame_38=//**floor proximity
per_frame_39=prox = prox - above(vy,.3)*prox*2;
per_frame_40=q32 = .5 + .2*prox;
per_frame_41=monitor = prox;
per_frame_42=
per_frame_43=//****tunnel rotation
per_frame_44=rota = rota +.01*below(index%16,8)/fps*30;
per_frame_45=rota1 = rota1*dec_med + (1-dec_med)*rota;
per_frame_46=q7 = rota1;
per_frame_47=
per_frame_48=//****tunnel speed
per_frame_49=movez = movez + 1.2/(1+abs(vx)+abs(vy))/fps;
per_frame_50=q8 = movez * (1+q21/4);
per_frame_51=//dyn. Aenderung von q21 bewirkt auch Richt.wechsel
per_frame_52=
per_frame_53=//***********************
per_frame_54=trig1= q24*bnot(index%12);
per_frame_55=trig2= q24*bnot((index+4)%12);
per_frame_56=trig3= q24*bnot((index+8)%12);
per_frame_57=trel = trel + vol/fps;
per_frame_58=z0 = 1;
per_frame_59=speed = vol/2;
per_frame_60=hx = sin(trel);
per_frame_61=hy = cos(trel);
per_frame_62=
per_frame_63=p1z = bnot(trig1)* (p1z + (5+p1z)*speed/fps)+trig1*z0;
per_frame_64=p1z = max(p1z,.1);
per_frame_65=q9 = hx/(p1z); 
per_frame_66=q10 = hy/(p1z); 
per_frame_67=q11 = p1z;
per_frame_68=q12 = .1+.02*q26*bnot((index+2)%3)*p1z*exp(-p1z/100);
per_frame_69=
per_frame_70=p2z = bnot(trig2)* (p2z + (5+p2z)*speed/fps)+trig2*z0;
per_frame_71=p2z = max(p2z,.1);
per_frame_72=q13 = 2*hx/(p2z); 
per_frame_73=q14 = -.5*hy/(p2z); 
per_frame_74=q15 = p2z;
per_frame_75=q16 = .1+.02*q26*bnot((index+2)%3)*p2z*exp(-p2z/100);
per_frame_76=
per_frame_77=
per_frame_78=p3z = bnot(trig3)* (p3z + (5+p3z)*speed/fps)+trig3*z0;
per_frame_79=p3z = max(p3z,.1);
per_frame_80=q17 = -1.4*hx/(p3z); 
per_frame_81=q18 = 2*hy/(p3z); 
per_frame_82=q19 = p3z;
per_frame_83=q20 = .1+.02*q26*bnot((index+2)%3)*p3z*exp(-p3z/100);
per_frame_84=chng=sin(time*.5);
per_frame_85=cthr=.9999;
per_frame_86=mq20=if(above(chng,cthr),rand(3),mq20);
per_frame_87=mq19=if(above(chng,cthr),rand(3),mq19);
per_frame_88=mq23=if(above(chng,cthr),rand(3),mq23);
per_frame_89=mq24=if(above(chng,cthr),rand(2),mq24);
per_frame_90=mq25=if(above(chng,cthr),rand(2),mq25);
per_frame_91=mq26=if(above(chng,cthr),rand(2),mq26);
per_frame_92=mq27=if(above(chng,cthr),rand(1),mq27);
per_frame_93=mq28=if(above(chng,cthr),rand(1),mq28);
per_frame_94=mq29=if(above(chng,cthr),rand(1)*.3,mq29);
per_frame_95=mq30=if(above(chng,cthr),rand(1)*.3,mq30);
per_frame_96=monitor=chng;
per_frame_97=q20=mq20;q19=mq19;q23=mq23;q24=mq24;q25=mq25;q26=mq26;
per_frame_98=q27=mq27;q28=mq28;q29=mq29;q30=mq30;
per_frame_99=
per_frame_100=monitor=mq1;
per_frame_101=vol=bass+treb+mid;
per_frame_102=atime=atime+vol;
per_frame_103=q1=.4+sin(atime*.006        )*.4;
per_frame_104=q2=.4+cos(atime*.00613828348)*.4;
per_frame_105=q3=.4+sin(atime*.00598593455)*.4;
per_frame_106=monitor=q3;
per_frame_107=warp = 0;
per_frame_108=
per_frame_109=tv = tv + 1/fps+above(bass_att*treb_att,4);
per_frame_110=mv_r = sin(tv*2.)/2+.5;
per_frame_111=mv_g= sin(tv*.2312)/2+.5;
per_frame_112=mv_b = sin(tv*.203)/2+.5;
per_frame_113=
per_frame_114=wave_b = if(below(treb, 1.8),1-.025*int(rand(10)),0);
per_frame_115=wave_g = wave_g*sqr(.01*int(rand(100)));
per_frame_116=decay = .9999+.0001+0*if(equal(frame % 10,0),.95,1);
per_frame_117=monitor = wave_g;
per_frame_118=cx=.5+.3*cos(time*.21);
per_frame_119=cy=.5+.3*sin(time*.1);
per_frame_120=//cx=cx+(bass-1.2)*.1;
per_frame_121=//cy=cy+(treb_att-1)*.1;
per_frame_122=mv_a=bass_att*.4;
per_frame_123=//mv_g=mv_r*1;
per_frame_124=wave_x = cx;
per_frame_125=wave_y=1-cy;
per_frame_126=monitor=(3.14159+atan(-.1))/3.14159;
per_frame_127=q1=cx;
per_frame_128=q2=cy;
per_frame_129=q21=sin(time*.7);
per_frame_130=//q22=.01;
per_pixel_1=radc=sqr(q1-x)+sqr(q2-y);
per_pixel_2=near=below(radc,.015);
per_pixel_3=notnear = 1- near;
per_pixel_4=//sy=max(0.3,pow(bass_att,.2))*near + notnear;
per_pixel_5=//sx=1/sy*near + notnear;
per_pixel_6=//rot = .01*sin(x*5+time)*notnear-.015;
per_pixel_7=rot = .015*notnear;
per_pixel_8=//zoom = 1+ notnear*.01*(.5+sin(ang*5+time));
per_pixel_9=angc=atan((y-cy)/(x-cx))+below(x,cx)*sign(y-cy)*3.14159;
per_pixel_10=//dx=(x-cx)*.03*(cos(angc*3)*3+2);//*notnear;
per_pixel_11=//dy=(y-cy)*.03*(sin(angc*3)*3+2);//*notnear;
per_pixel_12=//zoom=1-angc/3.14159*.07;
per_pixel_13=
per_pixel_14=shift = -.02*(pow(cos(angc*.5-time*1.1-pow(radc,.4)*8),6)-.6)*notnear;
per_pixel_15=dx=cos(angc)*shift;
per_pixel_16=dy=sin(angc)*shift;
warp_1=`float2 complex_mul(float2 factorA, float2 factorB){
warp_2=`   return float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
warp_3=`}
warp_4=`
warp_5=`float2 complex_pow(float2 base, int exponent){
warp_6=`   float2 exponentiation = float2(1,0);
warp_7=`   for(int i = 0; i<exponent; i++){
warp_8=`      exponentiation = complex_mul(base,exponentiation);
warp_9=`   }
warp_10=`   return exponentiation;
warp_11=`}
warp_12=`
warp_13=`float2 complex_square(float2 domain){
warp_14=`   return complex_mul(domain,domain);
warp_15=`}
warp_16=`
warp_17=`float2 complex_div(float2 numerator, float2 denominator){
warp_18=`   return float2( numerator.x*denominator.x + numerator.y*denominator.y,
warp_19=`                  numerator.y*denominator.x - numerator.x*denominator.y)/
warp_20=`          (denominator.x*denominator.x + denominator.y*denominator.y);
warp_21=`}
warp_22=`
warp_23=`float2 uv_aspect(float2 uvo, float2 uvm, float2 aspectr, float2 motion_scale){
warp_24=`   return 0.5 + (lerp(uvo,uvm,motion_scale)-0.5)*aspectr;
warp_25=`}
warp_26=`
warp_27=`float2 uv_scale(float2 domain, float2 center, float2 scale){
warp_28=`   return center + (domain-center)*scale;
warp_29=`}
warp_30=`
warp_31=`float2 uv_torus_mirror(float2 domain, float cutoff){
warp_32=`   return 0.5 + (1.0 - abs( frac( domain * 0.5 ) * 2 - 1.0 )-0.5)*cutoff;
warp_33=`}
warp_34=`
warp_35=`float2 uv_polar(float2 domain, float2 center){
warp_36=`   float2 c = domain - center;
warp_37=`   float rad_hq = length(c);
warp_38=`   float ang_hq = atan2(c.x,c.y);
warp_39=`   return float2(ang_hq*M_INV_PI_2, rad_hq);
warp_40=`}
warp_41=`
warp_42=`float2 uv_polar_logarithmic(float2 domain, float2 center, int fins, float log_factor, float2 coord){
warp_43=`   float2 polar = uv_polar(domain, center);
warp_44=`   return float2(polar.x*fins+coord.x, log_factor*log(1/polar.y) + coord.y);
warp_45=`}
warp_46=`
warp_47=`float2 uv_moebius_transformation(float2 domain, float2 zeroPoint, float2 infinityPoint,float zoom){
warp_48=`   return complex_div((domain - zeroPoint)*zoom, domain - infinityPoint)+0.5;
warp_49=`}
warp_50=`
warp_51=`float2 uv_bipolar_logarithmic(float2 domain, float2 northPole, float2 southPole, int fins, float log_factor, float2 coord){
warp_52=`   float2 help_uv = uv_moebius_transformation(domain, northPole, southPole, 1);
warp_53=`   return uv_polar_logarithmic(help_uv,0.5,fins,log_factor,coord);
warp_54=`}
warp_55=`
warp_56=`bool mask_rectangle(float2 domain, float2 position, float2 dimensions){
warp_57=`   return (domain.x>position.x-dimensions.x)*(domain.x<position.x+dimensions.x)*
warp_58=`          (domain.y>position.y-dimensions.y)*(domain.y<position.y+dimensions.y);
warp_59=`}
warp_60=`
warp_61=`bool mask_circle(float2 domain, float2 position, float radius){
warp_62=`   return length(domain-position)<radius;
warp_63=`}
warp_64=`
warp_65=`bool mask_spiral_logarithmic(float2 domain, float2 center, int fins, float thickness, float spiral_factor, float zoom){
warp_66=`   float2 c = domain - center;
warp_67=`   float rad_hq = length(c);
warp_68=`   float ang_hq = atan2(c.x,c.y);
warp_69=`
warp_70=`   return frac(fins*ang_hq*M_INV_PI_2 + spiral_factor*log(1/rad_hq)+zoom)<thickness;
warp_71=`}
warp_72=`
warp_73=`float figure_spiral(float2 domain, float2 center, int fins, float thickness, float spiral_factor, float zoom){
warp_74=`   float2 c = domain - center;
warp_75=`   float rad_hq = length(c);
warp_76=`   float ang_hq = atan2(c.x,c.y);
warp_77=`
warp_78=`   return frac(fins*ang_hq*M_INV_PI_2 + spiral_factor*log(1/rad_hq)+zoom)<thickness;
warp_79=`}
warp_80=`
warp_81=`float figure_circle(float2 domain, float2 position, float radius){
warp_82=`   return saturate(1-length(domain-position)/radius);
warp_83=`}
warp_84=`
warp_85=`float figure_border(float2 domain, float thickness){
warp_86=`   float2 help_uv = frac(domain-0.5);
warp_87=`   help_uv = min(help_uv,1-help_uv)*2;
warp_88=`   return saturate(max(help_uv.x,help_uv.y)-1+thickness)/(thickness);
warp_89=`}
warp_90=`
warp_91=`shader_body
warp_92=`{
warp_93=`float2 base_uv = uv_aspect(uv_orig, uv, aspect.wz, 0);
warp_94=`float2 northPole = float2(0.25,0.5);
warp_95=`float2 southPole = float2(0.75,0.5);
warp_96=`int fins = 4;
warp_97=`float log_factor = 0.6;
warp_98=`float2 coord = float2(time*0.1,time*0.5);
warp_99=`
warp_100=`float2 bipolar_uv = uv_bipolar_logarithmic(base_uv, northPole, southPole, fins, log_factor, coord );
warp_101=`
warp_102=`ret = figure_border(bipolar_uv,0.15)*float3(1,0.8,0);
warp_103=`log_factor = 1;
warp_104=`coord = float2(0,time*0.3);
warp_105=`bipolar_uv = uv_torus_mirror(bipolar_uv,1);
warp_106=`float2 polar_uv = uv_polar_logarithmic(bipolar_uv,0.5,fins,log_factor,coord);
warp_107=`ret = lerp(ret,float3(0.5,0,1),figure_border(polar_uv,0.25));
warp_108=`float4 noise9 = tex3D(sampler_noisevol_hq, 
warp_109=`                      ((polar_uv.xyy*q27
warp_110=`                       )*texsize.xyy*texsize_noisevol_hq.zww
warp_111=`                      ).xyz*
warp_112=`                      float3(1,1,0)*0.05 + 
warp_113=`                      time*float3(0,0,1)*q29
warp_114=`                     );
warp_115=`if(ret.x> q20*q3         && ret.x<= q24*q1        )ret.y -= (noise9).x*.5; 
warp_116=`if(ret.y> q19*q1         && ret.y<= q25*q2        )ret.z -= (noise9).y*.5; 
warp_117=`if(ret.z> q23*q2         && ret.z<= q26*q3        )ret.x -= (noise9).z*.5; 
warp_118=`}
comp_1=`sampler sampler_pw_noise_lq;
comp_2=`
comp_3=`float k1, k2, mask1, mask2, mask3, rad1, rad2, rad3;
comp_4=`float2 rs, rss, rss0, rs0, uv2, uv3,uv4, rsk, uvo;
comp_5=`float2 dz1, dz2, dz3, Kugel1, Kugel2, Kugel3,tmp;
comp_6=`float3 noise, ret1, ret2;
comp_7=`
comp_8=`shader_body {
comp_9=`uvo = uv;
comp_10=`uv = mul(uv*aspect.xy,float2x2(_qa));
comp_11=`
comp_12=`uv = uv + -.0- .1*float2(q5,q6);
comp_13=`float2 uv1 = (uv-.5 );//*aspect.xy;
comp_14=`
comp_15=`//Kugel1
comp_16=`rsk = (uv1 + float2 (q9,q10)) ;
comp_17=`dz1 = normalize(rsk);
comp_18=`rad1 = q11*length (rsk) ;
comp_19=`uv4 =  tan(rad1)*dz1;
comp_20=`mask1 = saturate(8-8*rad1);
comp_21=`Kugel1 = uv4*mask1;
comp_22=`
comp_23=`//Kugel2
comp_24=`rsk = (uv1 + float2 (q13,q14)) ;
comp_25=`dz2 = normalize(rsk);
comp_26=`rad2 = q15*length (rsk) ;
comp_27=`uv4 =  tan(rad2)*dz2;
comp_28=`mask2 = saturate(8-8*rad2);
comp_29=`Kugel2 = uv4*mask2;
comp_30=`
comp_31=`//Kugel3
comp_32=`rsk = (uv1 + float2 (q17,q18)) ;
comp_33=`dz3 = normalize(rsk);
comp_34=`rad3 = q19*length (rsk) ;
comp_35=`uv4 =  tan(rad3)*dz3;
comp_36=`mask3 = saturate(8-8*rad3);
comp_37=`Kugel3 = uv4*mask3;
comp_38=`
comp_39=`float2 dz = (Kugel2 + Kugel1 + Kugel3)*.2;
comp_40=`//******************** STARS
comp_41=`uv1 += dz;
comp_42=`rss0.x = atan2(uv1.x, uv1.y)/3.1416;
comp_43=`rss0.y = .1*q21/(length (uv1));
comp_44=`
comp_45=`rss = float2 (rss0.x,rss0.y+time);
comp_46=`rss = mul(rss,float2x2(.7,.7,-.7,.7));
comp_47=`float noise = (tex2D(sampler_pw_noise_lq,rss/32)-.5 >= 0);
comp_48=`tmp = abs(frac(rss*8)-.5);
comp_49=`float3 dots = saturate(.04/length(tmp)) *noise;
comp_50=`
comp_51=`rss = float2 (rss0.x,rss0.y+time/4);
comp_52=`rss = mul(rss,float2x2(.7,.7,-.7,.7));
comp_53=`noise = (tex2D(sampler_pw_noise_lq,rss/32)-.5 >= 0);
comp_54=`tmp = abs(frac(rss*8)-.5);
comp_55=`dots += saturate(.02/length(tmp)) * noise;
comp_56=`
comp_57=`dots *= saturate(.2/abs(rss0.y));
comp_58=`dots *= dots*.6;
comp_59=`//*************************
comp_60=`
comp_61=`float z = q32/(uv1.y-.02);//floor proxy
comp_62=`float mask = saturate(4/z);
comp_63=`rs0.x = (uv1.x)*z;
comp_64=`rs0.y = z/4;
comp_65=`rs.x = rs0.x ;
comp_66=`rs.y = rs0.y + q8*3;
comp_67=`float3 mirror = lum(tex2D(sampler_pw_noise_lq,.02*rs))-.5;
comp_68=`z = .2/(length(uv1)-q21);
comp_69=`uv2.y = z + q8;
comp_70=`uv2.x = rss0.x +q7;
comp_71=`uv3 =frac(uv2 +.0*mask*mirror);
comp_72=`uv3 *=2 ;
comp_73=`float2 m = floor(frac(uv3*0.5)*2);
comp_74=`uv3 = frac(uv3)*(1-m) + (m)*frac(1-uv3);
comp_75=`
comp_76=`ret1 =  tex2D (sampler_main,uv3)/z;
comp_77=`ret = max(ret1*(1-0.5*mask),mirror*mask) +dots;
comp_78=`
comp_79=`float mod = q22*2;
comp_80=`float3 blk = abs(rsqrt(rad1)*dz1.x*roam_sin
comp_81=`+rsqrt(rad2)*dz2.y*roam_sin.rbg
comp_82=`+rsqrt(rad3)*dz3.x*roam_sin.bgr)*(.2+mirror*mask)*mod; 
comp_83=`ret += blk;
comp_84=`
comp_85=`ret2 = saturate(.02*q22*q21/length (uv1)*
comp_86=` (lum(tex2D (sampler_main,uv1+.5))));
comp_87=`ret2 /= (length(uv1)+.02);
comp_88=`float k1 = lum(ret2);
comp_89=`ret += k1*float3(1,k1,k1/2)  ;
comp_90=`float4 noise9 = tex3D(sampler_noisevol_hq, 
comp_91=`                      ((uv3.xyy*q28
comp_92=`                       )*texsize.xyy*texsize_noisevol_hq.zww
comp_93=`                      ).xyz*
comp_94=`                      float3(1,1,0)*0.05 + 
comp_95=`                      time*float3(0,0,1)*q30 
comp_96=`                     );
comp_97=`if(ret.x> q26*q3         && ret.x<= q23*q1        )ret.z -= (noise9).x*.5; 
comp_98=`if(ret.y> q25*q1         && ret.y<= q19*q2        )ret.x -= (noise9).y*.5; 
comp_99=`if(ret.z> q24*q2         && ret.z<= q20*q3        )ret.y -= (noise9).z*.5; 
comp_100=`}
