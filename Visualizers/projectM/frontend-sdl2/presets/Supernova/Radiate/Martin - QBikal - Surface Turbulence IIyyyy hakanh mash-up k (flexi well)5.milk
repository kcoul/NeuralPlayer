MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=2
PSVERSION_COMP=3
[preset00]
fRating=5.000000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=4
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.527
fWaveSmoothing=0.450
fWaveParam=0.000
fModWaveAlphaStart=0.000
fModWaveAlphaEnd=1.320
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.800
wave_g=0.490
wave_b=1.000
wave_x=0.500
wave_y=0.500
ob_size=0.015
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=1.000
ib_size=0.260
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=1.850
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=0.300
b3x=1.000
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=506
wavecode_0_sep=116
wavecode_0_bSpectrum=1
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=0
wavecode_0_scaling=1.07408
wavecode_0_smoothing=0.00000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=0.700
wave_0_per_point1=
wave_0_per_point2=n = int((reg00+.5)*sample);
wave_0_per_point3=
wave_0_per_point4=m = 30001+n/(reg00/reg01);
wave_0_per_point5=gmegabuf(m) = (value1+value2);
wave_0_per_point6=
wave_0_per_point7=x = gmegabuf(10000+n);
wave_0_per_point8=y = gmegabuf(15000+n);
wave_0_per_point9=a = gmegabuf(20000+n);
wave_0_per_point10=
wave_0_per_point11=b = min(max(gmegabuf(25000+n),0),1);
wave_0_per_point12=r = 1-b;  
wave_0_per_point13=g = 0.5;
wavecode_1_enabled=1
wavecode_1_samples=506
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=0
wavecode_1_scaling=0.89152
wavecode_1_smoothing=0.82000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wave_1_per_point1=n = int((reg00+.5)*sample) +reg00;
wave_1_per_point2=
wave_1_per_point3=x = gmegabuf(10000+n);
wave_1_per_point4=y = gmegabuf(15000+n);
wave_1_per_point5=a = gmegabuf(20000+n);
wave_1_per_point6=
wave_1_per_point7=b = min(max(gmegabuf(25000+n),0),1);
wave_1_per_point8=r = 1-b;  
wave_1_per_point9=g = 0.5;
wave_1_per_point10=
wavecode_2_enabled=1
wavecode_2_samples=506
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=0
wavecode_2_scaling=0.89152
wavecode_2_smoothing=0.82000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wave_2_per_point1=n = int((reg00+.5)*sample)+2*reg00;
wave_2_per_point2=
wave_2_per_point3=
wave_2_per_point4=x = gmegabuf(10000+n);
wave_2_per_point5=y = gmegabuf(15000+n);
wave_2_per_point6=a = gmegabuf(20000+n);
wave_2_per_point7=
wave_2_per_point8=b = min(max(gmegabuf(25000+n),0),1);
wave_2_per_point9=r = 1-b;  
wave_2_per_point10=g = 0.5;
wave_2_per_point11=
wavecode_3_enabled=1
wavecode_3_samples=506
wavecode_3_sep=0
wavecode_3_bSpectrum=1
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
wave_3_per_point1=n = int((reg00-.5)*sample)+3*reg00;
wave_3_per_point2=
wave_3_per_point3=
wave_3_per_point4=x = gmegabuf(10000+n);
wave_3_per_point5=y = gmegabuf(15000+n);
wave_3_per_point6=a = gmegabuf(20000+n);
wave_3_per_point7=
wave_3_per_point8=b = min(max(gmegabuf(25000+n),0),1);
wave_3_per_point9=r = 1-b;  
wave_3_per_point10=g = 0.5;
shapecode_0_enabled=0
shapecode_0_sides=4
shapecode_0_additive=1
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=2.37185
shapecode_0_ang=0.00000
shapecode_0_tex_ang=1.57080
shapecode_0_tex_zoom=0.93101
shapecode_0_r=0.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=0.400
shapecode_0_r2=0.000
shapecode_0_g2=1.000
shapecode_0_b2=0.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=0.000
shapecode_0_border_a=0.000
shapecode_1_enabled=0
shapecode_1_sides=12
shapecode_1_additive=1
shapecode_1_thickOutline=0
shapecode_1_textured=1
shapecode_1_num_inst=1
shapecode_1_x=0.300
shapecode_1_y=0.800
shapecode_1_rad=1.06345
shapecode_1_ang=0.00000
shapecode_1_tex_ang=1.63363
shapecode_1_tex_zoom=0.46617
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.000
shapecode_1_b2=0.000
shapecode_1_a2=1.000
shapecode_1_border_r=1.000
shapecode_1_border_g=0.000
shapecode_1_border_b=0.000
shapecode_1_border_a=0.000
shapecode_2_enabled=0
shapecode_2_sides=13
shapecode_2_additive=1
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=5
shapecode_2_x=0.650
shapecode_2_y=0.380
shapecode_2_rad=0.57049
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=0.73678
shapecode_2_r=1.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=0.700
shapecode_2_r2=0.000
shapecode_2_g2=0.000
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=0.500
shapecode_2_border_g=0.500
shapecode_2_border_b=0.000
shapecode_2_border_a=0.000
shapecode_3_enabled=0
shapecode_3_sides=14
shapecode_3_additive=1
shapecode_3_thickOutline=1
shapecode_3_textured=1
shapecode_3_num_inst=1
shapecode_3_x=0.600
shapecode_3_y=0.550
shapecode_3_rad=0.97237
shapecode_3_ang=1.25664
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.34933
shapecode_3_r=1.000
shapecode_3_g=0.600
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=0.000
shapecode_3_b2=1.000
shapecode_3_a2=0.000
shapecode_3_border_r=0.200
shapecode_3_border_g=0.700
shapecode_3_border_b=0.500
shapecode_3_border_a=0.000
per_frame_init_1=index = 0;
per_frame_init_2=loop (70000,
per_frame_init_3=  megabuf(index) = 0;
per_frame_init_4=  gmegabuf(index) = 0;
per_frame_init_5=  index = index + 1;
per_frame_init_6=);
per_frame_init_7=
per_frame_init_8=zang = 1;
per_frame_init_9=
per_frame_init_10=yang = 0;
per_frame_init_11=zang = 2;
per_frame_1=xlen = 45; ylen = 45; flen = 20; reg00 = xlen*ylen/4; reg01=reg00/4;
per_frame_2=dec_med = 1-0.06*30/fps; dec_slow = 1-0.02*30/fps; dec_f = pow (0.8, 30/fps);
per_frame_3=q30 = dec_slow;
per_frame_4=smooth = max(1,pow(6,fps/30)-2); // >= 0; Ausbreitungsgeschwindigkeit
per_frame_5=
per_frame_6=//"Classic" beat reaction
per_frame_7=cbeat = bass+mid+treb;
per_frame_8=decc = if (vol>cbeat,0.8,dec_med);
per_frame_9=vol  = vol * decc + (1-decc)*cbeat;
per_frame_10=avg = avg*dec_slow + cbeat*(1-dec_slow);
per_frame_11=is_beat = above(cbeat, 1.5*avg) * above (time, tc0+.2);
per_frame_12=tc0 = if (bor(is_beat, bd_bt),time,tc0);
per_frame_13=peak = if (is_beat,cbeat,peak*dec_med);
per_frame_14=
per_frame_15=
per_frame_16=//Gleichanteil entfernen und normalisieren
per_frame_17=ind = 0; sum = 0; amp = 0.01;
per_frame_18=loop (reg01,
per_frame_19=  sum = sum + gmegabuf(ind+30000)/(reg01);
per_frame_20=  amp = amp + pow(gmegabuf(ind+30000),2);
per_frame_21=  ind = ind+1;
per_frame_22=); 
per_frame_23=ind = 0; amp_= amp_*dec_med + (1-dec_med)*sqrt(amp)/reg01*600;
per_frame_24=loop (reg01,
per_frame_25=  megabuf(ind+30000)= (gmegabuf(ind+30000)-sum)/amp_;
per_frame_26=  ind = ind+1;
per_frame_27=);
per_frame_28= 
per_frame_29=// Spectrum of spectrum  !
per_frame_30=index2 = 0;
per_frame_31=loop(flen, //Frequency step
per_frame_32=  index=0; real= 0; imag = 0;
per_frame_33=  loop (flen,
per_frame_34=    real = real + cos(index/flen*6.28*index2)*megabuf(index*reg01/8+30002);
per_frame_35=    imag = imag + sin(index/flen*6.28*index2)*megabuf(index*reg01/8+30002);
per_frame_36=    index=index+1;
per_frame_37=  );
per_frame_38=  megabuf(10000+index2)= megabuf(10000+index2) * dec_f + real;
per_frame_39=  megabuf(15000+index2)= megabuf(15000+index2) * dec_f + imag;
per_frame_40=  index2 = index2+1;
per_frame_41= );
per_frame_42=
per_frame_43=//Anregung
per_frame_44=ind = 1;
per_frame_45=loop (flen/2,
per_frame_46=  cx = megabuf(10000+ind);
per_frame_47=  cy = megabuf(15000+ind);
per_frame_48=  yind = -1;
per_frame_49=  loop (3,
per_frame_50=    xind = -1;
per_frame_51=    loop (3,
per_frame_52=      ox = ((cx+.5)*xlen+xind)%xlen;
per_frame_53=      oy = ((cy+.5)*ylen+yind)%ylen;
per_frame_54=      amp = (cx*cx+cy*cy)*3;
per_frame_55=      megabuf (oy*ylen+ox) = megabuf (oy*ylen+ox) 
per_frame_56=                           - 2*30/fps*sqrt(amp)*above(amp,.02)/(1+xind*xind+yind*yind);
per_frame_57=      xind = xind+1;
per_frame_58=    );
per_frame_59=    yind = yind+1;
per_frame_60=  );
per_frame_61=  ind = ind+1;
per_frame_62=);
per_frame_63=
per_frame_64=//Simulation
per_frame_65=yind = 0;
per_frame_66=loop (ylen,
per_frame_67=  xind = 0;
per_frame_68=  loop (xlen,
per_frame_69=    megabuf(yind*ylen+xind+5000) = //megabuf ab 5000 ist nur Zwischenspeicher
per_frame_70=    dec_med*((gmegabuf(yind*ylen+(xind+1)%xlen) +
per_frame_71=    gmegabuf(yind*ylen+(xlen+xind-1)%xlen) + 
per_frame_72=    gmegabuf(((yind+1)%ylen)*ylen+xind) + 
per_frame_73=    gmegabuf(((yind+ylen-1)%ylen)*ylen+xind)
per_frame_74=    +gmegabuf(yind*ylen+xind)*smooth*4)/(2+2*smooth) - megabuf(yind*ylen+xind)); 
per_frame_75=    xind = xind+1;
per_frame_76=  );
per_frame_77=  yind = yind+1;
per_frame_78=);
per_frame_79=
per_frame_80=//Projektionsparameter
per_frame_81=
per_frame_82=bindex += is_beat;
per_frame_83=
per_frame_84=if (is_beat && (bindex%4==0), ran2 = (rand(100)-50)/50,0 );
per_frame_85=if (is_beat && (bindex%4==2), ran3 = (rand(100)-50)/50,0 );
per_frame_86=if (is_beat && (bindex%6==5), ran4 = (rand(100)-50)/50,0 );
per_frame_87=
per_frame_88=trelx += ran2/fps/18;
per_frame_89=trely += ran3/fps/2;
per_frame_90=trelz += ran4/fps/6;
per_frame_91=zang = 6*sin(trelz);
per_frame_92=xang = 6*sin(zang/5+trelx);
per_frame_93=yang = 6*sin(zang/3*0+trely);
per_frame_94=
per_frame_95=q1 = cos(xang);q2 = sin(xang);q3 = cos(yang);
per_frame_96=q4 = sin(yang);q5 = cos(zang);q6 = sin(zang);
per_frame_97=fov = 1;
per_frame_98=
per_frame_99=//Umkopieren und Projektion
per_frame_100=yind = 0;
per_frame_101=loop (ylen,
per_frame_102=  xind = 0;
per_frame_103=  loop (xlen,
per_frame_104=    ind = yind*ylen+xind;
per_frame_105=    megabuf(ind) = gmegabuf(ind); 
per_frame_106=    gmegabuf(ind) = megabuf(ind+5000); 
per_frame_107=    oz = yind - ylen/2; //#
per_frame_108=    ox = if(bnot(yind%2),xind,xlen-xind-1);
per_frame_109=    oy0a = (oy0+oy0a)/2.5;
per_frame_110=    oy = gmegabuf(yind*ylen+ox); oy0 = oy;
per_frame_111=    ox = ox - xlen/2;  
per_frame_112=    mx = ox*q5 - oy*q6;  my = ox*q6 + oy*q5;
per_frame_113=    ox = mx; oy = my;  
per_frame_114=    mx = ox*q3 + oz*q4;  mz = - ox*q4 + oz*q3;
per_frame_115=    ox = mx; oz = mz;  
per_frame_116=    my = oy*q1 - oz*q2;  mz = oy*q2 + oz*q1;
per_frame_117=    z0 = (10*sin(trelz*14));
per_frame_118=    oy = my; oz = mz+z0;
per_frame_119=    gmegabuf(10000+ind) = fov*ox/(oz+60*fov)+.5;
per_frame_120=    gmegabuf(15000+ind) = fov*oy/(oz+60*fov)+.5;
per_frame_121=    hell= max(min(.5+oy0/4,1),0.2); //Helligkeit
per_frame_122=    gmegabuf(20000+ind) = max(min(hell* (.5+ (oy0a-oy0)*0.1),1),0.1);
per_frame_123=    gmegabuf(25000+ind) = oy0/16+.5;;
per_frame_124=    xind = xind+1;
per_frame_125=  );
per_frame_126=  yind = yind+1;
per_frame_127=);
per_frame_128=
per_frame_129=q29 = 10/(z0+15);
per_frame_130=q32 = aspecty;
per_frame_131=q28 = min (vol/3-0.25,1);
per_frame_132=monitor = q28;
per_pixel_1=rot = 0; zoom = 1.1; warp = 0; dy = 0.02;
warp_1=`shader_body
warp_2=`{
warp_3=`    float1 d = 0.005;
warp_4=`    float1 dx = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).y;
warp_5=`    float1 dy = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).y;
warp_6=`    float2 my_uv = uv - float2(dx,dy)*0.01;
warp_7=`
warp_8=`
warp_9=`
warp_10=`    float2 v = 0.01;
warp_11=`    ret.y = tex2D( sampler_fc_main, my_uv-floor(my_uv)).y;
warp_12=`
warp_13=`    
warp_14=`    ret.y += (ret.y - GetBlur3(my_uv-floor(my_uv)).y)*.1;
warp_15=`    ret.y += 0.006-GetBlur3(uv-floor(uv)).x*5;
warp_16=`
warp_17=`    ret.y = lerp( ret.y, lum(ret).x, 0);
warp_18=`
warp_19=`//--------------------------------
warp_20=`
warp_21=`    d = 0.01;
warp_22=`    my_uv = float2(-dy,dx)*0.05;
warp_23=`
warp_24=`    dx = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).z;
warp_25=`    dy = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).z;
warp_26=`    my_uv += uv - float2(dx,dy)*0.005;
warp_27=`
warp_28=`
warp_29=`
warp_30=`    v = 0.01;
warp_31=`    ret.z =tex2D( sampler_fw_main, my_uv - floor(my_uv)).z;
warp_32=`
warp_33=`    
warp_34=`    ret.z += (ret.z - GetBlur3(my_uv-floor(my_uv)).z)*0.13;
warp_35=`    ret.z *= 0.95;
warp_36=`    ret.z += 0.03-GetBlur3(uv-floor(uv)).x - tex2D( sampler_main, my_uv - floor(my_uv)).y*0.05;
warp_37=`
warp_38=`    ret.x = tex2D( sampler_main, uv_orig).x - 0.3;
warp_39=`}
comp_1=`#define sat saturate
comp_2=`static const float2 pix = texsize.zw;
comp_3=`float glow, tmp, lamp, dist, bdist, b2dist, dist_c;
comp_4=`float2 dz, uv1, uv3;
comp_5=`static const float3 CamPos = float3(q4,q5,q6);
comp_6=`static const float myzoom = q7;
comp_7=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
comp_8=`static const float3 col_struc =  float3(1,.7,.3) + .2*(rand_preset.xyz-.5);
comp_9=`static float2 center = float2 (q1,q2);
comp_10=`
comp_11=`float3 GetBlurX (float2 uvi, float x) {return lerp (GetPixel(uvi), GetBlur1(uvi), x);}
comp_12=`float GetDist(float2 uvi)   {return 1-GetPixel(uvi).b;}
comp_13=`float GetDistB(float2 uvi)  {return 1-GetBlur1(uvi).b;}
comp_14=`float GetDistB2(float2 uvi) {return 1-GetBlur2(uvi).b;}
comp_15=`
comp_16=`float MinDistB (float2 uvi) {float tmp; float4 nb; //##nicht ideal
comp_17=`  tmp = GetDist(uvi);
comp_18=`  tmp = min(tmp,GetDistB2(uvi)*1) ;
comp_19=`  return tmp;}
comp_20=`
comp_21=`sampler sampler_pw_noise_lq;
comp_22=`
comp_23=`float3 neu, ret1;
comp_24=`float2 rs2,rs0,rss,uv2;
comp_25=`float ang2,c,s;
comp_26=`float2x2 rota = float2x2(.7,.7,-.7,.7);
comp_27=`shader_body
comp_28=`{
comp_29=`float2 uvo = 0.5 + (uv-0.5)*float2(1.1,0.81);
comp_30=`float2 factorA = uv-float2(1-0.5,0.5);
comp_31=`
comp_32=`uv -= 0.5;
comp_33=`uv *= aspect.xy;    
comp_34=`
comp_35=`rs0.x = atan2(uv.y, uv.x)/3.1416*2;
comp_36=`rs0.y = .02/(length (uv));
comp_37=`rss = float2 (rs0.x,rs0.y+time);
comp_38=`rss = mul(rss,float2x2(.7,.7,-.7,.7));
comp_39=`float noise = (tex2D(sampler_pw_noise_lq,rss/32)-.7 >= 0);
comp_40=`rss = abs(frac(rss*8)-.5);
comp_41=`float3 dots = saturate(.04/length(rss)) *noise;
comp_42=`
comp_43=`rss = float2 (rs0.x*2,rs0.y+time/2);
comp_44=`rss = mul(rss,float2x2(.7,.7,-.7,.7));
comp_45=`noise = (tex2D(sampler_pw_noise_lq,rss/32)-.7 >= 0);
comp_46=`rss = abs(frac(rss*8)-.5);
comp_47=`dots += saturate(.04/length(rss)) * noise;
comp_48=`
comp_49=`dots *= saturate(.04/abs(.01/rs0.y-q6*0))+.0;
comp_50=`dots *= dots*2;
comp_51=`
comp_52=`float3 ret1 = 0;
comp_53=`int anz = 2;
comp_54=`int n = 0;
comp_55=`while (n <= anz) {
comp_56=`    ang2 = 6.28*n/anz;
comp_57=`    c = cos(ang2);
comp_58=`    s = sin(ang2);
comp_59=`    uv2.x =  uv.x*c - uv.y*s;
comp_60=`    uv2.y =  uv.x*s + uv.y*c;
comp_61=`
comp_62=`    neu = GetPixel(uv2+.5) + GetBlur1(uv2+.5);
comp_63=`    ret1 = max(ret1,neu);
comp_64=`n++;
comp_65=`}
comp_66=`ret = ret1 + dots*(1+ret1);
comp_67=`
comp_68=`float2 factorB = float2(0,-1024+(treb_att-bass_att)*0);
comp_69=`float2 product = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
comp_70=`float2 numerator = float2(1,0);
comp_71=`float2 denominator = product;
comp_72=`float2 fraction = float2( numerator.x*denominator.x + numerator.y*denominator.y,   // the fractions real part
comp_73=`                   numerator.y*denominator.x - numerator.x*denominator.y)/  // the fractions imaginary part
comp_74=`                   (denominator.x*denominator.x + denominator.y*denominator.y);
comp_75=`uv = fraction.yx*float2(-1,1)*100;
comp_76=`uv = lerp(0.5 + (uvo-0.5)*2,uv+0.5,0.5);
comp_77=`uv = 0.5 + (1.0 - abs( frac( uv * 0.5 ) * 2 - 1.0 )-0.5)*0.98; // Eo.S. mirror code with cutted borders
comp_78=`uv = (uv-.5)*.9 + .5;
comp_79=`
comp_80=`uv1 = (uv-center)*aspect.xy;
comp_81=`
comp_82=`dist = MinDistB(uv);
comp_83=`bdist = lerp(dist,GetDistB(uv),.2);
comp_84=`dist_c = clamp(GetDistB2 (center),.1,.4); //center distance
comp_85=`
comp_86=`float3 uv2 = mul(float3((uv-.5)*MinDistB(uv),MinDistB(uv))/myzoom,RotMat)+CamPos;
comp_87=`glow = pow (sat(tex2D (sampler_noise_hq,.02*uv2).r-.6)*2,2);
comp_88=`//uv += .003*glow*(tex2D (sampler_noise_mq,uv*2+float2(0,time/4).xy-.5));
comp_89=`
comp_90=`float focus = sat(abs(GetDistB2(uv)-dist_c)*1+.2);
comp_91=`float struc = GetBlurX(uv,focus).r;
comp_92=`
comp_93=`glow = sat(1-exp(-(GetBlur1(uv).r))-.2);
comp_94=`q18 = 1;
comp_95=`ret = pow(struc,1) * (.2+(1-focus) *lerp(dist,1-dist,q18)) * (1+.5*sin(uv2));
comp_96=`ret = lerp(ret, float3(0,1,glow*3), glow);
comp_97=`
comp_98=`//distant light
comp_99=`//ret += pow(1-GetBlurX(uv,.8).b,3)*(.5+.5*slow_roam_cos) *q19;
comp_100=`
comp_101=`//Lamp
comp_102=`uv3 = uv1; 
comp_103=`lamp = saturate(1-4*length(uv3))*(struc)*saturate(1-2*bdist)*1.8;
comp_104=`ret += (1-lum(ret))*lamp;
comp_105=`ret = 1-exp((-2)*ret);
comp_106=`//ret = GetPixel(uv).r;
comp_107=`
comp_108=`// laser
comp_109=`
comp_110=`ret = ret + dots*(1+ret);
comp_111=`}
comp_112=`
comp_113=`//-------------------------------------------
comp_114=`//Written by martin
comp_115=`
