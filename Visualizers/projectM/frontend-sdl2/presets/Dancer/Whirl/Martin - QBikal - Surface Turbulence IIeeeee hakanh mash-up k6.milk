MILKDROP_PRESET_VERSION=201
PSVERSION=2
PSVERSION_WARP=2
PSVERSION_COMP=2
[preset00]
fRating=5.000000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=1
bAdditiveWaves=0
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=0
bMaximizeWaveColor=1
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=1.000
fWaveSmoothing=0.750
fWaveParam=0.000
fModWaveAlphaStart=0.750
fModWaveAlphaEnd=0.950
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.015
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=1.000
ib_size=0.260
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=4.950
mv_r=0.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=0.300
b3x=1.000
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=1
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=0.000
wavecode_0_g=0.000
wavecode_0_b=0.000
wavecode_0_a=0.100
wave_0_per_point1=//q1 = state;
wave_0_per_point2=//q2 = basstime;
wave_0_per_point3=
wave_0_per_point4=q1 = 0;
wave_0_per_point5=speed = bass_att*0.3;
wave_0_per_point6=v = sample*10000 + value2*bass*0.1;
wave_0_per_point7=
wave_0_per_point8=//state 0 elipse
wave_0_per_point9=xs = xs + sin(v*0.1 + sin(v)*0.1)*speed*atan(v*1.51);
wave_0_per_point10=ys = ys + sin(v*0.1 + cos(v)*0.1)*speed*atan(v);
wave_0_per_point11=
wave_0_per_point12=x = 0.5 + 0.5*sin(xs*0.1)*cos(time*1 + ys);
wave_0_per_point13=y = 0.5 + 0.5*sin(ys*0.1)*cos(time*1.1 + xs);
wave_0_per_point14=
wave_0_per_point15=
wave_0_per_point16=r = 0.5 + 0.5*sin(q1*0.22);
wave_0_per_point17=g = 0.5 + 0.5*sin(q1*0.307) + x;
wave_0_per_point18=//b = 0.4 + 0.4*sin(time*0.959);
wave_0_per_point19=
wave_0_per_point20=
wave_0_per_point21=xs = if(above(xs,1000),0 ,xs);
wave_0_per_point22=ys = if(above(ys,1000),0 ,ys);
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=1
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=1
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=1
wavecode_2_bUseDots=1
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=1
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=1
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=1
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
wave_3_per_point1=//apply zoom burst on beat
wave_3_per_point2=flag = above(q3,2);
wave_3_per_point3=//state zero is ready state
wave_3_per_point4=state = state + flag*equal(state,0);
wave_3_per_point5=
wave_3_per_point6=//upwards flight
wave_3_per_point7=yval = if(equal(state,0),0, yval);
wave_3_per_point8=yval = yval + 0.00004*equal(state,1);
wave_3_per_point9=ymax = if(equal(state,0),rand(100)*0.004,ymax);
wave_3_per_point10=
wave_3_per_point11=//hit apogee
wave_3_per_point12=state = if(above(yval,0.5+ymax),2,state);
wave_3_per_point13=
wave_3_per_point14=//reset variable
wave_3_per_point15=yval = if(equal(state,0),0, yval);
wave_3_per_point16=burst = if(equal(state,0),0.001,burst);
wave_3_per_point17=alphax = if(equal(state,0),1,alphax);
wave_3_per_point18=xdriftinc = if(equal(state,0),0,xdriftinc);
wave_3_per_point19=
wave_3_per_point20=burstspeed = if(equal(state,0),rand(10),burstspeed);
wave_3_per_point21=xdrift = if(equal(state,0),rand(20),xdrift);
wave_3_per_point22=//to get the numbers small enough have to use constants
wave_3_per_point23=xdriftinc = xdriftinc
wave_3_per_point24=+ equal(xdrift,0)*equal(state,1)*0.00002
wave_3_per_point25=+ equal(xdrift,1)*equal(state,1)*0.000018
wave_3_per_point26=+ equal(xdrift,2)*equal(state,1)*0.000016
wave_3_per_point27=+ equal(xdrift,3)*equal(state,1)*0.000014
wave_3_per_point28=+ equal(xdrift,4)*equal(state,1)*0.000012
wave_3_per_point29=+ equal(xdrift,5)*equal(state,1)*0.00001
wave_3_per_point30=+ equal(xdrift,6)*equal(state,1)*0.000008
wave_3_per_point31=+ equal(xdrift,7)*equal(state,1)*0.000006
wave_3_per_point32=+ equal(xdrift,8)*equal(state,1)*0.000004
wave_3_per_point33=+ equal(xdrift,9)*equal(state,1)*0.000002
wave_3_per_point34=+ equal(xdrift,11)*equal(state,1)*-0.000002
wave_3_per_point35=+ equal(xdrift,12)*equal(state,1)*-0.000004
wave_3_per_point36=+ equal(xdrift,13)*equal(state,1)*-0.000006
wave_3_per_point37=+ equal(xdrift,14)*equal(state,1)*-0.000008
wave_3_per_point38=+ equal(xdrift,15)*equal(state,1)*-0.00001
wave_3_per_point39=+ equal(xdrift,16)*equal(state,1)*-0.000012
wave_3_per_point40=+ equal(xdrift,17)*equal(state,1)*-0.000014
wave_3_per_point41=+ equal(xdrift,18)*equal(state,1)*-0.000016
wave_3_per_point42=+ equal(xdrift,19)*equal(state,1)*-0.000018;
wave_3_per_point43=
wave_3_per_point44=burst = burst
wave_3_per_point45=+ equal(burstspeed,0)*equal(state,2)*0.000024
wave_3_per_point46=+ equal(burstspeed,1)*equal(state,2)*0.000022
wave_3_per_point47=+ equal(burstspeed,2)*equal(state,2)*0.00002
wave_3_per_point48=+ equal(burstspeed,3)*equal(state,2)*0.000018
wave_3_per_point49=+ equal(burstspeed,4)*equal(state,2)*0.000016
wave_3_per_point50=+ equal(burstspeed,5)*equal(state,2)*0.000014
wave_3_per_point51=+ equal(burstspeed,6)*equal(state,2)*0.000012
wave_3_per_point52=+ equal(burstspeed,7)*equal(state,2)*0.00001
wave_3_per_point53=+ equal(burstspeed,8)*equal(state,2)*0.000008
wave_3_per_point54=+ equal(burstspeed,9)*equal(state,2)*0.000008;
wave_3_per_point55=
wave_3_per_point56=alphax = alphax - 0.00004*equal(state,2);
wave_3_per_point57=state = if(below(alphax,0),0,state);
wave_3_per_point58=
wave_3_per_point59=
wave_3_per_point60=s = sample*3.14*100;
wave_3_per_point61=ss = sample*6.28*1000;
wave_3_per_point62=
wave_3_per_point63=//draw torus
wave_3_per_point64=xs = (burst + 0.0001*cos(s))*cos(ss);
wave_3_per_point65=ys = (burst + 0.0001*cos(s))*sin(ss);
wave_3_per_point66=zs = 0.1*burst*sin(s);
wave_3_per_point67=
wave_3_per_point68=
wave_3_per_point69=//rotate x axis
wave_3_per_point70=angle = sin(-q1*0.035)*6.28;
wave_3_per_point71=yx = ys*cos(angle) - zs*sin(angle);
wave_3_per_point72=zx = ys*sin(angle) + zs*cos(angle);
wave_3_per_point73=xx = xs;
wave_3_per_point74=
wave_3_per_point75=//rotate y axis
wave_3_per_point76=angle2 = sin(-q1*0.03)*6.28;
wave_3_per_point77=xd = xx*cos(angle2) - zx*sin(angle2);
wave_3_per_point78=zd = xx*sin(angle2) + zx*cos(angle2);
wave_3_per_point79=yd = yx;
wave_3_per_point80=
wave_3_per_point81=//rotaye z axis
wave_3_per_point82=angle3 = sin(-q1*0.022)*6.28;
wave_3_per_point83=xn = xd*cos(angle3) - yd*sin(angle3);
wave_3_per_point84=yn = xd*sin(angle3) + yd*cos(angle3);
wave_3_per_point85=
wave_3_per_point86=zd = zd + 2;
wave_3_per_point87=
wave_3_per_point88=x = xn*zd*0.3 + 0.5;
wave_3_per_point89=y = yn*zd*0.3*1.2;
wave_3_per_point90=
wave_3_per_point91=
wave_3_per_point92=x = x + xdriftinc;
wave_3_per_point93=y = y + sin(yval*1.5) - 0.18;
wave_3_per_point94=
wave_3_per_point95=
wave_3_per_point96=r = 0.5 + 0.5*sin(q1*1.3 + x + x);
wave_3_per_point97=g = 0.5 + 0.5*sin(q1*1.1 + x + y);
wave_3_per_point98=b = 0.5 + 0.5*sin(q1*1.66 + y + y);
shapecode_0_enabled=0
shapecode_0_sides=4
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=2.66718
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=0.45112
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=0.000
shapecode_0_a=0.150
shapecode_0_r2=0.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=0.050
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.100
shapecode_1_enabled=0
shapecode_1_sides=100
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.350
shapecode_1_y=0.000
shapecode_1_rad=0.09959
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=0.42497
shapecode_1_r=0.000
shapecode_1_g=0.000
shapecode_1_b=1.000
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.000
shapecode_1_b2=0.000
shapecode_1_a2=1.000
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.000
shapecode_2_enabled=0
shapecode_2_sides=100
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.000
shapecode_2_rad=0.10201
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=1.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=0.000
shapecode_2_g2=1.000
shapecode_2_b2=0.000
shapecode_2_a2=1.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.000
shapecode_3_enabled=0
shapecode_3_sides=100
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.650
shapecode_3_y=0.000
shapecode_3_rad=0.10000
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=1.000
shapecode_3_g=1.000
shapecode_3_b=1.000
shapecode_3_a=1.000
shapecode_3_r2=1.000
shapecode_3_g2=0.000
shapecode_3_b2=1.000
shapecode_3_a2=1.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.100
per_frame_init_1=index = 0;
per_frame_init_2=loop (70000,
per_frame_init_3=  megabuf(index) = 0;
per_frame_init_4=  gmegabuf(index) = 0;
per_frame_init_5=  index = index + 1;
per_frame_init_6=);
per_frame_init_7=
per_frame_init_8=zang = 1;
per_frame_init_9=
per_frame_init_10=yang = 0;
per_frame_init_11=zang = 2;
per_frame_1=xlen = 45; ylen = 45; flen = 20; reg00 = xlen*ylen/4; reg01=reg00/4;
per_frame_2=dec_med = 1-0.06*30/fps; dec_slow = 1-0.02*30/fps; dec_f = pow (0.8, 30/fps);
per_frame_3=q30 = dec_slow;
per_frame_4=smooth = max(1,pow(6,fps/30)-2); // >= 0; Ausbreitungsgeschwindigkeit
per_frame_5=
per_frame_6=//"Classic" beat reaction
per_frame_7=cbeat = bass+mid+treb;
per_frame_8=decc = if (vol>cbeat,0.8,dec_med);
per_frame_9=vol  = vol * decc + (1-decc)*cbeat;
per_frame_10=avg = avg*dec_slow + cbeat*(1-dec_slow);
per_frame_11=is_beat = above(cbeat, 1.5*avg) * above (time, tc0+.2);
per_frame_12=tc0 = if (bor(is_beat, bd_bt),time,tc0);
per_frame_13=peak = if (is_beat,cbeat,peak*dec_med);
per_frame_14=
per_frame_15=
per_frame_16=//Gleichanteil entfernen und normalisieren
per_frame_17=ind = 0; sum = 0; amp = 0.01;
per_frame_18=loop (reg01,
per_frame_19=  sum = sum + gmegabuf(ind+30000)/(reg01);
per_frame_20=  amp = amp + pow(gmegabuf(ind+30000),2);
per_frame_21=  ind = ind+1;
per_frame_22=); 
per_frame_23=ind = 0; amp_= amp_*dec_med + (1-dec_med)*sqrt(amp)/reg01*600;
per_frame_24=loop (reg01,
per_frame_25=  megabuf(ind+30000)= (gmegabuf(ind+30000)-sum)/amp_;
per_frame_26=  ind = ind+1;
per_frame_27=);
per_frame_28= 
per_frame_29=// Spectrum of spectrum  !
per_frame_30=index2 = 0;
per_frame_31=loop(flen, //Frequency step
per_frame_32=  index=0; real= 0; imag = 0;
per_frame_33=  loop (flen,
per_frame_34=    real = real + cos(index/flen*6.28*index2)*megabuf(index*reg01/8+30002);
per_frame_35=    imag = imag + sin(index/flen*6.28*index2)*megabuf(index*reg01/8+30002);
per_frame_36=    index=index+1;
per_frame_37=  );
per_frame_38=  megabuf(10000+index2)= megabuf(10000+index2) * dec_f + real;
per_frame_39=  megabuf(15000+index2)= megabuf(15000+index2) * dec_f + imag;
per_frame_40=  index2 = index2+1;
per_frame_41= );
per_frame_42=
per_frame_43=//Anregung
per_frame_44=ind = 1;
per_frame_45=loop (flen/2,
per_frame_46=  cx = megabuf(10000+ind);
per_frame_47=  cy = megabuf(15000+ind);
per_frame_48=  yind = -1;
per_frame_49=  loop (3,
per_frame_50=    xind = -1;
per_frame_51=    loop (3,
per_frame_52=      ox = ((cx+.5)*xlen+xind)%xlen;
per_frame_53=      oy = ((cy+.5)*ylen+yind)%ylen;
per_frame_54=      amp = (cx*cx+cy*cy)*3;
per_frame_55=      megabuf (oy*ylen+ox) = megabuf (oy*ylen+ox) 
per_frame_56=                           - 2*30/fps*sqrt(amp)*above(amp,.02)/(1+xind*xind+yind*yind);
per_frame_57=      xind = xind+1;
per_frame_58=    );
per_frame_59=    yind = yind+1;
per_frame_60=  );
per_frame_61=  ind = ind+1;
per_frame_62=);
per_frame_63=
per_frame_64=//Simulation
per_frame_65=yind = 0;
per_frame_66=loop (ylen,
per_frame_67=  xind = 0;
per_frame_68=  loop (xlen,
per_frame_69=    megabuf(yind*ylen+xind+5000) = //megabuf ab 5000 ist nur Zwischenspeicher
per_frame_70=    dec_med*((gmegabuf(yind*ylen+(xind+1)%xlen) +
per_frame_71=    gmegabuf(yind*ylen+(xlen+xind-1)%xlen) + 
per_frame_72=    gmegabuf(((yind+1)%ylen)*ylen+xind) + 
per_frame_73=    gmegabuf(((yind+ylen-1)%ylen)*ylen+xind)
per_frame_74=    +gmegabuf(yind*ylen+xind)*smooth*4)/(2+2*smooth) - megabuf(yind*ylen+xind)); 
per_frame_75=    xind = xind+1;
per_frame_76=  );
per_frame_77=  yind = yind+1;
per_frame_78=);
per_frame_79=
per_frame_80=//Projektionsparameter
per_frame_81=
per_frame_82=bindex += is_beat;
per_frame_83=
per_frame_84=if (is_beat && (bindex%4==0), ran2 = (rand(100)-50)/50,0 );
per_frame_85=if (is_beat && (bindex%4==2), ran3 = (rand(100)-50)/50,0 );
per_frame_86=if (is_beat && (bindex%6==5), ran4 = (rand(100)-50)/50,0 );
per_frame_87=
per_frame_88=trelx += ran2/fps/18;
per_frame_89=trely += ran3/fps/2;
per_frame_90=trelz += ran4/fps/6;
per_frame_91=zang = 6*sin(trelz);
per_frame_92=xang = 6*sin(zang/5+trelx);
per_frame_93=yang = 6*sin(zang/3*0+trely);
per_frame_94=
per_frame_95=q1 = cos(xang);q2 = sin(xang);q3 = cos(yang);
per_frame_96=q4 = sin(yang);q5 = cos(zang);q6 = sin(zang);
per_frame_97=fov = 1;
per_frame_98=
per_frame_99=//Umkopieren und Projektion
per_frame_100=yind = 0;
per_frame_101=loop (ylen,
per_frame_102=  xind = 0;
per_frame_103=  loop (xlen,
per_frame_104=    ind = yind*ylen+xind;
per_frame_105=    megabuf(ind) = gmegabuf(ind); 
per_frame_106=    gmegabuf(ind) = megabuf(ind+5000); 
per_frame_107=    oz = yind - ylen/2; //#
per_frame_108=    ox = if(bnot(yind%2),xind,xlen-xind-1);
per_frame_109=    oy0a = (oy0+oy0a)/2.5;
per_frame_110=    oy = gmegabuf(yind*ylen+ox); oy0 = oy;
per_frame_111=    ox = ox - xlen/2;  
per_frame_112=    mx = ox*q5 - oy*q6;  my = ox*q6 + oy*q5;
per_frame_113=    ox = mx; oy = my;  
per_frame_114=    mx = ox*q3 + oz*q4;  mz = - ox*q4 + oz*q3;
per_frame_115=    ox = mx; oz = mz;  
per_frame_116=    my = oy*q1 - oz*q2;  mz = oy*q2 + oz*q1;
per_frame_117=    z0 = (10*sin(trelz*14));
per_frame_118=    oy = my; oz = mz+z0;
per_frame_119=    gmegabuf(10000+ind) = fov*ox/(oz+60*fov)+.5;
per_frame_120=    gmegabuf(15000+ind) = fov*oy/(oz+60*fov)+.5;
per_frame_121=    hell= max(min(.5+oy0/4,1),0.2); //Helligkeit
per_frame_122=    gmegabuf(20000+ind) = max(min(hell* (.5+ (oy0a-oy0)*0.1),1),0.1);
per_frame_123=    gmegabuf(25000+ind) = oy0/16+.5;;
per_frame_124=    xind = xind+1;
per_frame_125=  );
per_frame_126=  yind = yind+1;
per_frame_127=);
per_frame_128=
per_frame_129=q29 = 10/(z0+15);
per_frame_130=q32 = aspecty;
per_frame_131=q28 = min (vol/3-0.25,1);
per_frame_132=monitor = q28;
per_pixel_1=rot = 0; zoom = 1.1; warp = 0; dy = 0.02;
warp_1=`shader_body
warp_2=`{
warp_3=`    float1 d = 0.005;
warp_4=`    float1 dx = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).y;
warp_5=`    float1 dy = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).y;
warp_6=`    float2 my_uv = uv - float2(dx,dy)*0.01;
warp_7=`
warp_8=`
warp_9=`
warp_10=`    float2 v = 0.01;
warp_11=`    ret.y = tex2D( sampler_fc_main, my_uv-floor(my_uv)).y;
warp_12=`
warp_13=`    
warp_14=`    ret.y += (ret.y - GetBlur3(my_uv-floor(my_uv)).y)*.1;
warp_15=`    ret.y += 0.006-GetBlur3(uv-floor(uv)).x*5;
warp_16=`
warp_17=`    ret.y = lerp( ret.y, lum(ret).x, 0);
warp_18=`
warp_19=`//--------------------------------
warp_20=`
warp_21=`    d = 0.01;
warp_22=`    my_uv = float2(-dy,dx)*0.05;
warp_23=`
warp_24=`    dx = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).z;
warp_25=`    dy = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).z;
warp_26=`    my_uv += uv - float2(dx,dy)*0.005;
warp_27=`
warp_28=`
warp_29=`
warp_30=`    v = 0.01;
warp_31=`    ret.z =tex2D( sampler_fw_main, my_uv - floor(my_uv)).z;
warp_32=`
warp_33=`    
warp_34=`    ret.z += (ret.z - GetBlur3(my_uv-floor(my_uv)).z)*0.13;
warp_35=`    ret.z *= 0.95;
warp_36=`    ret.z += 0.03-GetBlur3(uv-floor(uv)).x - tex2D( sampler_main, my_uv - floor(my_uv)).y*0.05;
warp_37=`
warp_38=`    ret.x = tex2D( sampler_main, uv_orig).x - 0.3;
warp_39=`}
comp_1=`shader_body
comp_2=`{
comp_3=`    float2 d = texsize.zw*4;
comp_4=`    float3 dx = ( 2*GetBlur1(uv+float2(1,0)*d)-2*GetBlur1(uv-float2(1,0)*d) )*0.5;
comp_5=`    float3 dy = ( 2*GetBlur1(uv+float2(0,1)*d)-2*GetBlur1(uv-float2(0,1)*d) )*0.5;
comp_6=`    float2 uv_y = uv+float2(dx.y,dy.y)*0.5;
comp_7=`
comp_8=`ret = GetPixel(uv+float2(dx.y,dy.y)*0.03).y;
comp_9=`ret = lerp(float3(1,0.6,0),float3(0.,-0.5,0),(1-ret.y)*1-1  + length(0-uv_y));
comp_10=`
comp_11=`//ret = GetPixel(uv);
comp_12=`}
comp_13=`
