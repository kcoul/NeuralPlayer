MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=2
PSVERSION_COMP=3
[preset00]
fRating=5.000000
fGammaAdj=2.000
fDecay=0.980
fVideoEchoZoom=2.000
fVideoEchoAlpha=0.000
nVideoEchoOrientation=0
nWaveMode=0
bAdditiveWaves=0
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=0
bMaximizeWaveColor=1
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0.800
fWaveScale=1.000
fWaveSmoothing=0.750
fWaveParam=0.000
fModWaveAlphaStart=0.750
fModWaveAlphaEnd=0.950
fWarpAnimSpeed=1.000
fWarpScale=1.000
fZoomExponent=1.00000
fShader=0.000
zoom=1.00000
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=1.00000
sy=1.00000
wave_r=1.000
wave_g=1.000
wave_b=1.000
wave_x=0.500
wave_y=0.500
ob_size=0.010
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=0.000
ib_size=0.010
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=12.000
nMotionVectorsY=9.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.900
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
wavecode_0_enabled=0
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=0
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=1.000
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=1
shapecode_0_sides=4
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=1
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.26252
shapecode_0_ang=0.75398
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.00000
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=1.000
shapecode_0_r2=1.000
shapecode_0_g2=1.000
shapecode_0_b2=1.000
shapecode_0_a2=1.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shape_0_per_frame1=x=.5+.15*sin(time);
shape_0_per_frame2=y=.5+sign(sin(1.57+time))*sqrt(.0225-(x-.5)*(x-.5));
shapecode_1_enabled=1
shapecode_1_sides=100
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.40508
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=1.00000
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=1.000
shapecode_1_a=1.000
shapecode_1_r2=1.000
shapecode_1_g2=1.000
shapecode_1_b2=1.000
shapecode_1_a2=0.500
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=1.000
shape_1_per_frame1=x=.5+.2*sin(time);
shape_1_per_frame2=y=.5-sign(sin(1.57+time))*sqrt(.04-(x-.5)*(x-.5));
shape_1_per_frame3=textured=1.5*sin(.1*time);
shape_1_per_frame4=
shapecode_2_enabled=1
shapecode_2_sides=100
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.28428
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=1.000
shapecode_2_g=1.000
shapecode_2_b=1.000
shapecode_2_a=1.000
shapecode_2_r2=1.000
shapecode_2_g2=1.000
shapecode_2_b2=1.000
shapecode_2_a2=1.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.000
shape_2_per_frame1=x=.5+.3*sin(.2*time);
shape_2_per_frame2=y=.5+sign(sin(1.57+.2*time))*sqrt(.09-(x-.5)*(x-.5));
shapecode_3_enabled=1
shapecode_3_sides=100
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.02716
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=0.220
shapecode_3_g=0.440
shapecode_3_b=0.710
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=0.200
shapecode_3_b2=0.300
shapecode_3_a2=1.000
shapecode_3_border_r=0.900
shapecode_3_border_g=0.900
shapecode_3_border_b=1.000
shapecode_3_border_a=0.000
shape_3_per_frame1=x=.5+.4*sin(.21*time);
shape_3_per_frame2=y=.5+sign(sin(1.57+.21*time))*sqrt(.16-(x-.5)*(x-.5));
per_frame_1=warp = 0;
per_frame_2=wave_a = 0;
per_frame_3=
per_frame_4=//Here we define the rotation. The 'angle' is in the range of 0...2*Pi
per_frame_5=//We do this in the per-frame section because sin/cos functions cost a lot of shader operations:
per_frame_6=angle=3.14+3*sin(.02*time);
per_frame_7=q31 = sin(angle);
per_frame_8=q32 = cos(angle);
per_frame_9=
per_frame_10=monitor=angle;
warp_1=`sampler sampler_worms;
warp_2=`float3 color, mus;
warp_3=`float dx,dy;
warp_4=`shader_body {
warp_5=`float2 uv1 = (uv-.5) * aspect.xy;
warp_6=`
warp_7=`
warp_8=`float2 uv6 = uv1;
warp_9=`float2 d = normalize(uv1);
warp_10=`uv -= -.002*GetBlur1(uv)*d;
warp_11=`
warp_12=`
warp_13=`uv6 = .4*sin(uv1*34);
warp_14=`mus = .05/(length(uv6));
warp_15=`mus *= float3 (1,.8,.5) ;
warp_16=`
warp_17=`float3 blur = GetBlur2(frac(uv));
warp_18=`
warp_19=`float3 crisp= tex2D(sampler_main,uv);
warp_20=`
warp_21=`float3 ret1 = crisp - blur*.03 + .15*mus;
warp_22=`
warp_23=`ret = ret1*.95-.02;
warp_24=`
warp_25=`}
comp_1=`shader_body
comp_2=`{
comp_3=`
comp_4=`//As a base, sample the main sampler at normal uv coordinates and store as return value:
comp_5=`ret = tex2D(sampler_main, uv).xyz;
comp_6=`
comp_7=`//Define the translation in (x,y)-direction and multiply by texsize.zw to convert the length to pixels:
comp_8=`float2 shift = float2(0,0)*texsize.zw; 
comp_9=`
comp_10=`//Take the original uv coordinates as a starting point, store in second set of coordinates:
comp_11=`float2 uv2 = uv;
comp_12=`
comp_13=`//Start iterations...
comp_14=`int n = 1;
comp_15=`while (n<=10) {
comp_16=`
comp_17=`//First step: put origin in center;
comp_18=`uv2 = uv2-.5;
comp_19=`
comp_20=`//Next, rotate by a factor we set in the per-frame equations - q32 is cos(angle) and q31 is sin(angle): 
comp_21=`uv2 = float2((uv2.x)*q32 - (uv2.y) * q31,(uv2.x)* q31 + (uv2.y) * q32)+.5;
comp_22=`
comp_23=`//Then, shift uv coordinates n times - see the step after the next as to why:
comp_24=`uv2 += n*shift;
comp_25=`
comp_26=`//Sample the main sampler at our new uv2 coordinates, 
comp_27=`//deduct the result from the current return value, 
comp_28=`//store in ret as absolute (difference) value:
comp_29=`ret = abs(ret-GetPixel(uv2));
comp_30=`
comp_31=`//Remove the shift so we won't rotate it with our coordinates in the next iteration:
comp_32=`uv2 -= n*shift;
comp_33=`
comp_34=`//Iteration +1
comp_35=`n++;
comp_36=`}
comp_37=`
comp_38=`}
