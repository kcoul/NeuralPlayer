MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=5.000000
fGammaAdj=1.000
fDecay=0.980
fVideoEchoZoom=2.000
fVideoEchoAlpha=0.000
nVideoEchoOrientation=0
nWaveMode=0
bAdditiveWaves=0
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=0
bMaximizeWaveColor=1
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0.004
fWaveScale=0.037
fWaveSmoothing=0.000
fWaveParam=-0.440
fModWaveAlphaStart=1.000
fModWaveAlphaEnd=1.000
fWarpAnimSpeed=0.803
fWarpScale=1.220
fZoomExponent=1.50374
fShader=0.000
zoom=1.00000
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.31218
sx=1.00000
sy=1.00000
wave_r=1.000
wave_g=1.000
wave_b=1.000
wave_x=0.500
wave_y=0.040
ob_size=0.005
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=1.000
ib_size=0.000
ib_r=1.000
ib_g=0.000
ib_b=0.750
ib_a=1.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.000
mv_r=1.000
mv_g=1.000
mv_b=0.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=452
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=1
wavecode_0_scaling=2.44415
wavecode_0_smoothing=0.00000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=0.570
wave_0_init1=t2 = 0;
wave_0_init2=t3 = 0;
wave_0_init3=t4 = 0;
wave_0_init4=cl = 0;
wave_0_per_frame1=t1 = 0;
wave_0_per_frame2=t2 = 0;
wave_0_per_point1=ppo = 9;
wave_0_per_point2=index = t2*q32;
wave_0_per_point3=sample = t1 % ppo;
wave_0_per_point4=
wave_0_per_point5=nindex = gmegabuf(index + 10)*q32; // the next neighbor's index
wave_0_per_point6=nnindex = gmegabuf(index + 11)*q32; // the next neighbor's index
wave_0_per_point7=nnnindex = gmegabuf(index + 12)*q32; // the next neighbor's index
wave_0_per_point8=
wave_0_per_point9=x = gmegabuf(index);
wave_0_per_point10=y = gmegabuf(index+1);
wave_0_per_point11=r = 0.5 + gmegabuf(index+5)*0.5;
wave_0_per_point12=g = 0.5 + gmegabuf(index+6)*0.5;
wave_0_per_point13=b = 0.5 + gmegabuf(index+7)*0.5;
wave_0_per_point14=
wave_0_per_point15=nx = gmegabuf(nindex);
wave_0_per_point16=ny = gmegabuf(nindex+1);
wave_0_per_point17=nnx = gmegabuf(nnindex);
wave_0_per_point18=nny = gmegabuf(nnindex+1);
wave_0_per_point19=nnnx = gmegabuf(nnnindex);
wave_0_per_point20=nnny = gmegabuf(nnnindex+1);
wave_0_per_point21=
wave_0_per_point22=x = 0.5 + (x-0.5)/q2;
wave_0_per_point23=y = 0.5 + (y-0.5)/q2;
wave_0_per_point24=nx = 0.5 + (nx-0.5)/q2;
wave_0_per_point25=ny = 0.5 + (ny-0.5)/q2;
wave_0_per_point26=nnx = 0.5 + (nnx-0.5)/q2;
wave_0_per_point27=nny = 0.5 + (nny-0.5)/q2;
wave_0_per_point28=nnnx = 0.5 + (nnnx-0.5)/q2;
wave_0_per_point29=nnny = 0.5 + (nnny-0.5)/q2;
wave_0_per_point30=
wave_0_per_point31=x = if( equal(sample,2), nx, x);
wave_0_per_point32=y = if( equal(sample,2), ny, y);
wave_0_per_point33=x = if( equal(sample,4), nnx, x);
wave_0_per_point34=y = if( equal(sample,4), nny, y);
wave_0_per_point35=x = if( equal(sample,6), nnnx, x);
wave_0_per_point36=y = if( equal(sample,6), nnny, y);
wave_0_per_point37=
wave_0_per_point38=a = above(sample,1)*below(sample,ppo-1)*a;
wave_0_per_point39=
wave_0_per_point40=t1 = t1 + 1;
wave_0_per_point41=t2 = if( equal(t1%ppo,0), t2 +1, t2);
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=7.75180
wavecode_1_smoothing=0.00000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=0.210
wave_1_init1=t2 = 0;
wave_1_init2=t3 = 0;
wave_1_init3=t4 = 0;
wave_1_init4=cl = 0;
wave_1_per_frame1=t8 = 1;
wave_1_per_frame2=
wave_1_per_frame3=t1 = 0.5;
wave_1_per_frame4=t2 = 0.9;
wave_1_per_point1=d = d*0.85 + (value1)*1;
wave_1_per_point2=
wave_1_per_point3=x = 0.5 + d*sample*(1-sample);
wave_1_per_point4=y = 0.9 - sample*0.8;
wavecode_2_enabled=0
wavecode_2_samples=280
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=1
wavecode_2_scaling=5.92556
wavecode_2_smoothing=0.00000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=0.500
wave_2_per_frame1=t1 = 0;
wave_2_per_frame2=t2 = 0;
wave_2_per_frame3=
wave_2_per_frame4=
wave_2_per_point1=// q32 number of attributes
wave_2_per_point2=// q31 number of objects
wave_2_per_point3=
wave_2_per_point4=ppo = 7; // number of points used for each object
wave_2_per_point5=index = t2*q32; // object's index
wave_2_per_point6=
wave_2_per_point7=x = 0.5 +(gmegabuf(index)-0.5)/q2;
wave_2_per_point8=y = 0.5 + (gmegabuf(index+1)-0.5)/q2;
wave_2_per_point9=
wave_2_per_point10=// collecting pairs of index and distance to the current object in a local buffer
wave_2_per_point11=i = 0;
wave_2_per_point12=j = 0; 
wave_2_per_point13=loop(q31,
wave_2_per_point14=     d = sqrt( sqr(gmegabuf(index)-gmegabuf(i)) + sqr(gmegabuf(index+1)-gmegabuf(i+1)));
wave_2_per_point15=     d = if( equal(d,0), 1, d);
wave_2_per_point16=     megabuf(j)   = i; // store index/distance pairs
wave_2_per_point17=     megabuf(j+1) = d; 
wave_2_per_point18=     j = j+2;
wave_2_per_point19=     i = i+q32;
wave_2_per_point20=    );
wave_2_per_point21=
wave_2_per_point22=// sort that buffer, but only 5 cycles for the 5 nearest objects
wave_2_per_point23=i = 0;
wave_2_per_point24=loop( 5,
wave_2_per_point25=      j = i;
wave_2_per_point26=      smallestfind = 100;
wave_2_per_point27=      findindex = 0;
wave_2_per_point28=      loop( q31-j,
wave_2_per_point29=            distance =megabuf(j*2+1);
wave_2_per_point30=            smaller = above( smallestfind, distance);
wave_2_per_point31=            smallestfind = if(smaller, distance, smallestfind);
wave_2_per_point32=            findindex = if( smaller, j*2, findindex);
wave_2_per_point33=            j = j + 1;
wave_2_per_point34=          );
wave_2_per_point35=
wave_2_per_point36=      // now that the nearest object was found, swap it to the buffer's top
wave_2_per_point37=
wave_2_per_point38=      j = megabuf(i);
wave_2_per_point39=      d = megabuf(i+1);
wave_2_per_point40=
wave_2_per_point41=      megabuf(i)   = megabuf(findindex);
wave_2_per_point42=      megabuf(i+1) = megabuf(findindex+1);
wave_2_per_point43=      megabuf(findindex)   = j;
wave_2_per_point44=      megabuf(findindex+1) = d;
wave_2_per_point45=
wave_2_per_point46=      i = i+1;
wave_2_per_point47=    );
wave_2_per_point48=
wave_2_per_point49=
wave_2_per_point50=index2 = (t1)%ppo;
wave_2_per_point51=i = megabuf(index2-2);
wave_2_per_point52=xx = 0.5 + (gmegabuf(i)-0.5)/q2;
wave_2_per_point53=yy = 0.5 + (gmegabuf(i+1)-0.5)/q2;
wave_2_per_point54=w = asin(1)*index2/4;
wave_2_per_point55=//xx = x + sin(w)*0.1;
wave_2_per_point56=//yy = y + cos(w)*0.1;
wave_2_per_point57=x = if( equal(index2%2,0), x, xx);
wave_2_per_point58=y = if( equal(index2%2,0), y, yy);
wave_2_per_point59=
wave_2_per_point60=
wave_2_per_point61=a = below(index2,ppo-1)*above(index2,1)*a;
wave_2_per_point62=r = 0.5 + gmegabuf(index + 5)*0.5;
wave_2_per_point63=g = 0.5 + gmegabuf(index + 6)*0.5;
wave_2_per_point64=b = 0.5 + gmegabuf(index + 7)*0.5;
wave_2_per_point65=
wave_2_per_point66=
wave_2_per_point67=t2 = t2 + equal(t1%ppo,ppo-1);
wave_2_per_point68=t1 = t1 + 1;
wave_2_per_point69=
wave_2_per_point70=//a = above(t1,128);
wavecode_3_enabled=0
wavecode_3_samples=15
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=1
wavecode_3_scaling=5.92556
wavecode_3_smoothing=0.00000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=0.400
wave_3_init1=t2 = 0
wave_3_per_frame1=t1 = 0;
wave_3_per_frame2=t2 = 0;
wave_3_per_frame3=t3 = 0;
wave_3_per_frame4=t4 = 0.5;
wave_3_per_point1=ppo = 5;
wave_3_per_point2=
wave_3_per_point3=index = t2*q32;
wave_3_per_point4=neighbor = 1;
wave_3_per_point5=neighbor = gmegabuf(index+10+neighbor);
wave_3_per_point6=x = 0.5 + (gmegabuf(index)-0.5)/q2;
wave_3_per_point7=y = 0.5 + (gmegabuf(index+1)-0.5)/q2;
wave_3_per_point8=xx = 0.5 + ( gmegabuf(neighbor) - 0.5)/q2;
wave_3_per_point9=yy = 0.5 + ( gmegabuf(neighbor+1) - 0.5)/q2;
wave_3_per_point10=
wave_3_per_point11=x = if( equal(t1 % 2, 0), x, xx);
wave_3_per_point12=y = if( equal(t1 % 2, 0), y, yx);
wave_3_per_point13=
wave_3_per_point14=
wave_3_per_point15=t2 = t2 + equal(t1,ppo);
wave_3_per_point16=t1 = if(above(t1,ppo),t1-ppo,t1) + 1;
wave_3_per_point17=
shapecode_0_enabled=1
shapecode_0_sides=100
shapecode_0_additive=1
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=100
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.01000
shapecode_0_ang=3.20442
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=6.23873
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=0.620
shapecode_0_r2=1.000
shapecode_0_g2=1.000
shapecode_0_b2=1.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=1.000
shape_0_per_frame1=index = instance*q32;
shape_0_per_frame2=
shape_0_per_frame3=x = gmegabuf(index);
shape_0_per_frame4=y = gmegabuf(index+1);
shape_0_per_frame5=
shape_0_per_frame6=rad = gmegabuf(index+4)*2;
shape_0_per_frame7=
shape_0_per_frame8=r = gmegabuf(index+5);
shape_0_per_frame9=g = gmegabuf(index+6);
shape_0_per_frame10=b = gmegabuf(index+7);
shape_0_per_frame11=
shape_0_per_frame12=r2 = r; g2 = g; b2 = b;
shape_0_per_frame13=
shape_0_per_frame14=
shape_0_per_frame15=x = 0.5 + (x-0.5)/q2;
shapecode_1_enabled=0
shapecode_1_sides=100
shapecode_1_additive=1
shapecode_1_thickOutline=1
shapecode_1_textured=1
shapecode_1_num_inst=1
shapecode_1_x=0.740
shapecode_1_y=0.270
shapecode_1_rad=0.64927
shapecode_1_ang=3.83274
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=0.81948
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.000
shapecode_1_b2=0.000
shapecode_1_a2=1.000
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.000
shape_1_init1=vx = 0
shapecode_2_enabled=0
shapecode_2_sides=100
shapecode_2_additive=1
shapecode_2_thickOutline=1
shapecode_2_textured=1
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.33000
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=0.73458
shapecode_2_r=0.000
shapecode_2_g=1.000
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=0.000
shapecode_2_g2=1.000
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.000
shape_2_init1=vx = 0
shapecode_3_enabled=0
shapecode_3_sides=64
shapecode_3_additive=1
shapecode_3_thickOutline=1
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.16283
shapecode_3_ang=0.75398
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.73458
shapecode_3_r=0.000
shapecode_3_g=1.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=1.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.000
shape_3_init1=vx = 0
per_frame_init_1=// clear buffer
per_frame_init_2=i = 0; loop(1024*1024, gmegabuf(i) = 0; i = i+1);
per_frame_init_3=
per_frame_init_4=count = 50;
per_frame_init_5=attributes = 16;
per_frame_init_6=
per_frame_init_7=minradius = 0.005;
per_frame_init_8=maxradius = 0.045;
per_frame_init_9=v = 0.005;
per_frame_init_10=
per_frame_init_11=// randomize initial coordinates
per_frame_init_12=index = 0;
per_frame_init_13=loop(count, 
per_frame_init_14=     gmegabuf(index*attributes) = rand(1000)/1000;
per_frame_init_15=     gmegabuf(index*attributes+1) = rand(1000)/1000;
per_frame_init_16=     gmegabuf(index*attributes+2) = v*(rand(1000)/1000-0.5);
per_frame_init_17=     gmegabuf(index*attributes+3) = v*(rand(1000)/1000-0.5);
per_frame_init_18=     gmegabuf(index*attributes+4) = minradius + (maxradius-minradius)*(index+1)/count;
per_frame_init_19=     gmegabuf(index*attributes+5) = rand(1000)/1000;
per_frame_init_20=     gmegabuf(index*attributes+6) = rand(1000)/1000;
per_frame_init_21=     gmegabuf(index*attributes+7) = rand(1000)/1000;
per_frame_init_22=     gmegabuf(index*attributes+8) = sqr(gmegabuf(index*attributes+4)) ;
per_frame_init_23=     index = index+1;
per_frame_init_24=    );
per_frame_init_25=
per_frame_init_26=q31 = count;
per_frame_init_27=q32 = attributes;
per_frame_init_28=
per_frame_init_29=// 0, x
per_frame_init_30=// 1, y
per_frame_init_31=// 2, vx
per_frame_init_32=// 3, vy
per_frame_init_33=// 4, radius
per_frame_init_34=// 5, red
per_frame_init_35=// 6, green
per_frame_init_36=// 7, blue
per_frame_init_37=// 8, mass
per_frame_1=chng=sin(time*.5);
per_frame_2=cthr=.9999;
per_frame_3=mq21=if(above(chng,cthr),rand(3),mq21);
per_frame_4=mq22=if(above(chng,cthr),rand(3),mq22);
per_frame_5=mq23=if(above(chng,cthr),rand(3),mq23);
per_frame_6=mq24=if(above(chng,cthr),rand(2),mq24);
per_frame_7=mq25=if(above(chng,cthr),rand(2),mq25);
per_frame_8=mq26=if(above(chng,cthr),rand(2),mq26);
per_frame_9=mq27=if(above(chng,cthr),rand(1),mq27);
per_frame_10=mq28=if(above(chng,cthr),rand(1),mq28);
per_frame_11=mq29=if(above(chng,cthr),rand(1)*.3,mq29);
per_frame_12=mq30=if(above(chng,cthr),rand(1)*.3,mq30);
per_frame_13=monitor=chng;
per_frame_14=q21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;
per_frame_15=q27=mq27;q28=mq28;q29=mq29;q30=mq30;
per_frame_16=
per_frame_17=monitor=mq1;
per_frame_18=warp = 0;
per_frame_19=zoom = 1;
per_frame_20=
per_frame_21=gravity = 0.05/fps*0;
per_frame_22=dampening = 1;
per_frame_23=pi2 = asin(1);
per_frame_24=
per_frame_25=
per_frame_26=nn = 3; // number of nearest neighbors to search, reduce if not needed!
per_frame_27=        // collision detection is based on nearest neighbors now, so keep it at least at 1.
per_frame_28=
per_frame_29=check = 2; // how many neighbors will be checked for a possible collision. may not be above nn.
per_frame_30=           // raise to avoid odd behavior in clusters of touching balls.
per_frame_31=
per_frame_32=index = 0; index2 = 0;  w = (aspecty-aspectx)/2;
per_frame_33=loop(count, 
per_frame_34=     // simple physics: adding velocity vectors, applying gravity + bouncing off borders
per_frame_35=     gmegabuf(index*attributes+1) = gmegabuf(index*attributes+1) + gmegabuf(index*attributes+3);
per_frame_36=     gmegabuf(index*attributes) = gmegabuf(index*attributes) + gmegabuf(index*attributes+2);
per_frame_37=     gmegabuf(index*attributes+2) = if( below( gmegabuf(index*attributes), 0-w+gmegabuf(index*attributes+4)),
per_frame_38=                                        abs(gmegabuf(index*attributes+2))*dampening,
per_frame_39=                                        gmegabuf(index*attributes+2) ); 
per_frame_40=     gmegabuf(index*attributes+2) = if( above( gmegabuf(index*attributes), 1+w-gmegabuf(index*attributes+4)),
per_frame_41=                                        -abs(gmegabuf(index*attributes+2))*dampening,
per_frame_42=                                        gmegabuf(index*attributes+2) ); 
per_frame_43=     gmegabuf(index*attributes+3) = gmegabuf(index*attributes+3) - gravity;
per_frame_44=     gmegabuf(index*attributes+3) = if( below( gmegabuf(index*attributes+1), gmegabuf(index*attributes+4)),
per_frame_45=                                        abs(gmegabuf(index*attributes+3))*dampening,
per_frame_46=                                        gmegabuf(index*attributes+3); );
per_frame_47=     gmegabuf(index*attributes+3) = if( above( gmegabuf(index*attributes+1), 1-gmegabuf(index*attributes+4)),
per_frame_48=                                        -abs(gmegabuf(index*attributes+3))*dampening,
per_frame_49=                                        gmegabuf(index*attributes+3); );
per_frame_50=     i = 0; j = 0; // collecting pairs of index and distance to the current object in a local buffer
per_frame_51=     loop( count,
per_frame_52=           d = sqrt( sqr(gmegabuf(index*attributes)-gmegabuf(i*attributes)) + sqr(gmegabuf(index*attributes+1)-gmegabuf(i*attributes+1)));
per_frame_53=           d = if( equal(d,0), 10, d); // leave out comparison with itself (where d == 0, set d to a high value)
per_frame_54=           d = d - (gmegabuf(index*attributes+4)+gmegabuf(i*attributes+4))*0.5; // subtract radius (surface to surface distance)
per_frame_55=           megabuf(j)   = i; // store index/distance pairs
per_frame_56=           megabuf(j+1) = d; 
per_frame_57=           j = j+2;
per_frame_58=           i = i+1; );
per_frame_59=     i = 0; // sort that buffer, but only as many cycles as needed for the _nn_ nearest neighbors
per_frame_60=     loop( nn,
per_frame_61=           j = i; smallestfind = 10; findindex = -1;
per_frame_62=           loop( count-j,
per_frame_63=                 distance =megabuf(j*2+1);
per_frame_64=                 smaller = above( smallestfind, distance);
per_frame_65=                 smallestfind = if(smaller, distance, smallestfind);
per_frame_66=                 findindex = if( smaller, j*2, findindex);
per_frame_67=                 j = j + 1; );
per_frame_68=           j = megabuf(i*2); d = megabuf(i*2+1);
per_frame_69=           megabuf(i*2)   = megabuf(findindex);
per_frame_70=           megabuf(i*2+1) = megabuf(findindex+1);
per_frame_71=           megabuf(findindex)   = j;
per_frame_72=           megabuf(findindex+1) = d;
per_frame_73=           i = i+1;
per_frame_74=         );
per_frame_75=     i = 0; // storing the indexes of the nearest neighbors in the attributes beginning from 10
per_frame_76=     loop( nn,
per_frame_77=           gmegabuf(index*attributes + 10 + i) = megabuf(i*2);
per_frame_78=           i = i +1;
per_frame_79=         );
per_frame_80=     i = 0; // collision detection and impulse transmission below
per_frame_81=     loop( check,
per_frame_82=           index2 = megabuf(i);
per_frame_83=           hit = below( sqrt( sqr( gmegabuf(index*attributes) - gmegabuf(index2*attributes)) +
per_frame_84=                              sqr( gmegabuf(index*attributes+1) - gmegabuf(index2*attributes+1))),
per_frame_85=                        gmegabuf(index*attributes + 4) + gmegabuf(index2*attributes + 4)
per_frame_86=                      )
per_frame_87=                 *
per_frame_88=                 above( sqrt( sqr( gmegabuf(index*attributes)   - gmegabuf(index2*attributes))+
per_frame_89=                        sqr( gmegabuf(index*attributes+1) - gmegabuf(index2*attributes+1))),
per_frame_90=                        sqrt( sqr( gmegabuf(index*attributes+0) - gmegabuf(index2*attributes+0)+ 
per_frame_91=                                   gmegabuf(index*attributes+2) - gmegabuf(index2*attributes+2))+
per_frame_92=                              sqr( gmegabuf(index*attributes+1) - gmegabuf(index2*attributes+1)+
per_frame_93=                                   gmegabuf(index*attributes+3) - gmegabuf(index2*attributes+3)) ) );
per_frame_94=           ref_ang = atan2( gmegabuf(index2*attributes)-gmegabuf(index*attributes), // calculating the angle of the common tangent
per_frame_95=                            gmegabuf(index2*attributes + 1)-gmegabuf(index*attributes + 1)) + pi2;
per_frame_96=           v1 = sqrt(sqr( gmegabuf(index*attributes + 2)) + sqr( gmegabuf(index*attributes + 3))); // velocity of object1
per_frame_97=           v2 = sqrt(sqr( gmegabuf(index2*attributes + 2)) + sqr( gmegabuf(index2*attributes + 3)));  // velocity of object2
per_frame_98=           w1 = atan2( gmegabuf(index*attributes + 2), gmegabuf(index*attributes + 3));   // object1 motion angle
per_frame_99=           w2 = atan2( gmegabuf(index2*attributes + 2), gmegabuf(index2*attributes + 3)); // object2 motion angle
per_frame_100=           m1 = gmegabuf(index*attributes + 8); m2 = gmegabuf(index2*attributes + 8);
per_frame_101=           vv1 = ((m1-m2)*v1 + 2*m2*v2)/(m1+m2); vv2 = ((m2-m1)*v2 + 2*m1*v1)/(m1+m2);
per_frame_102=           gmegabuf( index*attributes + 2) = if( hit,sin(ref_ang)*v1*cos(w1-ref_ang) + sin(ref_ang+pi2)*vv1*cos(w2-ref_ang-pi2),
per_frame_103=                                                  gmegabuf( index*attributes + 2) );
per_frame_104=           gmegabuf( index*attributes + 3) = if( hit, cos(ref_ang)*v1*cos(w1-ref_ang) + cos(ref_ang+pi2)*vv1*cos(w2-ref_ang-pi2),
per_frame_105=                                                 gmegabuf( index*attributes + 3) );
per_frame_106=           gmegabuf( index2*attributes + 2) = if( hit, sin(ref_ang)*v2*cos(w2-ref_ang) + sin(ref_ang+pi2)*vv2*cos(w1-ref_ang-pi2),
per_frame_107=                                                  gmegabuf( index2*attributes + 2) );
per_frame_108=           gmegabuf( index2*attributes + 3) = if( hit, cos(ref_ang)*v2*cos(w2-ref_ang) + cos(ref_ang+pi2)*vv2*cos(w1-ref_ang-pi2),
per_frame_109=                                                  gmegabuf( index2*attributes + 3) );
per_frame_110=           i=i+2;
per_frame_111=         );
per_frame_112=     index = index+1;
per_frame_113=    );
per_frame_114=q1 = aspectx;
per_frame_115=q2 = aspecty;
warp_1=`shader_body
warp_2=`{
warp_3=`    float2 d = texsize.zw*12;
warp_4=`    float2 uv_y = uv;//0.5 + (uv_orig-0.5)*1.00 + float2(0,-0.8)*texsize.zw*0;
warp_5=`    float3 dx = ( GetBlur1(uv_y + float2(1,0)*d) - GetBlur1(uv_y-float2(1,0)*d) );
warp_6=`    float3 dy = ( GetBlur1(uv_y + float2(0,1)*d) - GetBlur1(uv_y-float2(0,1)*d) );
warp_7=`    uv_y = uv_y - float2(dx.y,dy.y)*texsize.zw;
warp_8=`
warp_9=`    float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw*0.8 + rand_frame.xy;
warp_10=`    float2 uv_bg = uv_orig -(uv_orig-uv)*0.4 + float2(dx.x,dy.x)*texsize.zw*2 + (tex2D(sampler_noise_lq, dither_uv).xy-0.5)*texsize.zw*4;
warp_11=`
warp_12=`ret.x = GetPixel(uv_bg).x - (GetPixel(uv_bg).x - GetBlur3(uv_bg).x)*0.02 - 0.008 + 
warp_13=`(tex2D(sampler_noise_lq, dither_uv).x-0.5)*0.1;
warp_14=`
warp_15=`
warp_16=`   ret.y = tex2D( sampler_main, uv_y ).y;
warp_17=`   ret.y += (ret.y - GetBlur1(uv).y)*0.2 - 0.004;
warp_18=`   dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;
warp_19=`
warp_20=`uv_bg = uv_orig -(uv_orig-uv)*2 + (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)*texsize.zw*3;
warp_21=`ret.z = GetPixel(uv_bg).z - 0.012;
warp_22=`ret-=roam_sin*roam_cos.wzy*.2;
warp_23=`float4 noise9 = tex3D(sampler_noisevol_hq, 
warp_24=`                      ((uv_y.xyy*q27
warp_25=`                       )*texsize.xyy*texsize_noisevol_hq.zww
warp_26=`                      ).xyz*
warp_27=`                      float3(1,1,0)*0.05 + 
warp_28=`                      time*float3(0,0,1)*q29
warp_29=`                     );
warp_30=`if(ret.x> q21*roam_cos.y && ret.x<= q24*roam_sin.x)ret.y -= (noise9).x*.5; 
warp_31=`if(ret.y> q22*roam_sin.x && ret.y<= q25*roam_cos.x)ret.z -= (noise9).y*.5; 
warp_32=`if(ret.z> q23*roam_cos.x && ret.z<= q26*roam_sin.y)ret.x -= (noise9).z*.5; 
warp_33=`}
comp_1=`sampler sampler_rand00;
comp_2=`shader_body
comp_3=`{
comp_4=`ret=GetPixel(uv);
comp_5=`float4 noise9 = tex3D(sampler_noisevol_hq, 
comp_6=`                      ((uv.xyy*q28
comp_7=`                       )*texsize.xyy*texsize_noisevol_hq.zww
comp_8=`                      ).xyz*
comp_9=`                      float3(1,1,0)*0.05 + 
comp_10=`                      time*float3(0,0,1)*q30 
comp_11=`                     );
comp_12=`if(ret.x> q26*roam_cos.y && ret.x<= q23*roam_sin.x)ret.z -= (noise9).x*.5; 
comp_13=`if(ret.y> q25*roam_sin.x && ret.y<= q22*roam_cos.x)ret.x -= (noise9).y*.5; 
comp_14=`if(ret.z> q24*roam_cos.x && ret.z<= q21*roam_sin.y)ret.y -= (noise9).z*.5; 
comp_15=`
comp_16=`ret *= tex2D(sampler_rand00, frac(1-GetBlur2(uv).yx*0.6 + time*float2(0.057,.036)))
comp_17=`*(1+GetPixel(uv).x + GetBlur1(uv).y)*0.4;
comp_18=`
comp_19=`}
