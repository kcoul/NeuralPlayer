MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=5.000000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=4
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.527
fWaveSmoothing=0.450
fWaveParam=0.000
fModWaveAlphaStart=0.000
fModWaveAlphaEnd=1.320
fWarpAnimSpeed=0.269
fWarpScale=1.615
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.05013
sx=0.99990
sy=1.00000
wave_r=0.800
wave_g=0.490
wave_b=1.000
wave_x=0.500
wave_y=0.500
ob_size=0.015
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=1.000
ib_size=0.260
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=1.850
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=0.300
b3x=1.000
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=506
wavecode_0_sep=116
wavecode_0_bSpectrum=1
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=0
wavecode_0_scaling=1.07408
wavecode_0_smoothing=0.00000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=0.700
wave_0_per_point1=
wave_0_per_point2=n = int((reg00+.5)*sample);
wave_0_per_point3=
wave_0_per_point4=m = 30001+n/(reg00/reg01);
wave_0_per_point5=gmegabuf(m) = (value1+value2);
wave_0_per_point6=
wave_0_per_point7=x = gmegabuf(10000+n);
wave_0_per_point8=y = gmegabuf(15000+n);
wave_0_per_point9=a = gmegabuf(20000+n);
wave_0_per_point10=
wave_0_per_point11=b = min(max(gmegabuf(25000+n),0),1);
wave_0_per_point12=r = 1-b;  
wave_0_per_point13=g = 0.5;
wavecode_1_enabled=1
wavecode_1_samples=506
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=0
wavecode_1_scaling=0.89152
wavecode_1_smoothing=0.82000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wave_1_per_point1=n = int((reg00+.5)*sample) +reg00;
wave_1_per_point2=
wave_1_per_point3=x = gmegabuf(10000+n);
wave_1_per_point4=y = gmegabuf(15000+n);
wave_1_per_point5=a = gmegabuf(20000+n);
wave_1_per_point6=
wave_1_per_point7=b = min(max(gmegabuf(25000+n),0),1);
wave_1_per_point8=r = 1-b;  
wave_1_per_point9=g = 0.5;
wave_1_per_point10=
wavecode_2_enabled=1
wavecode_2_samples=506
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=0
wavecode_2_scaling=0.89152
wavecode_2_smoothing=0.82000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wave_2_per_point1=n = int((reg00+.5)*sample)+2*reg00;
wave_2_per_point2=
wave_2_per_point3=
wave_2_per_point4=x = gmegabuf(10000+n);
wave_2_per_point5=y = gmegabuf(15000+n);
wave_2_per_point6=a = gmegabuf(20000+n);
wave_2_per_point7=
wave_2_per_point8=b = min(max(gmegabuf(25000+n),0),1);
wave_2_per_point9=r = 1-b;  
wave_2_per_point10=g = 0.5;
wave_2_per_point11=
wavecode_3_enabled=1
wavecode_3_samples=506
wavecode_3_sep=0
wavecode_3_bSpectrum=1
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
wave_3_per_point1=n = int((reg00-.5)*sample)+3*reg00;
wave_3_per_point2=
wave_3_per_point3=
wave_3_per_point4=x = gmegabuf(10000+n);
wave_3_per_point5=y = gmegabuf(15000+n);
wave_3_per_point6=a = gmegabuf(20000+n);
wave_3_per_point7=
wave_3_per_point8=b = min(max(gmegabuf(25000+n),0),1);
wave_3_per_point9=r = 1-b;  
wave_3_per_point10=g = 0.5;
shapecode_0_enabled=0
shapecode_0_sides=4
shapecode_0_additive=1
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=2.37185
shapecode_0_ang=0.00000
shapecode_0_tex_ang=1.57080
shapecode_0_tex_zoom=0.93101
shapecode_0_r=0.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=0.400
shapecode_0_r2=0.000
shapecode_0_g2=1.000
shapecode_0_b2=0.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=0.000
shapecode_0_border_a=0.000
shapecode_1_enabled=0
shapecode_1_sides=12
shapecode_1_additive=1
shapecode_1_thickOutline=0
shapecode_1_textured=1
shapecode_1_num_inst=1
shapecode_1_x=0.300
shapecode_1_y=0.800
shapecode_1_rad=1.06345
shapecode_1_ang=0.00000
shapecode_1_tex_ang=1.63363
shapecode_1_tex_zoom=0.46617
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.000
shapecode_1_b2=0.000
shapecode_1_a2=1.000
shapecode_1_border_r=1.000
shapecode_1_border_g=0.000
shapecode_1_border_b=0.000
shapecode_1_border_a=0.000
shapecode_2_enabled=0
shapecode_2_sides=13
shapecode_2_additive=1
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=5
shapecode_2_x=0.650
shapecode_2_y=0.380
shapecode_2_rad=0.57049
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=0.73678
shapecode_2_r=1.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=0.700
shapecode_2_r2=0.000
shapecode_2_g2=0.000
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=0.500
shapecode_2_border_g=0.500
shapecode_2_border_b=0.000
shapecode_2_border_a=0.000
shapecode_3_enabled=0
shapecode_3_sides=14
shapecode_3_additive=1
shapecode_3_thickOutline=1
shapecode_3_textured=1
shapecode_3_num_inst=1
shapecode_3_x=0.600
shapecode_3_y=0.550
shapecode_3_rad=0.97237
shapecode_3_ang=1.25664
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.34933
shapecode_3_r=1.000
shapecode_3_g=0.600
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=0.000
shapecode_3_b2=1.000
shapecode_3_a2=0.000
shapecode_3_border_r=0.200
shapecode_3_border_g=0.700
shapecode_3_border_b=0.500
shapecode_3_border_a=0.000
per_frame_init_1=index = 0;
per_frame_init_2=loop (70000,
per_frame_init_3=  megabuf(index) = 0;
per_frame_init_4=  gmegabuf(index) = 0;
per_frame_init_5=  index = index + 1;
per_frame_init_6=);
per_frame_init_7=
per_frame_init_8=zang = 1;
per_frame_init_9=
per_frame_init_10=yang = 0;
per_frame_init_11=zang = 2;
per_frame_1=
per_frame_2=xlen = 45; ylen = 45; flen = 20; reg00 = xlen*ylen/4; reg01=reg00/4;
per_frame_3=dec_med = 1-0.06*30/fps; dec_slow = 1-0.02*30/fps; dec_f = pow (0.8, 30/fps);
per_frame_4=q30 = dec_slow;
per_frame_5=smooth = max(1,pow(6,fps/30)-2); // >= 0; Ausbreitungsgeschwindigkeit
per_frame_6=
per_frame_7=//"Classic" beat reaction
per_frame_8=cbeat = bass+mid+treb;
per_frame_9=decc = if (vol>cbeat,0.8,dec_med);
per_frame_10=vol  = vol * decc + (1-decc)*cbeat;
per_frame_11=avg = avg*dec_slow + cbeat*(1-dec_slow);
per_frame_12=is_beat = above(cbeat, 1.5*avg) * above (time, tc0+.2);
per_frame_13=tc0 = if (bor(is_beat, bd_bt),time,tc0);
per_frame_14=peak = if (is_beat,cbeat,peak*dec_med);
per_frame_15=
per_frame_16=
per_frame_17=//Gleichanteil entfernen und normalisieren
per_frame_18=ind = 0; sum = 0; amp = 0.01;
per_frame_19=loop (reg01,
per_frame_20=  sum = sum + gmegabuf(ind+30000)/(reg01);
per_frame_21=  amp = amp + pow(gmegabuf(ind+30000),2);
per_frame_22=  ind = ind+1;
per_frame_23=); 
per_frame_24=ind = 0; amp_= amp_*dec_med + (1-dec_med)*sqrt(amp)/reg01*600;
per_frame_25=loop (reg01,
per_frame_26=  megabuf(ind+30000)= (gmegabuf(ind+30000)-sum)/amp_;
per_frame_27=  ind = ind+1;
per_frame_28=);
per_frame_29= 
per_frame_30=// Spectrum of spectrum  !
per_frame_31=index2 = 0;
per_frame_32=loop(flen, //Frequency step
per_frame_33=  index=0; real= 0; imag = 0;
per_frame_34=  loop (flen,
per_frame_35=    real = real + cos(index/flen*6.28*index2)*megabuf(index*reg01/8+30002);
per_frame_36=    imag = imag + sin(index/flen*6.28*index2)*megabuf(index*reg01/8+30002);
per_frame_37=    index=index+1;
per_frame_38=  );
per_frame_39=  megabuf(10000+index2)= megabuf(10000+index2) * dec_f + real;
per_frame_40=  megabuf(15000+index2)= megabuf(15000+index2) * dec_f + imag;
per_frame_41=  index2 = index2+1;
per_frame_42= );
per_frame_43=
per_frame_44=//Anregung
per_frame_45=ind = 1;
per_frame_46=loop (flen/2,
per_frame_47=  cx = megabuf(10000+ind);
per_frame_48=  cy = megabuf(15000+ind);
per_frame_49=  yind = -1;
per_frame_50=  loop (3,
per_frame_51=    xind = -1;
per_frame_52=    loop (3,
per_frame_53=      ox = ((cx+.5)*xlen+xind)%xlen;
per_frame_54=      oy = ((cy+.5)*ylen+yind)%ylen;
per_frame_55=      amp = (cx*cx+cy*cy)*3;
per_frame_56=      megabuf (oy*ylen+ox) = megabuf (oy*ylen+ox) 
per_frame_57=                           - 2*30/fps*sqrt(amp)*above(amp,.02)/(1+xind*xind+yind*yind);
per_frame_58=      xind = xind+1;
per_frame_59=    );
per_frame_60=    yind = yind+1;
per_frame_61=  );
per_frame_62=  ind = ind+1;
per_frame_63=);
per_frame_64=
per_frame_65=//Simulation
per_frame_66=yind = 0;
per_frame_67=loop (ylen,
per_frame_68=  xind = 0;
per_frame_69=  loop (xlen,
per_frame_70=    megabuf(yind*ylen+xind+5000) = //megabuf ab 5000 ist nur Zwischenspeicher
per_frame_71=    dec_med*((gmegabuf(yind*ylen+(xind+1)%xlen) +
per_frame_72=    gmegabuf(yind*ylen+(xlen+xind-1)%xlen) + 
per_frame_73=    gmegabuf(((yind+1)%ylen)*ylen+xind) + 
per_frame_74=    gmegabuf(((yind+ylen-1)%ylen)*ylen+xind)
per_frame_75=    +gmegabuf(yind*ylen+xind)*smooth*4)/(2+2*smooth) - megabuf(yind*ylen+xind)); 
per_frame_76=    xind = xind+1;
per_frame_77=  );
per_frame_78=  yind = yind+1;
per_frame_79=);
per_frame_80=
per_frame_81=//Projektionsparameter
per_frame_82=
per_frame_83=bindex += is_beat;
per_frame_84=
per_frame_85=if (is_beat && (bindex%4==0), ran2 = (rand(100)-50)/50,0 );
per_frame_86=if (is_beat && (bindex%4==2), ran3 = (rand(100)-50)/50,0 );
per_frame_87=if (is_beat && (bindex%6==5), ran4 = (rand(100)-50)/50,0 );
per_frame_88=
per_frame_89=trelx += ran2/fps/18;
per_frame_90=trely += ran3/fps/2;
per_frame_91=trelz += ran4/fps/6;
per_frame_92=zang = 6*sin(trelz);
per_frame_93=xang = 6*sin(zang/5+trelx);
per_frame_94=yang = 6*sin(zang/3*0+trely);
per_frame_95=
per_frame_96=q1 = cos(xang);q2 = sin(xang);q3 = cos(yang);
per_frame_97=q4 = sin(yang);q5 = cos(zang);q6 = sin(zang);
per_frame_98=fov = 1;
per_frame_99=
per_frame_100=//Umkopieren und Projektion
per_frame_101=yind = 0;
per_frame_102=loop (ylen,
per_frame_103=  xind = 0;
per_frame_104=  loop (xlen,
per_frame_105=    ind = yind*ylen+xind;
per_frame_106=    megabuf(ind) = gmegabuf(ind); 
per_frame_107=    gmegabuf(ind) = megabuf(ind+5000); 
per_frame_108=    oz = yind - ylen/2; //#
per_frame_109=    ox = if(bnot(yind%2),xind,xlen-xind-1);
per_frame_110=    oy0a = (oy0+oy0a)/2.5;
per_frame_111=    oy = gmegabuf(yind*ylen+ox); oy0 = oy;
per_frame_112=    ox = ox - xlen/2;  
per_frame_113=    mx = ox*q5 - oy*q6;  my = ox*q6 + oy*q5;
per_frame_114=    ox = mx; oy = my;  
per_frame_115=    mx = ox*q3 + oz*q4;  mz = - ox*q4 + oz*q3;
per_frame_116=    ox = mx; oz = mz;  
per_frame_117=    my = oy*q1 - oz*q2;  mz = oy*q2 + oz*q1;
per_frame_118=    z0 = (10*sin(trelz*14));
per_frame_119=    oy = my; oz = mz+z0;
per_frame_120=    gmegabuf(10000+ind) = fov*ox/(oz+60*fov)+.5;
per_frame_121=    gmegabuf(15000+ind) = fov*oy/(oz+60*fov)+.5;
per_frame_122=    hell= max(min(.5+oy0/4,1),0.2); //Helligkeit
per_frame_123=    gmegabuf(20000+ind) = max(min(hell* (.5+ (oy0a-oy0)*0.1),1),0.1);
per_frame_124=    gmegabuf(25000+ind) = oy0/16+.5;;
per_frame_125=    xind = xind+1;
per_frame_126=  );
per_frame_127=  yind = yind+1;
per_frame_128=);
per_frame_129=
per_frame_130=q29 = 10/(z0+15);
per_frame_131=q32 = aspecty;
per_frame_132=q28 = min (vol/3-0.25,1);
per_frame_133=monitor = q28;
warp_1=`shader_body
warp_2=`{
warp_3=`
warp_4=`    float3 txr = float3(uv,q1*0.1);
warp_5=`    float2  uv2 =  uv;
warp_6=`    uv2 = uv + texsize.zx*(q3,q3);
warp_7=`    float3 color = tex2D(sampler_noise_lq, uv2) - 0.5; 
warp_8=`    color += tex2D(sampler_noise_mq, uv2) - 0.5; 
warp_9=`    color += tex2D(sampler_noise_hq, uv2) - 0.5; 
warp_10=`    uv += color*0.01; 
warp_11=`    uv.y += abs(color*0.01) + bass_att*0.01;
warp_12=`
warp_13=`    ret = tex2D( sampler_main, (uv)*0.95  + GetBlur1((uv - 0.5)*0.9 + 0.5)*0.1 ).xyz;    
warp_14=`    ret = ret-0.01;// - 0.08; //or try: ret -= 0.004;
warp_15=`}
comp_1=`sampler sampler_pw_noise_lq;
comp_2=`
comp_3=`float2 rs, rss, rss0, tmp, uvo;
comp_4=`float3 noise;
comp_5=`
comp_6=`float2 complex_div(float2 numerator, float2 denominator){
comp_7=`   return float2( numerator.x*denominator.x + numerator.y*denominator.y,
comp_8=`                  numerator.y*denominator.x - numerator.x*denominator.y)/
comp_9=`          (denominator.x*denominator.x + denominator.y*denominator.y);
comp_10=`}
comp_11=`
comp_12=`float2 uv_polar(float2 domain, float2 center){
comp_13=`   float2 c = domain - center;
comp_14=`   float rad_hq = length(c);
comp_15=`   float ang_hq = atan2(c.x,c.y);
comp_16=`   return float2(ang_hq, rad_hq);
comp_17=`}
comp_18=`
comp_19=`float2 uv_polar_logarithmic(float2 domain, float2 center, int fins, float log_factor, float2 coord){
comp_20=`   float2 polar = uv_polar(domain, center);
comp_21=`   return float2(polar.x*fins+coord.x, log_factor*log(polar.y) + coord.y);
comp_22=`}
comp_23=`
comp_24=`float2 uv_moebius_transformation(float2 domain, float2 zeroPoint, float2 infinityPoint,float zoom){
comp_25=`   return complex_div((domain - zeroPoint)*zoom, domain - infinityPoint)+0.5;
comp_26=`}
comp_27=`
comp_28=`float2 uv_bipolar_logarithmic(float2 domain, float2 northPole, float2 southPole, int fins, float log_factor, float2 coord){
comp_29=`   float2 help_uv = uv_moebius_transformation(domain, northPole, southPole, 1);
comp_30=`   return uv_polar_logarithmic(help_uv,0.5,fins,log_factor,coord)*float2(M_INV_PI_2,1);
comp_31=`}
comp_32=`
comp_33=`float2 uv_scale(float2 domain, float2 center, float2 scale){
comp_34=`   return center + (domain-center)*scale;
comp_35=`}
comp_36=`float2 uv_lens_half_sphere(float2 domain, float2 position, float radius, float refractivity){
comp_37=`   float2 polar = uv_polar(domain, position);
comp_38=`   float cone = saturate(1-polar.y/radius);
comp_39=`   float halfsphere = sqrt(1-pow(cone-1,2));
comp_40=`   float w = atan2(1-cone,halfsphere);
comp_41=`   float refrac_w = w-asin(sin(w)/refractivity);
comp_42=`   float refrac_d = 1-cone - sin(refrac_w)*halfsphere/cos(refrac_w);
comp_43=`   float2 refrac_uv =position+float2(sin(polar.x),cos(polar.x))*refrac_d*radius;
comp_44=`   bool mask =(length(domain-position)<radius);
comp_45=`   return !mask*domain + 
comp_46=`           mask*refrac_uv;
comp_47=`}
comp_48=`
comp_49=`/* code from Martins hardcore mix - Danke ;) */
comp_50=`float hardcore_stars(float2 domain, float2 center, float o){
comp_51=`
comp_52=`   float2 uv1 = domain-center;
comp_53=`   rss0.x = atan2(uv1.x, uv1.y)/3.1416;
comp_54=`   rss0.y = .003/(length (uv1));
comp_55=`   rss = float2 (rss0.x+q1/3,rss0.y+time+o);
comp_56=`   rss = mul(rss,float2x2(.7,.7,-.7,.7));
comp_57=`   float noise = (tex2D(sampler_pw_noise_lq,rss/32)-.5 >= 0);
comp_58=`   tmp = abs(frac(rss*8)-.5);
comp_59=`   float3 dots = saturate(.04/length(tmp)) *noise;
comp_60=`   rss = float2 (rss0.x,rss0.y+(time+o)/4);
comp_61=`   rss = mul(rss,float2x2(.7,.7,-.7,.7));
comp_62=`   noise = (tex2D(sampler_pw_noise_lq,rss/32)-.5 >= 0);
comp_63=`   tmp = abs(frac(rss*8)-.5);
comp_64=`   dots += saturate(.02/length(tmp)) * noise;
comp_65=`   dots *= saturate(.2/abs(rss0.y));
comp_66=`   return dots*dots;
comp_67=`return 0;
comp_68=`}
comp_69=`
comp_70=`
comp_71=`
comp_72=`
comp_73=`
comp_74=`
comp_75=`shader_body
comp_76=`{
comp_77=`uv = 0.5 + (uv-0.5)*aspect.wz;
comp_78=`time *= 0.6;
comp_79=`
comp_80=`float2 pole1 =float2(0.1,0.5);
comp_81=`float2 pole2 =float2(0.9,0.5);
comp_82=`
comp_83=`float stars = hardcore_stars(uv,pole1,0) + hardcore_stars(uv,pole2,2);
comp_84=`
comp_85=`uv = uv_bipolar_logarithmic(uv, pole1, pole2, 2, 0.3, float2(q26,q27)*float2(8,1));
comp_86=`uv = 0.5 + (1.0 - abs( frac( uv * 0.5 ) * 2 - 1.0 )-0.5)*0.98; // Eo.S. mirror code with cutted borders
comp_87=`uv = uv.yx;
comp_88=`ret = lerp(GetPixel(uv),1-GetPixel(uv)*1.5,stars);
comp_89=`}
comp_90=`
comp_91=`
