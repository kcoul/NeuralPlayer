MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=5.000000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=7
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.958
fWaveSmoothing=0.450
fWaveParam=0.000
fModWaveAlphaStart=0.000
fModWaveAlphaEnd=1.320
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.100
ob_b=1.000
ob_a=1.000
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=0.000
nMotionVectorsX=25.600
nMotionVectorsY=9.600
mv_dx=0.000
mv_dy=0.000
mv_l=0.000
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=0
wavecode_0_samples=282
wavecode_0_sep=20
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=3.91581
wavecode_0_smoothing=0.10000
wavecode_0_r=0.200
wavecode_0_g=0.300
wavecode_0_b=1.000
wavecode_0_a=0.600
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=0
wavecode_1_scaling=0.89152
wavecode_1_smoothing=0.82000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=0.100
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=0
wavecode_2_scaling=0.89152
wavecode_2_smoothing=0.82000
wavecode_2_r=0.000
wavecode_2_g=0.200
wavecode_2_b=0.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=1
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=0
shapecode_0_sides=4
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.090
shapecode_0_y=0.900
shapecode_0_rad=0.22437
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.76002
shapecode_0_r=1.000
shapecode_0_g=0.000
shapecode_0_b=0.000
shapecode_0_a=1.000
shapecode_0_r2=1.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=0.600
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shapecode_1_enabled=0
shapecode_1_sides=100
shapecode_1_additive=1
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.260
shapecode_1_y=0.200
shapecode_1_rad=0.39317
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=6.19589
shapecode_1_r=0.000
shapecode_1_g=0.550
shapecode_1_b=0.500
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.400
shapecode_1_b2=0.400
shapecode_1_a2=0.070
shapecode_1_border_r=0.300
shapecode_1_border_g=0.700
shapecode_1_border_b=0.800
shapecode_1_border_a=0.000
shapecode_2_enabled=0
shapecode_2_sides=44
shapecode_2_additive=1
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.503
shapecode_2_y=0.500
shapecode_2_rad=0.03886
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=0.60986
shapecode_2_r=1.000
shapecode_2_g=0.100
shapecode_2_b=0.000
shapecode_2_a=0.900
shapecode_2_r2=1.000
shapecode_2_g2=1.000
shapecode_2_b2=1.000
shapecode_2_a2=0.000
shapecode_2_border_r=0.500
shapecode_2_border_g=0.500
shapecode_2_border_b=0.500
shapecode_2_border_a=0.000
shapecode_3_enabled=0
shapecode_3_sides=100
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.01000
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.49981
shapecode_3_r=0.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=0.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=0.200
shapecode_3_border_g=0.700
shapecode_3_border_b=0.500
shapecode_3_border_a=0.000
per_frame_init_1=
per_frame_init_2=//******** INITIALIZATION *********
per_frame_init_3=//---------- some global vars, do not change -------------
per_frame_init_4=avg = 0.01;
per_frame_init_5=q7 = .15; //MyZoom
per_frame_init_6=q8 =  rand(200)/100-1; //fractal modifier
per_frame_init_7=q8 = -0; //#
per_frame_init_8=q16 = .8 + rand(1.25); //Tele
per_frame_init_9=q16 = 1; //#
per_frame_init_10=trel1 = rand(100); trel2 = rand(100); 
per_frame_init_11=
per_frame_init_12=q17 = 2.9; //fractal density factor ffac
per_frame_init_13=start = 1; travel = 0; RotZ = 0; look = 0; slow = 0; t0 = time+3; lampx = .5; lampy = .5;
per_frame_init_14=cran0 = rand(1);
per_frame_init_15=n = 0; loop (10000, gmegabuf(n)=0; n=n+1; ); 
per_frame_init_16=n = 0; loop (10000,  megabuf(n)=0; n=n+1; ); 
per_frame_init_17=trelx = 0;  trely = 0; trelz = 0;
per_frame_init_18=reg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;
per_frame_init_19=
per_frame_init_20=//Find random starting point
per_frame_init_21=while (exec2(
per_frame_init_22=  ran1 = rand(800)/100;  ran2 = rand(800)/100;  ran3 = rand(800)/100;
per_frame_init_23=  PosX = rand(10)-5;   PosY = rand(10)-5;   PosZ = rand(10)-5; 
per_frame_init_24=
per_frame_init_25=//  PosX = 3.3; PosY = 2; PosZ = -2; ran1 = 0; ran2 = 0; ran3 = 0; //#
per_frame_init_26=
per_frame_init_27=  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); 
per_frame_init_28=  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);
per_frame_init_29=
per_frame_init_30=  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;
per_frame_init_31=  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;
per_frame_init_32=  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;
per_frame_init_33=
per_frame_init_34=  //***********BOT*************
per_frame_init_35=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_init_36=  dist = 0.001;
per_frame_init_37=  while (exec2(
per_frame_init_38=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_init_39=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_init_40=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_init_41=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_init_42=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_init_43=    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;
per_frame_init_44=    loop (7+1,
per_frame_init_45=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_init_46=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_init_47=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_init_48=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_init_49=      uvx = if (slen <= 0.25, uvx*slen, if (slen <= 2, uvx/slen, uvx)) *q17 + uvz0; 
per_frame_init_50=      uvy = if (slen <= 0.25, uvy*slen, if (slen <= 2, uvy/slen, uvy)) *q17 + uvx0; 
per_frame_init_51=      uvz = if (slen <= 0.25, uvz*slen, if (slen <= 2, uvz/slen, uvz)) *q17 + uvy0; 
per_frame_init_52=    );
per_frame_init_53=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_init_54=    dist *= 1.05;
per_frame_init_55=  ,(dist < 0.6)*(len > 30)));
per_frame_init_56=,(dist < .06))); //end while
per_frame_init_57=
per_frame_1=chng=sin(time*.5);
per_frame_2=cthr=.9999;
per_frame_3=mq21=if(above(chng,cthr),rand(3),mq21);
per_frame_4=mq22=if(above(chng,cthr),rand(3),mq22);
per_frame_5=mq23=if(above(chng,cthr),rand(3),mq23);
per_frame_6=mq24=if(above(chng,cthr),rand(2),mq24);
per_frame_7=mq25=if(above(chng,cthr),rand(2),mq25);
per_frame_8=mq26=if(above(chng,cthr),rand(2),mq26);
per_frame_9=mq27=if(above(chng,cthr),rand(1),mq27);
per_frame_10=mq28=if(above(chng,cthr),rand(1),mq28);
per_frame_11=mq29=if(above(chng,cthr),rand(1)*.3,mq29);
per_frame_12=mq31=if(above(chng,cthr),rand(1)*.3,mq31);
per_frame_13=monitor=chng;
per_frame_14=q21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;
per_frame_15=q27=mq27;q28=mq28;q29=mq29;q31=mq31;
per_frame_16=
per_frame_17=monitor=mq1;
per_frame_18=vol=bass+treb+mid;
per_frame_19=atime=atime+vol;
per_frame_20=q11=.4+sin(atime*.006        )*.4;
per_frame_21=q12=.4+cos(atime*.00613828348)*.4;
per_frame_22=q13=.4+sin(atime*.00598593455)*.4;
per_frame_23=monitor=q13;
per_frame_24=
per_frame_25=fps_ = .0 * fps_ + 1*if(fps<=25,fps,25+.5*(fps-25)); 
per_frame_26=dec_s = 1-.03*30/fps_;
per_frame_27=beat = (time >  t0+3); t0 = if(beat, time, t0);
per_frame_28=
per_frame_29=speed = min(0.4,dist_-.1) * (1+2*avg) *(1-slow*.75)*.1/q7; //#
per_frame_30=ds = ds * dec_s + (1-dec_s)*speed*.2/fps_; 
per_frame_31=RotZ = if (RotZ==0,beat*(rand(100)<20*travel+10)*(rand(10)/10-.3),
per_frame_32=                   bnot(beat*(rand(100)<30))*RotZ);
per_frame_33=slow = if (bnot(slow), beat*(rand(1000*avg)<6), bnot(beat*(rand(100)<50)));
per_frame_34=look = if (bnot(look), beat*(rand(1000*speed)<12), bnot(beat*(rand(100)<50)));
per_frame_35=
per_frame_36=//Lamp View
per_frame_37=bass_ = bass_ * dec_s +(1-dec_s) * bass_att;
per_frame_38=treb_ = treb_ * dec_s +(1-dec_s) * treb_att;
per_frame_39=
per_frame_40=bass__ = bass__ * dec_s +(1-dec_s) * bass_;
per_frame_41=treb__ = treb__ * dec_s +(1-dec_s) * treb_;
per_frame_42=
per_frame_43=trel1 = trel1 + (bass_>bass__*1)/fps;
per_frame_44=trel2 = trel2 + (treb_>treb__*1)/fps;
per_frame_45=//trel1 = time; trel2 = time;
per_frame_46=lampx = .5 + .4*sin(trel1*1.7) * sin(trel2*.19);
per_frame_47=lampy = .5 + .4*sin(trel2*.9) * sin(trel1*.13);
per_frame_48=q1 = lampx; q2 = lampy;
per_frame_49=
per_frame_50=//Position 
per_frame_51=DirX= reg26; DirY= reg27; DirZ = reg28;
per_frame_52=PosX = PosX + ds*DirX ; PosY = PosY + ds*DirY; PosZ = PosZ + ds*DirZ; 
per_frame_53=q4 = PosX; q5 = PosY; q6 = PosZ;
per_frame_54=
per_frame_55=angchg = (.5-dist_)*(dist_ < .5);
per_frame_56=travel = if (angchg > 0,0,travel+ds);
per_frame_57=v1 = v1 * dec_s + (1-dec_s)* RotZ * ds;
per_frame_58=v2 = v2 *dec_s + (1-dec_s)*angchg *xslope/fps_;
per_frame_59=v3 = v3 *dec_s + (1-dec_s)*(angchg *yslope/fps_ + 2*v1*sin(time*.1));
per_frame_60=//v1 = 0.00; v2 = 0; v3 = 0;
per_frame_61=//v2 = .003; v2 = .01;
per_frame_62=//push old RotMat
per_frame_63=reg30 =reg20; reg31 =reg21; reg32 =reg22; 
per_frame_64=reg33 =reg23; reg34 =reg24; reg35 =reg25; 
per_frame_65=reg36 =reg26; reg37 =reg27; reg38 =reg28; 
per_frame_66=
per_frame_67=n = 0; avg = 0;
per_frame_68=loop (5,
per_frame_69=  n = n+1;
per_frame_70=  //new Rot. Mat for infinitesimal angles
per_frame_71=  ran1 = rand(100)/100;
per_frame_72=  ran2 = rand(100)/200-.25;
per_frame_73=  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.57+ran2) * (n <= 4)*ran1;
per_frame_74=  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); 
per_frame_75=  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);
per_frame_76=  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;
per_frame_77=  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;
per_frame_78=  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;
per_frame_79=
per_frame_80=  //pop old RotMat
per_frame_81=  reg20 =reg30; reg21 =reg31; reg22 =reg32; 
per_frame_82=  reg23 =reg33; reg24 =reg34; reg25 =reg35; 
per_frame_83=  reg26 =reg36; reg27 =reg37; reg28 =reg38; 
per_frame_84=
per_frame_85=  //Multiply new RotMat by old one
per_frame_86=  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;
per_frame_87=  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;
per_frame_88=  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;
per_frame_89=  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;
per_frame_90=  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;
per_frame_91=  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;
per_frame_92=  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;
per_frame_93=  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;
per_frame_94=  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;
per_frame_95=
per_frame_96=  reg20 =q20; reg21 =q21; reg22 =q22;
per_frame_97=  reg23 =q23; reg24 =q24; reg25 =q25;
per_frame_98=  reg26 =q26; reg27 =q27; reg28 =q28;
per_frame_99=
per_frame_100=  //***********BOT*************
per_frame_101=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_102=  dist = 0.005;
per_frame_103=  while (exec2(
per_frame_104=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_105=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_106=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_107=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_108=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_109=    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;
per_frame_110=
per_frame_111=    loop (8+1,
per_frame_112=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_113=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_114=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_115=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_116=      uvx = if (slen <= 0.25, uvx*slen, if (slen <= 2, uvx/slen, uvx)) *q17 + uvz0; 
per_frame_117=      uvy = if (slen <= 0.25, uvy*slen, if (slen <= 2, uvy/slen, uvy)) *q17 + uvx0; 
per_frame_118=      uvz = if (slen <= 0.25, uvz*slen, if (slen <= 2, uvz/slen, uvz)) *q17 + uvy0; 
per_frame_119=    );
per_frame_120=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_121=    dist *= 1.05;
per_frame_122=  ,(dist < 0.6)*(len > 50)));
per_frame_123=  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points
per_frame_124=  avg = avg+abs(megabuf(n)/5);
per_frame_125=); //end loop 5
per_frame_126=
per_frame_127=n = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));
per_frame_128=
per_frame_129=xslope = min(max(2/avg*(megabuf(1)-megabuf(3)),-1),1);
per_frame_130=yslope = min(max(2/avg*(megabuf(4)-megabuf(2)),-1),1);
per_frame_131=monitor = avg;
per_frame_132=dist_ = dist_*dec_s + (1-dec_s)*dist;
per_frame_133=
per_frame_134=q10 = ds*q7; //compensation of lin. movement in GetDist and zoom uv
per_frame_135=q14 = 1*abs(ds) + 2*(abs(v1) + abs(v2) + abs(v3)) + start*.05; 
per_frame_136=q19 = .5 + .5*sin(time*.04+cran0*6); //brightness backgd
per_frame_137=start = start * .9;
per_frame_138=fpos = fpos + ds*q7*3; q9 = fpos;
per_frame_139=warp = 0.0; zoom = 1; 
per_frame_140=dx = -v2/q16; dy = v3/q16; rot = v1;
per_frame_141=vx = vx -v2/q16; vy = vy +v3/q16; vz = vz + v1;
per_frame_142=q11 = vx;  q12 = vy; q13 = vz;
per_frame_143=
per_frame_144=
per_frame_145=monitor = dist_;
warp_1=`sampler sampler_pw_noise_mq;
warp_2=`sampler sampler_skull;
warp_3=`
warp_4=`float limit, dist, struc, len; float2 uv0, uv1; float3 uv2; float4 box;
warp_5=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
warp_6=`
warp_7=`static const float3 CamPos = float3(q4,q5,q6);
warp_8=`static const float myzoom = q7,  res = 128, res2 = 64, tele = q16;
warp_9=`static const float sustain = .98 - q14, change = q14, ds = q10, tic8 = 1.0/255, ffac = q17;
warp_10=`
warp_11=`float2 fstep2 (float2 xy) {return 1.0/res*round(res*xy);}
warp_12=`
warp_13=`float GetDist(float2 uvi) {float2 tmp; tmp = fstep2(tex2D (sampler_pc_main, uvi).gb); 
warp_14=`  return 1-(tmp.y + 1.0/res2*(tmp.x-.505));}
warp_15=`
warp_16=`float2 PutDist(float x) {float tmp; tmp = fstep2(1-x);
warp_17=`  return (float2(res2*((1-x)-tmp)+.495,tmp));}
warp_18=`
warp_19=`float MinDist (float2 uvi) 
warp_20=`{
warp_21=`   float tmp; float4 nb; float4 nb2; float2 pix;
warp_22=`   pix = texsize.zw*(1.0+length(uvi-0.5)*2.0);   
warp_23=`   nb.x = GetDist(uvi+pix*float2(-1,-1));   nb.y = GetDist(uvi+pix*float2(1,-1));
warp_24=`   nb.z = GetDist(uvi+pix*float2(1,1));     nb.w = GetDist(uvi+pix*float2(-1,1));         
warp_25=`   nb2.x = GetDist(uvi+pix*float2(0,-1));   nb2.y = GetDist(uvi+pix*float2(1,0));          
warp_26=`   nb2.z = GetDist(uvi+pix*float2(0,1));    nb2.w = GetDist(uvi+pix*float2(-1,0));
warp_27=`   //Eo.S. more efficient usage of min to get min value of all 8 GetDist() calls, removes 11ALU
warp_28=`   nb = min( nb, nb2 );
warp_29=`   nb.xy = min( nb.xy, nb.zw );
warp_30=`   return min( nb.x, nb.y );
warp_31=`}
warp_32=`
warp_33=`float3 Get1 (float2 uvi) {return lerp (GetPixel(uvi), GetBlur1(uvi),change*4);} 
warp_34=`
warp_35=`float4 mbox (float3 uvi) {float3 zz, zz0; float tmp, li;
warp_36=`  zz = uvi;; zz0 = zz; li = 0;
warp_37=`  for (int n = 0; n <= 8; n++) {
warp_38=`    zz = 2.0*clamp(zz,-1,1)-zz;  tmp = dot(zz,zz);
warp_39=`    if (tmp <= 0.25) {zz *= tmp;li=0;} else if (tmp <= 2) {zz /= tmp;li=20;} 
warp_40=`    zz = ffac*zz + zz0.zxy + .0/(tmp);}
warp_41=`  return float4(zz,li);}
warp_42=`
warp_43=`shader_body {uv0 = uv_orig;
warp_44=`uv = (uv-.5)*(1-ds/(GetDist(uv))) + .5;
warp_45=`uv1 = (uv0-.5)*aspect.xy*tele;
warp_46=`float3 noise = frac(8*tex2D (sampler_noise_lq,uv+rand_frame.yz)); 
warp_47=`   if (noise.g > .2) 
warp_48=`   {
warp_49=`       float3 noiseBiased = noise - float3( 0.5, 0.5, 0.5 );
warp_50=`      //Eo.S. combine the subtraction on noise to a single float3 
warp_51=`      //to ensure compiler does the subtraction in a single ALU
warp_52=`      dist = MinDist( (noiseBiased.zy) * 0.00 +uv ) +  0.006 * (noiseBiased.x) * abs(noiseBiased.y);
warp_53=`   }    
warp_54=`   else {dist = noise.r;}
warp_55=` dist = min(dist,GetDist(uv));
warp_56=`dist -=  ds*.6;
warp_57=`
warp_58=`limit = 40 + 80 * (1-GetBlur1(uv));
warp_59=`float tdist = dist + pow(dist,3);
warp_60=`
warp_61=`uv2 = mul(float3(uv1*tdist,tdist*(1-.0*pow(3*length(uv1),2)))/myzoom,RotMat)+CamPos;
warp_62=`uv2 = (frac(uv2/8.0+.5)-.5)*8.0;
warp_63=`box = mbox (uv2);
warp_64=`len = (length(box.xyz));;
warp_65=`
warp_66=`struc = length(box.xzw)*.03;
warp_67=`
warp_68=`if (len < limit){
warp_69=` ret.r = (1-sustain)*struc+sustain*(Get1(uv).r); ret.gb=  PutDist(dist); } 
warp_70=` else {ret = tex2D(sampler_fc_main,uv)*float3(sustain,1,1)-float3(tic8,0,change*1);} 
warp_71=`float4 noise9 = tex3D(sampler_noisevol_hq, 
warp_72=`                      ((uv2.xyy*q27
warp_73=`                       )*texsize.xyy*texsize_noisevol_hq.zww
warp_74=`                      ).xyz*
warp_75=`                      float3(1,1,0)*0.05 + 
warp_76=`                      time*float3(0,0,1)*q29
warp_77=`                     );
warp_78=`if(ret.x> q21*q13         && ret.x<= q24*q11        )ret.y += (noise9).x*.5; 
warp_79=`if(ret.y> q22*q11         && ret.y<= q25*q12        )ret.z += (noise9).y*.5; 
warp_80=`if(ret.z> q23*q12         && ret.z<= q26*q13        )ret.x += (noise9).z*.5; 
warp_81=`
warp_82=`}
comp_1=`float2 d, uv_y;
comp_2=`float3 dx, dy;
comp_3=`shader_body
comp_4=`{
comp_5=`
comp_6=`    d = texsize.zw*8;
comp_7=`    dx = ( GetBlur1(uv+float2(1,0)*d)-GetBlur1(uv-float2(1,0)*d) );
comp_8=`    dy = ( GetBlur1(uv+float2(0,1)*d)-GetBlur1(uv-float2(0,1)*d) );
comp_9=`
comp_10=`float3 base = GetPixel(uv);
comp_11=`float3 emboss = (-dx + dy + 1)*1.2;
comp_12=`
comp_13=`    d = texsize.zw*2;
comp_14=`    dx = ( GetBlur1(uv+float2(1,0)*d)-GetBlur1(uv-float2(1,0)*d) );
comp_15=`    dy = ( GetBlur1(uv+float2(0,1)*d)-GetBlur1(uv-float2(0,1)*d) );
comp_16=`
comp_17=`float grad = length(float2(dx.x,dy.x));
comp_18=`
comp_19=`ret = lerp( float3(0.5,0.4,0.6)*base.x*emboss.x,
comp_20=`            float3(8,5,2)*grad,
comp_21=`            grad*4.2
comp_22=`          ); 
comp_23=`float4 noise9 = tex3D(sampler_noisevol_hq, 
comp_24=`                      ((float3(dx.y,dy.z,dx.z)*q28
comp_25=`                       )*texsize.xyy*texsize_noisevol_hq.zww
comp_26=`                      ).xyz*
comp_27=`                      float3(1,1,0)*0.05 + 
comp_28=`                      time*float3(0,0,1)*q31
comp_29=`                     );
comp_30=`if(ret.x> q26*q13         && ret.x<= q23*q11        )ret.z -= (noise9).x*.5; 
comp_31=`if(ret.y> q25*q11         && ret.y<= q22*q12        )ret.x -= (noise9).y*.5; 
comp_32=`if(ret.z> q24*q12         && ret.z<= q21*q13        )ret.y -= (noise9).z*.5; 
comp_33=`ret = lerp(ret,4*ret,GetPixel(uv).y*0.5-GetBlur1(uv).z*0.3*float3(0.3,1,1));
comp_34=`
comp_35=`grad = length(float2(dx.z,dy.z));
comp_36=`ret = lerp(ret, float3(2,2,0), grad*0.7);
comp_37=`}
comp_38=`
