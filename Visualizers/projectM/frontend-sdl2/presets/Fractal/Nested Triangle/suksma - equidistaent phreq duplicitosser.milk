MILKDROP_PRESET_VERSION=201
PSVERSION=2
PSVERSION_WARP=2
PSVERSION_COMP=2
[preset00]
fRating=5.000000
fGammaAdj=1.840
fDecay=0.950
fVideoEchoZoom=2.216
fVideoEchoAlpha=0.000
nVideoEchoOrientation=0
nWaveMode=7
bAdditiveWaves=1
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=0
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=1
bRedBlueStereo=0
bBrighten=1
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=1.286
fWaveSmoothing=0.630
fWaveParam=0.000
fModWaveAlphaStart=0.710
fModWaveAlphaEnd=1.300
fWarpAnimSpeed=1.000
fWarpScale=1.000
fZoomExponent=1.00000
fShader=0.000
zoom=1.00000
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=1.00000
sx=1.00000
sy=1.00000
wave_r=0.650
wave_g=0.650
wave_b=0.650
wave_x=0.500
wave_y=0.500
ob_size=0.010
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=0.000
ib_size=0.010
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.500
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=0.400
wavecode_0_g=1.000
wavecode_0_b=0.300
wavecode_0_a=1.000
wave_0_per_point1=//left and right angles
wave_0_per_point2=la=.25+(treb_att*.09)+(.2*sin(time));
wave_0_per_point3=ra=-.25-(treb*.09)+(.2*cos(time));
wave_0_per_point4=
wave_0_per_point5=//left or right?
wave_0_per_point6=branch=int(rand(2));
wave_0_per_point7=
wave_0_per_point8=//base
wave_0_per_point9=wx=if(equal(sc,0),.5,wx);
wave_0_per_point10=wy=if(equal(sc,0),.1,wy);
wave_0_per_point11=
wave_0_per_point12=wx=if(equal(sc,1),.5,wx);
wave_0_per_point13=wy=if(equal(sc,1),.4,wy);
wave_0_per_point14=
wave_0_per_point15=//calculate previous branch length
wave_0_per_point16=d=if(below(sc,2),.3,.7*d+(bass_att*.003));
wave_0_per_point17=
wave_0_per_point18=//angle
wave_0_per_point19=wainc=if(equal(branch,1),la,ra);
wave_0_per_point20=
wave_0_per_point21=wa=if(below(sc,2),3.1415927*.5,wa+wainc);
wave_0_per_point22=
wave_0_per_point23=//branches
wave_0_per_point24=wx=if(above(sc,2),wx+cos(wa)*d,wx);
wave_0_per_point25=wy=if(above(sc,2),wy+sin(wa)*d,wy);
wave_0_per_point26=
wave_0_per_point27=//sample count
wave_0_per_point28=sc=if(equal(sc,10),0,sc+1); //depth setting
wave_0_per_point29=
wave_0_per_point30=a=if(below(sc,2),0,.1);
wave_0_per_point31=
wave_0_per_point32=x=wx;
wave_0_per_point33=y=wy;
wave_0_per_point34=
wave_0_per_point35=r=treb_att*.65;
wave_0_per_point36=g=mid_att*.65;
wave_0_per_point37=b=sin(time*.6);
wavecode_1_enabled=1
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=0.020
wave_1_per_point1=//left and right angles
wave_1_per_point2=la=.15+(treb_att*.09)+(.2*sin(time));
wave_1_per_point3=ra=-.15-(treb*.09)+(.2*cos(time));
wave_1_per_point4=
wave_1_per_point5=//left or right?
wave_1_per_point6=branch=int(rand(2));
wave_1_per_point7=
wave_1_per_point8=//base
wave_1_per_point9=wx=if(equal(sc,0),.5,wx);
wave_1_per_point10=wy=if(equal(sc,0),.1,wy);
wave_1_per_point11=
wave_1_per_point12=wx=if(equal(sc,1),.5,wx);
wave_1_per_point13=wy=if(equal(sc,1),.4,wy);
wave_1_per_point14=
wave_1_per_point15=//calculate previous branch length
wave_1_per_point16=d=if(below(sc,2),.3,.7*d+(treb_att*.003));
wave_1_per_point17=
wave_1_per_point18=//angle
wave_1_per_point19=wainc=if(equal(branch,1),la,ra);
wave_1_per_point20=
wave_1_per_point21=wa=if(below(sc,2),3.1415927*.5,wa+wainc);
wave_1_per_point22=
wave_1_per_point23=//branches
wave_1_per_point24=wx=if(above(sc,2),wx+cos(wa)*d,wx);
wave_1_per_point25=wy=if(above(sc,2),wy+sin(wa)*d,wy);
wave_1_per_point26=
wave_1_per_point27=//sample count
wave_1_per_point28=sc=if(equal(sc,10),0,sc+1); //depth setting
wave_1_per_point29=
wave_1_per_point30=a=if(below(sc,2),0,.1);
wave_1_per_point31=
wave_1_per_point32=x=wx;
wave_1_per_point33=y=wy;
wave_1_per_point34=
wave_1_per_point35=r=sin(time);
wave_1_per_point36=g=sin(time+.23);
wave_1_per_point37=b=sin(time*.6);
wavecode_2_enabled=1
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=1
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=0.000
wave_2_per_point1=//left and right angles
wave_2_per_point2=la=.2+(treb_att*.09)+(.2*sin(time));
wave_2_per_point3=ra=-.2-(treb*.09)+(.2*cos(time));
wave_2_per_point4=
wave_2_per_point5=//left or right?
wave_2_per_point6=branch=int(rand(2));
wave_2_per_point7=
wave_2_per_point8=//base
wave_2_per_point9=wx=if(equal(sc,0),.5,wx);
wave_2_per_point10=wy=if(equal(sc,0),.1,wy);
wave_2_per_point11=
wave_2_per_point12=wx=if(equal(sc,1),.5,wx);
wave_2_per_point13=wy=if(equal(sc,1),.4,wy);
wave_2_per_point14=
wave_2_per_point15=//calculate previous branch length
wave_2_per_point16=d=if(below(sc,2),.3,.7*d);
wave_2_per_point17=
wave_2_per_point18=//angle
wave_2_per_point19=wainc=if(equal(branch,1),la,ra);
wave_2_per_point20=
wave_2_per_point21=wa=if(below(sc,2),3.1415927*.5,wa+wainc);
wave_2_per_point22=
wave_2_per_point23=//branches
wave_2_per_point24=wx=if(above(sc,2),wx+cos(wa)*d,wx);
wave_2_per_point25=wy=if(above(sc,2),wy+sin(wa)*d,wy);
wave_2_per_point26=
wave_2_per_point27=//sample count
wave_2_per_point28=sc=if(equal(sc,10),0,sc+1); //depth setting
wave_2_per_point29=
wave_2_per_point30=a=if(below(sc,2),0,.1);
wave_2_per_point31=
wave_2_per_point32=x=wx;
wave_2_per_point33=y=wy;
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=1
shapecode_0_sides=3
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.83263
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=0.93270
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=0.800
shapecode_0_r2=1.000
shapecode_0_g2=1.000
shapecode_0_b2=1.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.300
shape_0_per_frame1=ang=time;
shapecode_1_enabled=1
shapecode_1_sides=3
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=1
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.650
shapecode_1_rad=0.95708
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=1.00000
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=1.000
shapecode_1_a=1.000
shapecode_1_r2=1.000
shapecode_1_g2=1.000
shapecode_1_b2=0.000
shapecode_1_a2=0.000
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.000
shape_1_per_frame1=x=(sin(time)*.05)+.5;
shape_1_per_frame2=
shape_1_per_frame3=ang=time*.25;
shapecode_2_enabled=0
shapecode_2_sides=100
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.340
shapecode_2_y=0.340
shapecode_2_rad=0.89269
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=1.000
shapecode_2_g=1.000
shapecode_2_b=0.000
shapecode_2_a=0.010
shapecode_2_r2=1.000
shapecode_2_g2=1.000
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.020
shapecode_3_enabled=0
shapecode_3_sides=3
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.000
shapecode_3_rad=1.82742
shapecode_3_ang=0.18850
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=1.000
shapecode_3_g=1.000
shapecode_3_b=0.000
shapecode_3_a=0.000
shapecode_3_r2=1.000
shapecode_3_g2=1.000
shapecode_3_b2=0.000
shapecode_3_a2=0.010
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.000
per_frame_1=//virtual;
per_frame_2=vnum_increment = 2/fps;
per_frame_3=vtarget = vtarget + if(above(bass*bass_att,4.5), if(below(vtarget,vnum+1),1,0),0);
per_frame_4=vnum = vnum + if(below(vnum,vtarget-vnum_increment*.5), vnum_increment,0);
per_frame_5=monitor = vnum;
per_frame_6=;
per_frame_7=vang = vnum*3.14159265358979323*.25;
per_frame_8=q1=vang;
per_frame_9=q2 = vnum_increment;
per_frame_10=q3 = vnum;
per_frame_11=q4=vtarget;
per_frame_12=//vx = (x-.5)*cos(vang) - (y-.5)*sin(vang)+.5;
per_frame_13=//vy = (x-.5)*sin(vang) +(y-.5)*cos(vang)+.5;
per_frame_14=;
per_frame_15=bass_x = max(bass_x*.7+max(bass_att-.9,0)*.3,0);    //decaying bass max;
per_frame_16=wave_vx = ((frame%3-1)*bass_x* above(vnum,vtarget-vnum_increment*.5) +1)*wave_x;    //spreads flame;
per_frame_17=wave_vy=wave_y;
per_frame_18=;
per_frame_19=wave_x = -(wave_vx-.5)*cos(vang) + (wave_vy-.5)*sin(vang)+.5;
per_frame_20=wave_y = -(wave_vx-.5)*sin(vang) - (wave_vy-.5)*cos(vang)+.5;
per_frame_21=//end virtual;
per_frame_22=wave_r = above(vnum,vtarget-vnum_increment*.5);
per_frame_23=//wave_g = below(bass*bass_att,3.5);
per_frame_24=decay = 3000000+57.75;                                      // Magic 'flame' decay;
per_frame_25=//wave_mystery = sin(time*.2)*.05+1;
per_frame_26=;
per_frame_27=ob_a = max(sqr(sqr(sin(time*1)*.25+.25)),if(below(vnum,vtarget-.1),.2,0));     // 'ad-lib decay' to black - no ugly artefacts;
per_frame_28=// ^4 to get it up there quick -> min time with decay on.;
per_frame_29=;
per_frame_30=ob_a = ob_a*(1-bass_x);                         // just so we don't get rid of the wide impressive;
per_frame_31=// flames so quickly;
per_frame_32=;
per_frame_33=//ob_a=0;
per_frame_34=//monitor = ob_a;
per_frame_35=;
per_frame_36=//Other decays to try:;
per_frame_37=//300000 +  42.53, 90.63, 43.00   These are all fairly similar, but all are stable (equiv to decay  0.990 -> 1 in terms of speed of fade);
per_frame_38=//3000000 + 57.75 <<<  =:-);
per_frame_39=;
per_frame_40=dx = bass * wave_b;
per_frame_41=ib_size = wave_g * wave_g;
per_frame_42=ob_g = wave_r * wave_g;
per_frame_43=wave_b = wave_r * treb;
per_frame_44=wave_b = wave_b + wave_g;
per_frame_45=ib_g = time + bass;
per_frame_46=ob_b = bass * treb;
per_frame_47=warp = treb + wave_r;
per_frame_48=dx = dx + wave_r;
per_frame_49=ob_size = wave_b * bass;
per_frame_50=mv_b = bass * bass;
per_frame_51=ob_b = ob_b * bass;
per_frame_52=warp=if(below(warp,0.01), 0.01, warp);
per_frame_53=warp=if(above(warp,100.0), 100.0, warp);
per_frame_54=dx=if(below(dx,-1), -1, dx);
per_frame_55=dx=if(above(dx,1.0), 1.0, dx);
per_frame_56=wave_b=if(below(wave_b,0.0), 0.0, wave_b);
per_frame_57=wave_b=if(above(wave_b,1.0), 1.0, wave_b);
per_frame_58=ob_size=if(below(ob_size,0.0), 0.0, ob_size);
per_frame_59=ob_size=if(above(ob_size,0.5), 0.5, ob_size);
per_frame_60=ob_g=if(below(ob_g,0.0), 0.0, ob_g);
per_frame_61=ob_g=if(above(ob_g,1.0), 1.0, ob_g);
per_frame_62=ob_b=if(below(ob_b,0.0), 0.0, ob_b);
per_frame_63=ob_b=if(above(ob_b,1.0), 1.0, ob_b);
per_frame_64=ib_size=if(below(ib_size,0.0), 0.0, ib_size);
per_frame_65=ib_size=if(above(ib_size,0.5), 0.5, ib_size);
per_frame_66=ib_g=if(below(ib_g,0.0), 0.0, ib_g);
per_frame_67=ib_g=if(above(ib_g,1.0), 1.0, ib_g);
per_frame_68=mv_b=if(below(mv_b,0.0), 0.0, mv_b);
per_frame_69=mv_b=if(above(mv_b,1.0), 1.0, mv_b);
per_frame_70=wave_b=if(below(wave_b,0.0), 0.0, wave_b);
per_frame_71=wave_b=if(above(wave_b,1.0), 1.0, wave_b);
per_frame_72=ob_g=if(below(ob_g,0.0), 0.0, ob_g);
per_frame_73=ob_g=if(above(ob_g,1.0), 1.0, ob_g);
per_frame_74=ob_b=if(below(ob_b,0.0), 0.0, ob_b);
per_frame_75=ob_b=if(above(ob_b,1.0), 1.0, ob_b);
per_pixel_1=rot = below(q3, q4-q2*.5)*q2*.8*(1-0*(rad));
per_pixel_2=;
per_pixel_3=//virtual axes;
per_pixel_4=vang=q1;
per_pixel_5=vx = (x-.5)*cos(vang) - (y-.5)*sin(vang)+.5;
per_pixel_6=vy = (x-.5)*sin(vang) +(y-.5)*cos(vang)+.5;
per_pixel_7=vy=1-vy;
per_pixel_8=;
per_pixel_9=dvy = (vx+.08*sin(int(rand(100))))*2%2*-.01-.005;
per_pixel_10=dvy = -.0025*((1-vy)*10+int(rand(5)));    //wobble, and faster at top - accelerating like real flames;
per_pixel_11=;
per_pixel_12=dvx = int(rand(20))*.0001*sin(int(rand(2))-.5);                       //flicker;
per_pixel_13=dvx = dvx*sqr(vy);                                                                //dampens top;
per_pixel_14=//dvx = dvx*(1-x/2);                                                        //slows sides;
per_pixel_15=dvx = dvx*-.2*(int(rand(10))-5);                                         //random damper;
per_pixel_16=dvx = dvx -(vx-.5)*.04*(.8-sqr(vy));                                 //drift towards centre;
per_pixel_17=dvx = dvx + cos(sqr(vy-.5)*10-time*1.1)*sqr(1-(vy))*.01; //add flutter at top;
per_pixel_18=;
per_pixel_19=//de-virtualise;
per_pixel_20=dx = dvx*cos(vang) - dvy*sin(vang);
per_pixel_21=dy = -dvx*sin(vang) - dvy*cos(vang);
per_pixel_22=;
per_pixel_23=// Telek - 09/11/2002;
per_pixel_24=cy = a + bass_att;
per_pixel_25=sy = rot - y;
per_pixel_26=rot = b * x;
per_pixel_27=cy = cy - q1;
per_pixel_28=zoomexp = bass_att - b;
per_pixel_29=zoomexp = zoomexp + b;
per_pixel_30=dy = time + a;
per_pixel_31=sx = time * y;
per_pixel_32=cy = cy * b;
per_pixel_33=zoomexp=if(below(zoomexp,0.01), 0.01, zoomexp);
per_pixel_34=zoomexp=if(above(zoomexp,100.0), 100.0, zoomexp);
per_pixel_35=rot=if(below(rot,-1.0), -1.0, rot);
per_pixel_36=rot=if(above(rot,1.0), 1.0, rot);
per_pixel_37=cy=if(below(cy,-1.0), -1.0, cy);
per_pixel_38=cy=if(above(cy,2.0), 2.0, cy);
per_pixel_39=dy=if(below(dy,-1), -1, dy);
per_pixel_40=dy=if(above(dy,1.0), 1.0, dy);
per_pixel_41=sx=if(below(sx,0.01), 0.01, sx);
per_pixel_42=sx=if(above(sx,100.0), 100.0, sx);
per_pixel_43=sy=if(below(sy,0.01), 0.01, sy);
per_pixel_44=sy=if(above(sy,100.0), 100.0, sy);
warp_1=`shader_body
warp_2=`{
warp_3=`float2 pixelsize = texsize.zw;
warp_4=`float2 uvm = uv_orig;
warp_5=`
warp_6=`float2 noise_uv = uv_orig*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;
warp_7=`float4 noiseVal = tex2D(sampler_noise_lq, noise_uv);
warp_8=`
warp_9=`ret.xyz = saturate(tex2D( sampler_pw_main,uvm).xyz*float3(1,1,1) - float3(.0,.0,.0));
warp_10=`ret.xyz = tex2D( sampler_pw_main,uvm).xyz;
warp_11=`
warp_12=`
warp_13=`float3 rsamp = tex2D(sampler_pw_main,uvm + (noiseVal.xy-.5)*12*pixelsize).xyz;
warp_14=`if (length(ret.xy - uvm) > length(rsamp.xy - uvm)) {
warp_15=`ret.xy = rsamp.xy;
warp_16=`}
warp_17=`
warp_18=`rsamp = tex2D(sampler_pw_main,uvm + (noiseVal.zw-.5)*48*pixelsize).xyz;
warp_19=`if (length(ret.xy - uvm) > length(rsamp.xy - uvm)) {
warp_20=`ret.xy = rsamp.xy;
warp_21=`}
warp_22=`
warp_23=`ret.z = tex2D(sampler_fw_main,ret.xy).z;
warp_24=`
warp_25=`ret.z -= q1*.005;
warp_26=`
warp_27=`if (ret.z < .09) {
warp_28=`ret*=0;
warp_29=`}
warp_30=`
warp_31=`
warp_32=`}
comp_1=`sampler sampler_ruin;
comp_2=`shader_body
comp_3=`{
comp_4=`  ret = tex2D(sampler_main,uv).xyz;
comp_5=`  float2 uv3 = float2(uv.x+.2+(mid*.1)+(.3*q1),uv.y+.2+(mid*.1)+(.3*q2));
comp_6=`  float3 ret3 = tex2D(sampler_ruin, ((uv3)*aspect.xy)*(.7-(mid*.05))).xyz;    
comp_7=`  float2 uv2 = float2(uv.x,abs(uv.y-1));
comp_8=`  float3 ret2 = tex2D(sampler_main,uv2).xyz;
comp_9=`  ret += ret*ret*10;
comp_10=`  ret2 += ret2*ret2*10;
comp_11=`  ret3 += ret3*ret3*15*treb;
comp_12=`  ret = lerp(ret2,ret,.5);
comp_13=`  ret = lerp(ret,ret3,ret*bass);
comp_14=`}
